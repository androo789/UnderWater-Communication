
Receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011e  00800100  00000d82  00000e16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000327  0080021e  0080021e  00000f34  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a93  00000000  00000000  00001050  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004ef  00000000  00000000  00001ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000049c  00000000  00000000  00001fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  00002470  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000326  00000000  00000000  0000268c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d83  00000000  00000000  000029b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00003735  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 4c 03 	jmp	0x698	; 0x698 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	25 e0       	ldi	r18, 0x05	; 5
  8c:	ae e1       	ldi	r26, 0x1E	; 30
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 34       	cpi	r26, 0x45	; 69
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 76 02 	call	0x4ec	; 0x4ec <main>
  9e:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <CRC>:
	ret[dataLength++] = (receivce_address & 0b00000100) >> 2;
	ret[dataLength++] = (receivce_address & 0b00001000) >> 3;
	ret[dataLength++] = (receivce_address & 0b00010000) >> 4;
	ret[dataLength++] = (receivce_address & 0b00100000) >> 5;
	ret[dataLength++] = (receivce_address & 0b01000000) >> 6;
	ret[dataLength++] = (receivce_address & 0b10000000) >> 7;
  a6:	2f 92       	push	r2
  a8:	3f 92       	push	r3

    // Convert the chars to int's
    for (i = 0; i < strlen(data); i++)
  aa:	4f 92       	push	r4
  ac:	5f 92       	push	r5
  ae:	6f 92       	push	r6
  b0:	7f 92       	push	r7
    {
        data_num[i] = (uint8_t)data[i];
  b2:	8f 92       	push	r8
  b4:	9f 92       	push	r9
  b6:	af 92       	push	r10
  b8:	bf 92       	push	r11
	ret[dataLength++] = (receivce_address & 0b00100000) >> 5;
	ret[dataLength++] = (receivce_address & 0b01000000) >> 6;
	ret[dataLength++] = (receivce_address & 0b10000000) >> 7;

    // Convert the chars to int's
    for (i = 0; i < strlen(data); i++)
  ba:	cf 92       	push	r12
  bc:	df 92       	push	r13
  be:	ef 92       	push	r14
  c0:	ff 92       	push	r15
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
  ce:	60 97       	sbiw	r28, 0x10	; 16
  d0:	0f b6       	in	r0, 0x3f	; 63
    {
        data_num[i] = (uint8_t)data[i];
    }

    int checksum = CRC(data_num, strlen(data), POLY, false); // Get a checksum for the data
  d2:	f8 94       	cli
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	cd bf       	out	0x3d, r28	; 61
  da:	3c 01       	movw	r6, r24
  dc:	8b 01       	movw	r16, r22
  de:	2a 01       	movw	r4, r20
  e0:	f2 2e       	mov	r15, r18
  e2:	1f 93       	push	r17

    #ifdef DEBUG // Debugging
    printf("\nChecksum: %i\n", checksum);
  e4:	6f 93       	push	r22
  e6:	82 e4       	ldi	r24, 0x42	; 66
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	9f 93       	push	r25
  ec:	8f 93       	push	r24
  ee:	0e 94 bd 03 	call	0x77a	; 0x77a <printf>
  f2:	0f 90       	pop	r0
    #endif // DEBUG

    // Loop through all the data
    for (i = 0; i < strlen(data); i++)
  f4:	0f 90       	pop	r0
  f6:	0f 90       	pop	r0
  f8:	0f 90       	pop	r0
  fa:	10 16       	cp	r1, r16
  fc:	11 06       	cpc	r1, r17
  fe:	0c f0       	brlt	.+2      	; 0x102 <CRC+0x5c>
    {
        uint8_t j;
        uint8_t ascii = (uint8_t)data[i]; // Take one of the data bytes
 100:	ca c0       	rjmp	.+404    	; 0x296 <CRC+0x1f0>
 102:	43 01       	movw	r8, r6
 104:	60 0e       	add	r6, r16
            ret[dataLength] = tmp; // Store the leftmost bit in an array

            dataLength++; // Add one to the total data length

            #ifdef DEBUG // Debugging
            printf("%i", tmp);
 106:	71 1e       	adc	r7, r17
 108:	21 2c       	mov	r2, r1
 10a:	31 2c       	mov	r3, r1
 10c:	0e e0       	ldi	r16, 0x0E	; 14
 10e:	11 e0       	ldi	r17, 0x01	; 1
 110:	54 01       	movw	r10, r8
    #ifdef DEBUG // Debugging
    printf("\nChecksum: %i\n", checksum);
    #endif // DEBUG

    // Loop through all the data
    for (i = 0; i < strlen(data); i++)
 112:	d4 01       	movw	r26, r8
    {
        uint8_t j;
        uint8_t ascii = (uint8_t)data[i]; // Take one of the data bytes
 114:	8d 91       	ld	r24, X+
 116:	4d 01       	movw	r8, r26
 118:	1f 92       	push	r1
 11a:	8f 93       	push	r24
        for (j = 0; j < 8; j++)
        {
            uint8_t tmp = (ascii & 0b10000000) >> 7; // Select the leftmost bit
            ascii = ascii << 1; // Shift the data left by 1

            ret[dataLength] = tmp; // Store the leftmost bit in an array
 11c:	1f 93       	push	r17
 11e:	0f 93       	push	r16
 120:	0e 94 bd 03 	call	0x77a	; 0x77a <printf>
 124:	32 2c       	mov	r3, r2
 126:	22 24       	eor	r2, r2
 128:	f5 01       	movw	r30, r10
 12a:	80 81       	ld	r24, Z
 12c:	28 2a       	or	r2, r24
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	0f 90       	pop	r0
 136:	86 14       	cp	r8, r6
 138:	97 04       	cpc	r9, r7
 13a:	51 f7       	brne	.-44     	; 0x110 <CRC+0x6a>

            dataLength++; // Add one to the total data length
 13c:	3f 92       	push	r3
 13e:	2f 92       	push	r2
 140:	89 e1       	ldi	r24, 0x19	; 25
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	9f 93       	push	r25
 146:	8f 93       	push	r24

            #ifdef DEBUG // Debugging
            printf("%i", tmp);
 148:	0e 94 bd 03 	call	0x77a	; 0x77a <printf>
 14c:	0f 90       	pop	r0
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	0f 90       	pop	r0
 154:	f1 10       	cpse	r15, r1
    {
        uint8_t j;
        uint8_t ascii = (uint8_t)data[i]; // Take one of the data bytes

        // Loop through the bits 1 at a time
        for (j = 0; j < 8; j++)
 156:	02 c0       	rjmp	.+4      	; 0x15c <CRC+0xb6>
 158:	32 2c       	mov	r3, r2
 15a:	22 24       	eor	r2, r2
 15c:	92 01       	movw	r18, r4
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	50 e0       	ldi	r21, 0x00	; 0
            #ifdef DEBUG // Debugging
            printf("%i", tmp);
            #endif
        }
        #ifdef DEBUG // Debugging
        printf(" ");
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	cb 01       	movw	r24, r22
 168:	49 86       	std	Y+9, r4	; 0x09
    #ifdef DEBUG // Debugging
    printf("\nChecksum: %i\n", checksum);
    #endif // DEBUG

    // Loop through all the data
    for (i = 0; i < strlen(data); i++)
 16a:	3a 87       	std	Y+10, r19	; 0x0a
 16c:	4b 87       	std	Y+11, r20	; 0x0b
 16e:	5c 87       	std	Y+12, r21	; 0x0c
 170:	6d 87       	std	Y+13, r22	; 0x0d
 172:	7e 87       	std	Y+14, r23	; 0x0e
 174:	8f 87       	std	Y+15, r24	; 0x0f
 176:	98 8b       	std	Y+16, r25	; 0x10
 178:	3f ef       	ldi	r19, 0xFF	; 255
 17a:	23 16       	cp	r2, r19
 17c:	31 04       	cpc	r3, r1
 17e:	08 f4       	brcc	.+2      	; 0x182 <CRC+0xdc>
 180:	9b c0       	rjmp	.+310    	; 0x2b8 <CRC+0x212>
 182:	a1 01       	movw	r20, r2
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	dc 01       	movw	r26, r24
 18e:	29 82       	std	Y+1, r2	; 0x01
 190:	5a 83       	std	Y+2, r21	; 0x02
 192:	6b 83       	std	Y+3, r22	; 0x03
 194:	7c 83       	std	Y+4, r23	; 0x04
 196:	8d 83       	std	Y+5, r24	; 0x05
 198:	9e 83       	std	Y+6, r25	; 0x06
 19a:	af 83       	std	Y+7, r26	; 0x07
 19c:	b8 87       	std	Y+8, r27	; 0x08
 19e:	29 85       	ldd	r18, Y+9	; 0x09
 1a0:	3a 85       	ldd	r19, Y+10	; 0x0a
 1a2:	4b 85       	ldd	r20, Y+11	; 0x0b
 1a4:	5c 85       	ldd	r21, Y+12	; 0x0c
 1a6:	6d 85       	ldd	r22, Y+13	; 0x0d
 1a8:	7e 85       	ldd	r23, Y+14	; 0x0e
    }

    // Loop 8 more times for the CRC byte
    for (i = 0; i < 8; i++)
    {
        int tmp = (checksum & 0b10000000) >> 7; // Select the leftmost bit
 1aa:	8f 85       	ldd	r24, Y+15	; 0x0f
 1ac:	98 89       	ldd	r25, Y+16	; 0x10
 1ae:	a9 80       	ldd	r10, Y+1	; 0x01
        checksum = checksum << 1; // Shift the checksum left by 1

        ret[dataLength] = tmp; // Store the 2 leftmost bits in an array
 1b0:	ba 80       	ldd	r11, Y+2	; 0x02
 1b2:	c1 2c       	mov	r12, r1
 1b4:	d1 2c       	mov	r13, r1
        printf(" ");
        #endif
    }

    // Loop 8 more times for the CRC byte
    for (i = 0; i < 8; i++)
 1b6:	e1 2c       	mov	r14, r1
 1b8:	f1 2c       	mov	r15, r1
 1ba:	00 e0       	ldi	r16, 0x00	; 0
 1bc:	10 e0       	ldi	r17, 0x00	; 0
 1be:	0e 94 b4 03 	call	0x768	; 0x768 <__cmpdi2>
 1c2:	c8 f5       	brcc	.+114    	; 0x236 <CRC+0x190>
 1c4:	82 2e       	mov	r8, r18
 1c6:	93 2e       	mov	r9, r19
 1c8:	44 2e       	mov	r4, r20
 1ca:	75 2e       	mov	r7, r21
 1cc:	66 2e       	mov	r6, r22
 1ce:	57 2e       	mov	r5, r23
 1d0:	f8 2f       	mov	r31, r24
 1d2:	e9 2f       	mov	r30, r25
 1d4:	28 2d       	mov	r18, r8
 1d6:	39 2d       	mov	r19, r9
 1d8:	44 2d       	mov	r20, r4
        dataLength++; // Add one to the total data length
    }

	for (i = 0; i < 8; i++)
	{
		ret[dataLength] = 0;
 1da:	57 2d       	mov	r21, r7

        ret[dataLength] = tmp; // Store the 2 leftmost bits in an array
        dataLength++; // Add one to the total data length
    }

	for (i = 0; i < 8; i++)
 1dc:	66 2d       	mov	r22, r6
 1de:	75 2d       	mov	r23, r5
 1e0:	8f 2f       	mov	r24, r31
 1e2:	9e 2f       	mov	r25, r30
 1e4:	01 e0       	ldi	r16, 0x01	; 1
 1e6:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__ashldi3>
 1ea:	82 2e       	mov	r8, r18
 1ec:	93 2e       	mov	r9, r19
		ret[dataLength] = 0;
		dataLength++;
	}

    #ifdef DEBUG // Debugging
    printf("\ndataLength: %i\n", dataLength);
 1ee:	44 2e       	mov	r4, r20
 1f0:	75 2e       	mov	r7, r21
 1f2:	66 2e       	mov	r6, r22
 1f4:	57 2e       	mov	r5, r23
 1f6:	f8 2f       	mov	r31, r24
 1f8:	e9 2f       	mov	r30, r25
 1fa:	a9 80       	ldd	r10, Y+1	; 0x01
 1fc:	ba 80       	ldd	r11, Y+2	; 0x02
    #endif // DEBUG

    return ret;
 1fe:	cb 80       	ldd	r12, Y+3	; 0x03
 200:	dc 80       	ldd	r13, Y+4	; 0x04
 202:	ed 80       	ldd	r14, Y+5	; 0x05
 204:	fe 80       	ldd	r15, Y+6	; 0x06
}
 206:	0f 81       	ldd	r16, Y+7	; 0x07
 208:	18 85       	ldd	r17, Y+8	; 0x08
 20a:	0e 94 b4 03 	call	0x768	; 0x768 <__cmpdi2>
 20e:	10 f3       	brcs	.-60     	; 0x1d4 <CRC+0x12e>
 210:	57 2d       	mov	r21, r7
 212:	8f 2f       	mov	r24, r31
 214:	9e 2f       	mov	r25, r30
 216:	28 2d       	mov	r18, r8
 218:	39 2d       	mov	r19, r9
 21a:	66 2d       	mov	r22, r6
 21c:	75 2d       	mov	r23, r5
 21e:	01 e0       	ldi	r16, 0x01	; 1
 220:	0e 94 98 03 	call	0x730	; 0x730 <__lshrdi3>
 224:	42 2e       	mov	r4, r18
 226:	53 2e       	mov	r5, r19
 228:	64 2e       	mov	r6, r20
 22a:	75 2e       	mov	r7, r21
 22c:	86 2e       	mov	r8, r22
 22e:	97 2e       	mov	r9, r23
 230:	a8 2e       	mov	r10, r24
 232:	b9 2e       	mov	r11, r25
 234:	08 c0       	rjmp	.+16     	; 0x246 <CRC+0x1a0>
 236:	49 84       	ldd	r4, Y+9	; 0x09
    if (!received) // Check if the data is received or not
    {
        allData = allData << 8; // Add one byte of empty data at the right of the data
    }

    uint64_t calcPoly = poly; // Store the polynomial in a variable so we can modify it
 238:	5a 84       	ldd	r5, Y+10	; 0x0a
 23a:	6b 84       	ldd	r6, Y+11	; 0x0b
 23c:	7c 84       	ldd	r7, Y+12	; 0x0c
 23e:	8d 84       	ldd	r8, Y+13	; 0x0d
 240:	9e 84       	ldd	r9, Y+14	; 0x0e
 242:	af 84       	ldd	r10, Y+15	; 0x0f
 244:	b8 88       	ldd	r11, Y+16	; 0x10
            shiftBack = true;
        }
        if (shiftBack) calcPoly = calcPoly >> 1; // Shift the polynomial back one

        #ifdef DEBUG // Debugging
        printf("%i^%i=", allData, calcPoly);
 246:	bf 92       	push	r11
 248:	af 92       	push	r10
 24a:	9f 92       	push	r9
 24c:	8f 92       	push	r8
 24e:	7f 92       	push	r7
 250:	6f 92       	push	r6
 252:	5f 92       	push	r5
 254:	4f 92       	push	r4
 256:	3f 92       	push	r3
 258:	2f 92       	push	r2
 25a:	a7 e2       	ldi	r26, 0x27	; 39
 25c:	b1 e0       	ldi	r27, 0x01	; 1
 25e:	bf 93       	push	r27
 260:	af 93       	push	r26
 262:	0e 94 bd 03 	call	0x77a	; 0x77a <printf>
        #endif // DEBUG

        allData = allData ^ calcPoly; // Do the actual XOR
 266:	24 24       	eor	r2, r4
 268:	35 24       	eor	r3, r5

        #ifdef DEBUG // Debugging
        printf("%i\n", allData);
 26a:	3f 92       	push	r3
 26c:	2f 92       	push	r2
 26e:	ae eb       	ldi	r26, 0xBE	; 190
 270:	b1 e0       	ldi	r27, 0x01	; 1
 272:	bf 93       	push	r27
 274:	af 93       	push	r26
 276:	0e 94 bd 03 	call	0x77a	; 0x77a <printf>
    // Loop endlessly
    while (1)
    {
        bool shiftBack = false; // To see if we need to shift back later

        if (allData < 0xFF) break; // If the data is smaller then 255 (0xFF)
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	f8 94       	cli
 27e:	de bf       	out	0x3e, r29	; 62
 280:	0f be       	out	0x3f, r0	; 63
 282:	cd bf       	out	0x3d, r28	; 61
 284:	3f ef       	ldi	r19, 0xFF	; 255
 286:	23 16       	cp	r2, r19
 288:	31 04       	cpc	r3, r1
 28a:	08 f0       	brcs	.+2      	; 0x28e <CRC+0x1e8>
 28c:	7a cf       	rjmp	.-268    	; 0x182 <CRC+0xdc>
 28e:	14 c0       	rjmp	.+40     	; 0x2b8 <CRC+0x212>
    printf("Length: %i\n", length);
    #endif // DEBUG

    // Reset some stuff and initialize some variables
    int i;
    uint16_t allData = 0;
 290:	21 2c       	mov	r2, r1
 292:	31 2c       	mov	r3, r1
 294:	11 c0       	rjmp	.+34     	; 0x2b8 <CRC+0x212>

        allData = allData << 8 | (uint8_t)data[i]; // Add the last byte to the right of the previous ones
    }

    #ifdef DEBUG // Debugging
    printf("\nallData: %u\n", allData);
 296:	1f 92       	push	r1
 298:	1f 92       	push	r1
 29a:	89 e1       	ldi	r24, 0x19	; 25
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	9f 93       	push	r25
 2a0:	8f 93       	push	r24
 2a2:	0e 94 bd 03 	call	0x77a	; 0x77a <printf>
    #endif // DEBUG

    if (!received) // Check if the data is received or not
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	0f 90       	pop	r0
 2ac:	0f 90       	pop	r0
 2ae:	f1 10       	cpse	r15, r1
 2b0:	ef cf       	rjmp	.-34     	; 0x290 <CRC+0x1ea>
    printf("Length: %i\n", length);
    #endif // DEBUG

    // Reset some stuff and initialize some variables
    int i;
    uint16_t allData = 0;
 2b2:	21 2c       	mov	r2, r1
 2b4:	31 2c       	mov	r3, r1
 2b6:	50 cf       	rjmp	.-352    	; 0x158 <CRC+0xb2>

        calcPoly = poly; // Reset the polynomial to its original value
    }

    return allData;
 2b8:	c1 01       	movw	r24, r2
 2ba:	60 96       	adiw	r28, 0x10	; 16
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	f8 94       	cli
 2c0:	de bf       	out	0x3e, r29	; 62
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	cd bf       	out	0x3d, r28	; 61
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	1f 91       	pop	r17
 2cc:	0f 91       	pop	r16
 2ce:	ff 90       	pop	r15
 2d0:	ef 90       	pop	r14
 2d2:	df 90       	pop	r13
 2d4:	cf 90       	pop	r12
 2d6:	bf 90       	pop	r11
 2d8:	af 90       	pop	r10
 2da:	9f 90       	pop	r9
 2dc:	8f 90       	pop	r8
 2de:	7f 90       	pop	r7
 2e0:	6f 90       	pop	r6
 2e2:	5f 90       	pop	r5
 2e4:	4f 90       	pop	r4
 2e6:	3f 90       	pop	r3
 2e8:	2f 90       	pop	r2
 2ea:	08 95       	ret

000002ec <convertToData>:
 * @param length The length of the array
 *
 * @return The readable data
*/
char* convertToData(uint8_t bits[800], int length)
{
 2ec:	2f 92       	push	r2
 2ee:	3f 92       	push	r3
 2f0:	4f 92       	push	r4
 2f2:	5f 92       	push	r5
 2f4:	6f 92       	push	r6
 2f6:	7f 92       	push	r7
 2f8:	8f 92       	push	r8
 2fa:	9f 92       	push	r9
 2fc:	af 92       	push	r10
 2fe:	bf 92       	push	r11
 300:	cf 92       	push	r12
 302:	df 92       	push	r13
 304:	ef 92       	push	r14
 306:	ff 92       	push	r15
 308:	0f 93       	push	r16
 30a:	1f 93       	push	r17
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	cd b7       	in	r28, 0x3d	; 61
 312:	de b7       	in	r29, 0x3e	; 62
 314:	c8 5c       	subi	r28, 0xC8	; 200
 316:	d1 09       	sbc	r29, r1
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	f8 94       	cli
 31c:	de bf       	out	0x3e, r29	; 62
 31e:	0f be       	out	0x3f, r0	; 63
 320:	cd bf       	out	0x3d, r28	; 61
 322:	e8 2e       	mov	r14, r24
 324:	f9 2e       	mov	r15, r25
 326:	06 2f       	mov	r16, r22
 328:	17 2f       	mov	r17, r23
    // Reset some stuff and initialize some variables
    uint16_t i;
    int total = 0;
    char ret[100] = ""; // The return value
 32a:	19 82       	std	Y+1, r1	; 0x01
 32c:	1a 82       	std	Y+2, r1	; 0x02
 32e:	1b 82       	std	Y+3, r1	; 0x03
 330:	1c 82       	std	Y+4, r1	; 0x04
 332:	fe 01       	movw	r30, r28
 334:	35 96       	adiw	r30, 0x05	; 5
 336:	80 e6       	ldi	r24, 0x60	; 96
 338:	df 01       	movw	r26, r30
 33a:	1d 92       	st	X+, r1
 33c:	8a 95       	dec	r24
 33e:	e9 f7       	brne	.-6      	; 0x33a <convertToData+0x4e>
    char tmp = 0b00000000; // Create a temp char with no data
    uint8_t ascii[100]; // The int representation of the data

    #ifdef DEBUG // Debugging
    printf("length: %i\n", length);
 340:	7f 93       	push	r23
 342:	6f 93       	push	r22
 344:	2e e4       	ldi	r18, 0x4E	; 78
 346:	31 e0       	ldi	r19, 0x01	; 1
 348:	3f 93       	push	r19
 34a:	2f 93       	push	r18
 34c:	0e 94 bd 03 	call	0x77a	; 0x77a <printf>
 350:	6e 2c       	mov	r6, r14
 352:	7f 2c       	mov	r7, r15
 354:	80 2e       	mov	r8, r16
 356:	91 2e       	mov	r9, r17
    #endif // DEBUG

    // Loop through all the bits
    for (i = 0; i < length; i++)
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	0f 90       	pop	r0
 35e:	0f 90       	pop	r0
{
    // Reset some stuff and initialize some variables
    uint16_t i;
    int total = 0;
    char ret[100] = ""; // The return value
    char tmp = 0b00000000; // Create a temp char with no data
 360:	31 2c       	mov	r3, r1
*/
char* convertToData(uint8_t bits[800], int length)
{
    // Reset some stuff and initialize some variables
    uint16_t i;
    int total = 0;
 362:	a1 2c       	mov	r10, r1
 364:	b1 2c       	mov	r11, r1
    #ifdef DEBUG // Debugging
    printf("length: %i\n", length);
    #endif // DEBUG

    // Loop through all the bits
    for (i = 0; i < length; i++)
 366:	00 e0       	ldi	r16, 0x00	; 0
 368:	10 e0       	ldi	r17, 0x00	; 0
    {
        #ifdef DEBUG // Debugging
        printf("\ni:%i", i);
 36a:	0f 2e       	mov	r0, r31
 36c:	fa e5       	ldi	r31, 0x5A	; 90
 36e:	cf 2e       	mov	r12, r31
 370:	f1 e0       	ldi	r31, 0x01	; 1
 372:	df 2e       	mov	r13, r31
 374:	f0 2d       	mov	r31, r0
        #endif

        tmp = tmp << 1 | (bits[i] & 0b1); // Add the bit to the right of the previous ones

        #ifdef DEBUG // Debugging
        printf(" bits%i tmp%i,", (bits[i] & 0b1), (uint8_t)tmp);
 376:	0f 2e       	mov	r0, r31
 378:	f0 e6       	ldi	r31, 0x60	; 96
 37a:	ef 2e       	mov	r14, r31
 37c:	f1 e0       	ldi	r31, 0x01	; 1
 37e:	ff 2e       	mov	r15, r31
 380:	f0 2d       	mov	r31, r0

        // If this is dividable by 8
        if ((i + 1) % 8 == 0)
        {
            #ifdef DEBUG // Debugging
            printf("\nchar %c\nTotal %i\n", tmp, total);
 382:	0f 2e       	mov	r0, r31
 384:	ff e6       	ldi	r31, 0x6F	; 111
 386:	4f 2e       	mov	r4, r31
 388:	f1 e0       	ldi	r31, 0x01	; 1
 38a:	5f 2e       	mov	r5, r31
 38c:	f0 2d       	mov	r31, r0
						//return NULL;
					}
				}
				ret[total] = tmp; // Store the temp value in the return value
				total++; // Add one to the total
				tmp = 0b00000000; // Reset the temp value
 38e:	21 2c       	mov	r2, r1
    #ifdef DEBUG // Debugging
    printf("length: %i\n", length);
    #endif // DEBUG

    // Loop through all the bits
    for (i = 0; i < length; i++)
 390:	4d c0       	rjmp	.+154    	; 0x42c <convertToData+0x140>
    {
        #ifdef DEBUG // Debugging
        printf("\ni:%i", i);
 392:	1f 93       	push	r17
 394:	0f 93       	push	r16
 396:	df 92       	push	r13
 398:	cf 92       	push	r12
 39a:	0e 94 bd 03 	call	0x77a	; 0x77a <printf>
        #endif

        tmp = tmp << 1 | (bits[i] & 0b1); // Add the bit to the right of the previous ones
 39e:	f3 01       	movw	r30, r6
 3a0:	81 91       	ld	r24, Z+
 3a2:	3f 01       	movw	r6, r30
 3a4:	81 70       	andi	r24, 0x01	; 1
 3a6:	33 0c       	add	r3, r3
 3a8:	38 2a       	or	r3, r24

        #ifdef DEBUG // Debugging
        printf(" bits%i tmp%i,", (bits[i] & 0b1), (uint8_t)tmp);
 3aa:	1f 92       	push	r1
 3ac:	3f 92       	push	r3
 3ae:	1f 92       	push	r1
 3b0:	8f 93       	push	r24
 3b2:	ff 92       	push	r15
 3b4:	ef 92       	push	r14
 3b6:	0e 94 bd 03 	call	0x77a	; 0x77a <printf>
        #endif

        // If this is dividable by 8
        if ((i + 1) % 8 == 0)
 3ba:	0f 5f       	subi	r16, 0xFF	; 255
 3bc:	1f 4f       	sbci	r17, 0xFF	; 255
 3be:	c8 01       	movw	r24, r16
 3c0:	87 70       	andi	r24, 0x07	; 7
 3c2:	99 27       	eor	r25, r25
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	f8 94       	cli
 3c8:	de bf       	out	0x3e, r29	; 62
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	cd bf       	out	0x3d, r28	; 61
 3ce:	89 2b       	or	r24, r25
 3d0:	69 f5       	brne	.+90     	; 0x42c <convertToData+0x140>
        {
            #ifdef DEBUG // Debugging
            printf("\nchar %c\nTotal %i\n", tmp, total);
 3d2:	bf 92       	push	r11
 3d4:	af 92       	push	r10
 3d6:	1f 92       	push	r1
 3d8:	3f 92       	push	r3
 3da:	5f 92       	push	r5
 3dc:	4f 92       	push	r4
 3de:	0e 94 bd 03 	call	0x77a	; 0x77a <printf>
            #endif // DEBUG

			if (tmp != 0b11111111)
 3e2:	0f 90       	pop	r0
 3e4:	0f 90       	pop	r0
 3e6:	0f 90       	pop	r0
 3e8:	0f 90       	pop	r0
 3ea:	0f 90       	pop	r0
 3ec:	0f 90       	pop	r0
 3ee:	3f ef       	ldi	r19, 0xFF	; 255
 3f0:	33 16       	cp	r3, r19
 3f2:	e1 f0       	breq	.+56     	; 0x42c <convertToData+0x140>
			{
				if (total == 1)
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	a8 16       	cp	r10, r24
 3f8:	b1 04       	cpc	r11, r1
 3fa:	69 f4       	brne	.+26     	; 0x416 <convertToData+0x12a>
				{
					if (tmp != OWN_ADDRESS)
 3fc:	a2 e0       	ldi	r26, 0x02	; 2
 3fe:	3a 16       	cp	r3, r26
 400:	51 f0       	breq	.+20     	; 0x416 <convertToData+0x12a>
 402:	ae 01       	movw	r20, r28
 404:	4f 5f       	subi	r20, 0xFF	; 255
 406:	5f 4f       	sbci	r21, 0xFF	; 255
 408:	9e 01       	movw	r18, r28
 40a:	2b 59       	subi	r18, 0x9B	; 155
 40c:	3f 4f       	sbci	r19, 0xFF	; 255
    #ifdef DEBUG // Debugging
    printf("length: %i\n", length);
    #endif // DEBUG

    // Loop through all the bits
    for (i = 0; i < length; i++)
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
    }

    // Loop through all the chars
    for (i = 0; i < strlen(ret); i++)
 412:	da 01       	movw	r26, r20
 414:	17 c0       	rjmp	.+46     	; 0x444 <convertToData+0x158>
					{
					break;
						//return NULL;
					}
				}
				ret[total] = tmp; // Store the temp value in the return value
 416:	e1 e0       	ldi	r30, 0x01	; 1
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	ec 0f       	add	r30, r28
 41c:	fd 1f       	adc	r31, r29
 41e:	ea 0d       	add	r30, r10
 420:	fb 1d       	adc	r31, r11
 422:	30 82       	st	Z, r3
				total++; // Add one to the total
 424:	bf ef       	ldi	r27, 0xFF	; 255
 426:	ab 1a       	sub	r10, r27
 428:	bb 0a       	sbc	r11, r27
				tmp = 0b00000000; // Reset the temp value
 42a:	32 2c       	mov	r3, r2
    #ifdef DEBUG // Debugging
    printf("length: %i\n", length);
    #endif // DEBUG

    // Loop through all the bits
    for (i = 0; i < length; i++)
 42c:	08 15       	cp	r16, r8
 42e:	19 05       	cpc	r17, r9
 430:	09 f0       	breq	.+2      	; 0x434 <convertToData+0x148>
 432:	af cf       	rjmp	.-162    	; 0x392 <convertToData+0xa6>
 434:	e6 cf       	rjmp	.-52     	; 0x402 <convertToData+0x116>
    }

    // Loop through all the chars
    for (i = 0; i < strlen(ret); i++)
    {
        ascii[i] = (uint8_t)ret[i]; // Convert them to ints
 436:	fa 01       	movw	r30, r20
 438:	61 91       	ld	r22, Z+
 43a:	af 01       	movw	r20, r30
 43c:	f9 01       	movw	r30, r18
 43e:	61 93       	st	Z+, r22
 440:	9f 01       	movw	r18, r30
			}
		}
    }

    // Loop through all the chars
    for (i = 0; i < strlen(ret); i++)
 442:	01 96       	adiw	r24, 0x01	; 1
 444:	fd 01       	movw	r30, r26
 446:	01 90       	ld	r0, Z+
 448:	00 20       	and	r0, r0
 44a:	e9 f7       	brne	.-6      	; 0x446 <convertToData+0x15a>
 44c:	31 97       	sbiw	r30, 0x01	; 1
 44e:	bf 01       	movw	r22, r30
 450:	6a 1b       	sub	r22, r26
 452:	7b 0b       	sbc	r23, r27
 454:	86 17       	cp	r24, r22
 456:	97 07       	cpc	r25, r23
 458:	70 f3       	brcs	.-36     	; 0x436 <convertToData+0x14a>
    {
        ascii[i] = (uint8_t)ret[i]; // Convert them to ints
    }

    int checksum = CRC(ascii, strlen(ret), POLY, true); // Do the checksum
 45a:	21 e0       	ldi	r18, 0x01	; 1
 45c:	47 e6       	ldi	r20, 0x67	; 103
 45e:	51 e0       	ldi	r21, 0x01	; 1
 460:	ce 01       	movw	r24, r28
 462:	8b 59       	subi	r24, 0x9B	; 155
 464:	9f 4f       	sbci	r25, 0xFF	; 255
 466:	0e 94 53 00 	call	0xa6	; 0xa6 <CRC>
 46a:	8c 01       	movw	r16, r24

    ret[total - 1] = 0b00000000; // Set the last 2 bytes to 0 (this is the checksum and end byte)
 46c:	fe 01       	movw	r30, r28
 46e:	ea 0d       	add	r30, r10
 470:	fb 1d       	adc	r31, r11
 472:	10 82       	st	Z, r1
	ret[total - 2] = 0b00000000;
 474:	ef ef       	ldi	r30, 0xFF	; 255
 476:	ff ef       	ldi	r31, 0xFF	; 255
 478:	ec 0f       	add	r30, r28
 47a:	fd 1f       	adc	r31, r29
 47c:	ea 0d       	add	r30, r10
 47e:	fb 1d       	adc	r31, r11
 480:	10 82       	st	Z, r1

    #ifdef DEBUG // Debugging
    printf("\n\nChecksum: %i\n\n", checksum);
 482:	1f 93       	push	r17
 484:	8f 93       	push	r24
 486:	82 e8       	ldi	r24, 0x82	; 130
 488:	91 e0       	ldi	r25, 0x01	; 1
 48a:	9f 93       	push	r25
 48c:	8f 93       	push	r24
 48e:	0e 94 bd 03 	call	0x77a	; 0x77a <printf>
    #endif // DEBUG

    if (checksum == 0)
 492:	0f 90       	pop	r0
 494:	0f 90       	pop	r0
 496:	0f 90       	pop	r0
 498:	0f 90       	pop	r0
 49a:	01 2b       	or	r16, r17
 49c:	29 f4       	brne	.+10     	; 0x4a8 <convertToData+0x1bc>
    {
        #ifdef DEBUG // Debugging
        printf("No errors.\n");
 49e:	83 e9       	ldi	r24, 0x93	; 147
 4a0:	91 e0       	ldi	r25, 0x01	; 1
 4a2:	0e 94 da 03 	call	0x7b4	; 0x7b4 <puts>
 4a6:	06 c0       	rjmp	.+12     	; 0x4b4 <convertToData+0x1c8>
        #endif // DEBUG
    }
    else
    {
        ret[0] = -1;
 4a8:	8f ef       	ldi	r24, 0xFF	; 255
 4aa:	89 83       	std	Y+1, r24	; 0x01
        #ifdef DEBUG // Debugging
        printf("Error detected.\n");
 4ac:	8e e9       	ldi	r24, 0x9E	; 158
 4ae:	91 e0       	ldi	r25, 0x01	; 1
 4b0:	0e 94 da 03 	call	0x7b4	; 0x7b4 <puts>
        #endif // DEBUG
    }

    return ret;
}
 4b4:	ce 01       	movw	r24, r28
 4b6:	01 96       	adiw	r24, 0x01	; 1
 4b8:	c8 53       	subi	r28, 0x38	; 56
 4ba:	df 4f       	sbci	r29, 0xFF	; 255
 4bc:	0f b6       	in	r0, 0x3f	; 63
 4be:	f8 94       	cli
 4c0:	de bf       	out	0x3e, r29	; 62
 4c2:	0f be       	out	0x3f, r0	; 63
 4c4:	cd bf       	out	0x3d, r28	; 61
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	1f 91       	pop	r17
 4cc:	0f 91       	pop	r16
 4ce:	ff 90       	pop	r15
 4d0:	ef 90       	pop	r14
 4d2:	df 90       	pop	r13
 4d4:	cf 90       	pop	r12
 4d6:	bf 90       	pop	r11
 4d8:	af 90       	pop	r10
 4da:	9f 90       	pop	r9
 4dc:	8f 90       	pop	r8
 4de:	7f 90       	pop	r7
 4e0:	6f 90       	pop	r6
 4e2:	5f 90       	pop	r5
 4e4:	4f 90       	pop	r4
 4e6:	3f 90       	pop	r3
 4e8:	2f 90       	pop	r2
 4ea:	08 95       	ret

000004ec <main>:
volatile uint8_t receiving;



int main(void)
{
 4ec:	ee e1       	ldi	r30, 0x1E	; 30
 4ee:	f2 e0       	ldi	r31, 0x02	; 2
 4f0:	8e e3       	ldi	r24, 0x3E	; 62
 4f2:	95 e0       	ldi	r25, 0x05	; 5
    for (int i = 0; i < 800; i++)
	{
		receivedData[i] = 0;
 4f4:	11 92       	st	Z+, r1



int main(void)
{
    for (int i = 0; i < 800; i++)
 4f6:	e8 17       	cp	r30, r24
 4f8:	f9 07       	cpc	r31, r25
 4fa:	e1 f7       	brne	.-8      	; 0x4f4 <main+0x8>
	{
		receivedData[i] = 0;
	}

	receiving = 0;
 4fc:	10 92 3e 05 	sts	0x053E, r1

	USART0Init(); // Initlialize USART communication
 500:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <USART0Init>
	stdout =& usart0_str;
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	91 e0       	ldi	r25, 0x01	; 1
 508:	90 93 42 05 	sts	0x0542, r25
 50c:	80 93 41 05 	sts	0x0541, r24
	
	printf("Start baudrate: %i\n", OUTPUT_BAUDRATE);
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	8f 93       	push	r24
 514:	84 ef       	ldi	r24, 0xF4	; 244
 516:	8f 93       	push	r24
 518:	8e ea       	ldi	r24, 0xAE	; 174
 51a:	91 e0       	ldi	r25, 0x01	; 1
 51c:	9f 93       	push	r25
 51e:	8f 93       	push	r24
 520:	0e 94 bd 03 	call	0x77a	; 0x77a <printf>

	DDRB &= ~(1 << INPUT_PIN); // Set INPUT_PIN as input
 524:	20 98       	cbi	0x04, 0	; 4

	PCICR |= (1 << PCIE0);
 526:	e8 e6       	ldi	r30, 0x68	; 104
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	80 81       	ld	r24, Z
 52c:	81 60       	ori	r24, 0x01	; 1
 52e:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT0);
 530:	eb e6       	ldi	r30, 0x6B	; 107
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	80 81       	ld	r24, Z
 536:	81 60       	ori	r24, 0x01	; 1
 538:	80 83       	st	Z, r24

	sei(); // Turn on interrupts
 53a:	78 94       	sei
 53c:	0f 90       	pop	r0
 53e:	0f 90       	pop	r0
 540:	0f 90       	pop	r0
 542:	0f 90       	pop	r0

	int counter = 0;
	
	uint8_t zeroStreak = 0;
 544:	51 2c       	mov	r5, r1
	PCICR |= (1 << PCIE0);
	PCMSK0 |= (1 << PCINT0);

	sei(); // Turn on interrupts

	int counter = 0;
 546:	e1 2c       	mov	r14, r1
 548:	f1 2c       	mov	r15, r1
		{
			_delay_us(DELAY_US / 4); // Wait a quarter of the baudrate to sample somewhere in the middle
			receivedData[counter] = PINB & (1 << INPUT_PIN);
			
			if (receivedData[counter] == 0) zeroStreak++; // Add one to the zeroStreak if the received bit is a 0
			else zeroStreak = 0; // Reset the zeroStreak if the received bit is a 1
 54a:	41 2c       	mov	r4, r1
			{
				printf("\n\nStop Byte detected, stopped receiving.\n\n");

				for (int i = 0; i < counter; i++) // Loop through all the data
				{
					printf("%i", receivedData[i]);
 54c:	0f 2e       	mov	r0, r31
 54e:	fe e1       	ldi	r31, 0x1E	; 30
 550:	af 2e       	mov	r10, r31
 552:	f2 e0       	ldi	r31, 0x02	; 2
 554:	bf 2e       	mov	r11, r31
 556:	f0 2d       	mov	r31, r0
 558:	cd e5       	ldi	r28, 0x5D	; 93
 55a:	d1 e0       	ldi	r29, 0x01	; 1
 55c:	0f 2e       	mov	r0, r31
 55e:	ff e1       	ldi	r31, 0x1F	; 31
 560:	2f 2e       	mov	r2, r31
 562:	f2 e0       	ldi	r31, 0x02	; 2
 564:	3f 2e       	mov	r3, r31
 566:	f0 2d       	mov	r31, r0
				{
					if (received[0] != 0xFF) // If the first byte is not equal to 255 (0xFF)
					{
						printf("Error detected...\n");
					}
					printf("Received data: %s\n\n", received);
 568:	0f 2e       	mov	r0, r31
 56a:	fe ef       	ldi	r31, 0xFE	; 254
 56c:	8f 2e       	mov	r8, r31
 56e:	f1 e0       	ldi	r31, 0x01	; 1
 570:	9f 2e       	mov	r9, r31
 572:	f0 2d       	mov	r31, r0
 574:	6c c0       	rjmp	.+216    	; 0x64e <main+0x162>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 576:	8f ec       	ldi	r24, 0xCF	; 207
 578:	97 e0       	ldi	r25, 0x07	; 7
 57a:	01 97       	sbiw	r24, 0x01	; 1
 57c:	f1 f7       	brne	.-4      	; 0x57a <main+0x8e>
 57e:	00 c0       	rjmp	.+0      	; 0x580 <main+0x94>
 580:	00 00       	nop
    while (1) 
    {
		while (receiving == 1)
		{
			_delay_us(DELAY_US / 4); // Wait a quarter of the baudrate to sample somewhere in the middle
			receivedData[counter] = PINB & (1 << INPUT_PIN);
 582:	83 b1       	in	r24, 0x03	; 3
 584:	81 70       	andi	r24, 0x01	; 1
 586:	f7 01       	movw	r30, r14
 588:	e2 5e       	subi	r30, 0xE2	; 226
 58a:	fd 4f       	sbci	r31, 0xFD	; 253
 58c:	80 83       	st	Z, r24
			
			if (receivedData[counter] == 0) zeroStreak++; // Add one to the zeroStreak if the received bit is a 0
 58e:	81 11       	cpse	r24, r1
 590:	63 c0       	rjmp	.+198    	; 0x658 <main+0x16c>
 592:	53 94       	inc	r5
			else zeroStreak = 0; // Reset the zeroStreak if the received bit is a 1
			counter++; // Add one to the counter
 594:	67 01       	movw	r12, r14
 596:	9f ef       	ldi	r25, 0xFF	; 255
 598:	c9 1a       	sub	r12, r25
 59a:	d9 0a       	sbc	r13, r25
 59c:	ef e6       	ldi	r30, 0x6F	; 111
 59e:	f7 e1       	ldi	r31, 0x17	; 23
 5a0:	31 97       	sbiw	r30, 0x01	; 1
 5a2:	f1 f7       	brne	.-4      	; 0x5a0 <main+0xb4>
 5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <main+0xba>
 5a6:	00 00       	nop
			_delay_us((DELAY_US / 4) * 3); // Wait the other three quarters of the baudrate

			if (((counter % 8) == 0) && zeroStreak >= 8)  // If the counter is dividable by 8 and the zeroStreak is bigger or equal to 8
 5a8:	c6 01       	movw	r24, r12
 5aa:	87 70       	andi	r24, 0x07	; 7
 5ac:	99 27       	eor	r25, r25
 5ae:	89 2b       	or	r24, r25
 5b0:	09 f0       	breq	.+2      	; 0x5b4 <main+0xc8>
 5b2:	4c c0       	rjmp	.+152    	; 0x64c <main+0x160>
 5b4:	f7 e0       	ldi	r31, 0x07	; 7
 5b6:	f5 15       	cp	r31, r5
 5b8:	08 f0       	brcs	.+2      	; 0x5bc <main+0xd0>
 5ba:	48 c0       	rjmp	.+144    	; 0x64c <main+0x160>
			{
				printf("\n\nStop Byte detected, stopped receiving.\n\n");
 5bc:	82 ec       	ldi	r24, 0xC2	; 194
 5be:	91 e0       	ldi	r25, 0x01	; 1
 5c0:	0e 94 da 03 	call	0x7b4	; 0x7b4 <puts>

				for (int i = 0; i < counter; i++) // Loop through all the data
 5c4:	1c 14       	cp	r1, r12
 5c6:	1d 04       	cpc	r1, r13
 5c8:	0c f4       	brge	.+2      	; 0x5cc <main+0xe0>
 5ca:	52 c0       	rjmp	.+164    	; 0x670 <main+0x184>
 5cc:	1c c0       	rjmp	.+56     	; 0x606 <main+0x11a>
				{
					printf("%i", receivedData[i]);
 5ce:	f8 01       	movw	r30, r16
 5d0:	81 91       	ld	r24, Z+
 5d2:	8f 01       	movw	r16, r30
 5d4:	1f 92       	push	r1
 5d6:	8f 93       	push	r24
 5d8:	df 93       	push	r29
 5da:	cf 93       	push	r28
 5dc:	0e 94 bd 03 	call	0x77a	; 0x77a <printf>

					if ((i + 1) % 8 == 0) printf(" ");
 5e0:	9f ef       	ldi	r25, 0xFF	; 255
 5e2:	69 1a       	sub	r6, r25
 5e4:	79 0a       	sbc	r7, r25
 5e6:	c3 01       	movw	r24, r6
 5e8:	87 70       	andi	r24, 0x07	; 7
 5ea:	99 27       	eor	r25, r25
 5ec:	0f 90       	pop	r0
 5ee:	0f 90       	pop	r0
 5f0:	0f 90       	pop	r0
 5f2:	0f 90       	pop	r0
 5f4:	89 2b       	or	r24, r25
 5f6:	21 f4       	brne	.+8      	; 0x600 <main+0x114>
 5f8:	80 e2       	ldi	r24, 0x20	; 32
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <putchar>

			if (((counter % 8) == 0) && zeroStreak >= 8)  // If the counter is dividable by 8 and the zeroStreak is bigger or equal to 8
			{
				printf("\n\nStop Byte detected, stopped receiving.\n\n");

				for (int i = 0; i < counter; i++) // Loop through all the data
 600:	6e 14       	cp	r6, r14
 602:	7f 04       	cpc	r7, r15
 604:	21 f7       	brne	.-56     	; 0x5ce <main+0xe2>
					printf("%i", receivedData[i]);

					if ((i + 1) % 8 == 0) printf(" ");
				}

				char* received = convertToData(receivedData, counter); // Convert base2 to data
 606:	b6 01       	movw	r22, r12
 608:	c5 01       	movw	r24, r10
 60a:	0e 94 76 01 	call	0x2ec	; 0x2ec <convertToData>
 60e:	8c 01       	movw	r16, r24

				if (received != NULL)
 610:	00 97       	sbiw	r24, 0x00	; 0
 612:	99 f0       	breq	.+38     	; 0x63a <main+0x14e>
				{
					if (received[0] != 0xFF) // If the first byte is not equal to 255 (0xFF)
 614:	fc 01       	movw	r30, r24
 616:	80 81       	ld	r24, Z
 618:	8f 3f       	cpi	r24, 0xFF	; 255
 61a:	21 f0       	breq	.+8      	; 0x624 <main+0x138>
					{
						printf("Error detected...\n");
 61c:	8c ee       	ldi	r24, 0xEC	; 236
 61e:	91 e0       	ldi	r25, 0x01	; 1
 620:	0e 94 da 03 	call	0x7b4	; 0x7b4 <puts>
					}
					printf("Received data: %s\n\n", received);
 624:	1f 93       	push	r17
 626:	0f 93       	push	r16
 628:	9f 92       	push	r9
 62a:	8f 92       	push	r8
 62c:	0e 94 bd 03 	call	0x77a	; 0x77a <printf>
 630:	0f 90       	pop	r0
 632:	0f 90       	pop	r0
 634:	0f 90       	pop	r0
 636:	0f 90       	pop	r0
 638:	04 c0       	rjmp	.+8      	; 0x642 <main+0x156>
				}
				else
					printf("Not for me\n");
 63a:	82 e1       	ldi	r24, 0x12	; 18
 63c:	92 e0       	ldi	r25, 0x02	; 2
 63e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <puts>
				// Reset some variables
				counter = 0;
				receiving = 0;
 642:	40 92 3e 05 	sts	0x053E, r4

				sei(); // Turn on interrupts again
 646:	78 94       	sei
					printf("Received data: %s\n\n", received);
				}
				else
					printf("Not for me\n");
				// Reset some variables
				counter = 0;
 648:	c1 2c       	mov	r12, r1
 64a:	d1 2c       	mov	r13, r1
		{
			_delay_us(DELAY_US / 4); // Wait a quarter of the baudrate to sample somewhere in the middle
			receivedData[counter] = PINB & (1 << INPUT_PIN);
			
			if (receivedData[counter] == 0) zeroStreak++; // Add one to the zeroStreak if the received bit is a 0
			else zeroStreak = 0; // Reset the zeroStreak if the received bit is a 1
 64c:	76 01       	movw	r14, r12
	
	uint8_t zeroStreak = 0;

    while (1) 
    {
		while (receiving == 1)
 64e:	80 91 3e 05 	lds	r24, 0x053E
 652:	81 30       	cpi	r24, 0x01	; 1
 654:	e1 f7       	brne	.-8      	; 0x64e <main+0x162>
 656:	8f cf       	rjmp	.-226    	; 0x576 <main+0x8a>
			_delay_us(DELAY_US / 4); // Wait a quarter of the baudrate to sample somewhere in the middle
			receivedData[counter] = PINB & (1 << INPUT_PIN);
			
			if (receivedData[counter] == 0) zeroStreak++; // Add one to the zeroStreak if the received bit is a 0
			else zeroStreak = 0; // Reset the zeroStreak if the received bit is a 1
			counter++; // Add one to the counter
 658:	67 01       	movw	r12, r14
 65a:	ff ef       	ldi	r31, 0xFF	; 255
 65c:	cf 1a       	sub	r12, r31
 65e:	df 0a       	sbc	r13, r31
 660:	8f e6       	ldi	r24, 0x6F	; 111
 662:	97 e1       	ldi	r25, 0x17	; 23
 664:	01 97       	sbiw	r24, 0x01	; 1
 666:	f1 f7       	brne	.-4      	; 0x664 <main+0x178>
 668:	00 c0       	rjmp	.+0      	; 0x66a <main+0x17e>
 66a:	00 00       	nop
		{
			_delay_us(DELAY_US / 4); // Wait a quarter of the baudrate to sample somewhere in the middle
			receivedData[counter] = PINB & (1 << INPUT_PIN);
			
			if (receivedData[counter] == 0) zeroStreak++; // Add one to the zeroStreak if the received bit is a 0
			else zeroStreak = 0; // Reset the zeroStreak if the received bit is a 1
 66c:	54 2c       	mov	r5, r4
 66e:	ee cf       	rjmp	.-36     	; 0x64c <main+0x160>
			{
				printf("\n\nStop Byte detected, stopped receiving.\n\n");

				for (int i = 0; i < counter; i++) // Loop through all the data
				{
					printf("%i", receivedData[i]);
 670:	f5 01       	movw	r30, r10
 672:	80 81       	ld	r24, Z
 674:	1f 92       	push	r1
 676:	8f 93       	push	r24
 678:	df 93       	push	r29
 67a:	cf 93       	push	r28
 67c:	0e 94 bd 03 	call	0x77a	; 0x77a <printf>
 680:	81 01       	movw	r16, r2
 682:	9f ef       	ldi	r25, 0xFF	; 255
 684:	e9 1a       	sub	r14, r25
 686:	f9 0a       	sbc	r15, r25
 688:	0f 90       	pop	r0
 68a:	0f 90       	pop	r0
 68c:	0f 90       	pop	r0
 68e:	0f 90       	pop	r0

					if ((i + 1) % 8 == 0) printf(" ");
 690:	66 24       	eor	r6, r6
 692:	63 94       	inc	r6
 694:	71 2c       	mov	r7, r1
 696:	b4 cf       	rjmp	.-152    	; 0x600 <main+0x114>

00000698 <__vector_3>:
		}
    }
}

ISR(PCINT0_vect)
{
 698:	1f 92       	push	r1
 69a:	0f 92       	push	r0
 69c:	0f b6       	in	r0, 0x3f	; 63
 69e:	0f 92       	push	r0
 6a0:	11 24       	eor	r1, r1
 6a2:	8f 93       	push	r24
	receiving = 1;
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	80 93 3e 05 	sts	0x053E, r24
	cli(); // Disable interrupts
 6aa:	f8 94       	cli
 6ac:	8f 91       	pop	r24
 6ae:	0f 90       	pop	r0
 6b0:	0f be       	out	0x3f, r0	; 63
 6b2:	0f 90       	pop	r0
 6b4:	1f 90       	pop	r1
 6b6:	18 95       	reti

000006b8 <USART0Init>:
#include "defines.h"

void USART0Init()
{
	// Set baud rate
	UBRR0H = (uint8_t)(UBRR_BAUDRATE >> 8);
 6b8:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)UBRR_BAUDRATE;
 6bc:	10 92 c4 00 	sts	0x00C4, r1

	// Enable transmission
	UCSR0B |= (1 << TXEN0);
 6c0:	e1 ec       	ldi	r30, 0xC1	; 193
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	80 81       	ld	r24, Z
 6c6:	88 60       	ori	r24, 0x08	; 8
 6c8:	80 83       	st	Z, r24

	// Set frame format to 8 data bits, no parity, 1 stop bit
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
 6ca:	e2 ec       	ldi	r30, 0xC2	; 194
 6cc:	f0 e0       	ldi	r31, 0x00	; 0
 6ce:	80 81       	ld	r24, Z
 6d0:	86 60       	ori	r24, 0x06	; 6
 6d2:	80 83       	st	Z, r24
 6d4:	08 95       	ret

000006d6 <USART0SendByte>:
}

int USART0SendByte(char u8Data, FILE *stream)
{
 6d6:	cf 93       	push	r28
 6d8:	c8 2f       	mov	r28, r24
	if (u8Data == '\n') USART0SendByte('\r', stream);
 6da:	8a 30       	cpi	r24, 0x0A	; 10
 6dc:	19 f4       	brne	.+6      	; 0x6e4 <USART0SendByte+0xe>
 6de:	8d e0       	ldi	r24, 0x0D	; 13
 6e0:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <USART0SendByte>

	// Wait while previous byte is completed
	while (!(UCSR0A & (1 << UDRE0)));
 6e4:	e0 ec       	ldi	r30, 0xC0	; 192
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	90 81       	ld	r25, Z
 6ea:	95 ff       	sbrs	r25, 5
 6ec:	fd cf       	rjmp	.-6      	; 0x6e8 <USART0SendByte+0x12>

	// Transmit data
	UDR0 = u8Data;
 6ee:	c0 93 c6 00 	sts	0x00C6, r28
	return 0;
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	cf 91       	pop	r28
 6f8:	08 95       	ret

000006fa <__ashldi3>:
 6fa:	0f 93       	push	r16
 6fc:	08 30       	cpi	r16, 0x08	; 8
 6fe:	90 f0       	brcs	.+36     	; 0x724 <__ashldi3+0x2a>
 700:	98 2f       	mov	r25, r24
 702:	87 2f       	mov	r24, r23
 704:	76 2f       	mov	r23, r22
 706:	65 2f       	mov	r22, r21
 708:	54 2f       	mov	r21, r20
 70a:	43 2f       	mov	r20, r19
 70c:	32 2f       	mov	r19, r18
 70e:	22 27       	eor	r18, r18
 710:	08 50       	subi	r16, 0x08	; 8
 712:	f4 cf       	rjmp	.-24     	; 0x6fc <__ashldi3+0x2>
 714:	22 0f       	add	r18, r18
 716:	33 1f       	adc	r19, r19
 718:	44 1f       	adc	r20, r20
 71a:	55 1f       	adc	r21, r21
 71c:	66 1f       	adc	r22, r22
 71e:	77 1f       	adc	r23, r23
 720:	88 1f       	adc	r24, r24
 722:	99 1f       	adc	r25, r25
 724:	0a 95       	dec	r16
 726:	b2 f7       	brpl	.-20     	; 0x714 <__ashldi3+0x1a>
 728:	0f 91       	pop	r16
 72a:	08 95       	ret

0000072c <__ashrdi3>:
 72c:	97 fb       	bst	r25, 7
 72e:	10 f8       	bld	r1, 0

00000730 <__lshrdi3>:
 730:	16 94       	lsr	r1
 732:	00 08       	sbc	r0, r0
 734:	0f 93       	push	r16
 736:	08 30       	cpi	r16, 0x08	; 8
 738:	98 f0       	brcs	.+38     	; 0x760 <__lshrdi3+0x30>
 73a:	08 50       	subi	r16, 0x08	; 8
 73c:	23 2f       	mov	r18, r19
 73e:	34 2f       	mov	r19, r20
 740:	45 2f       	mov	r20, r21
 742:	56 2f       	mov	r21, r22
 744:	67 2f       	mov	r22, r23
 746:	78 2f       	mov	r23, r24
 748:	89 2f       	mov	r24, r25
 74a:	90 2d       	mov	r25, r0
 74c:	f4 cf       	rjmp	.-24     	; 0x736 <__lshrdi3+0x6>
 74e:	05 94       	asr	r0
 750:	97 95       	ror	r25
 752:	87 95       	ror	r24
 754:	77 95       	ror	r23
 756:	67 95       	ror	r22
 758:	57 95       	ror	r21
 75a:	47 95       	ror	r20
 75c:	37 95       	ror	r19
 75e:	27 95       	ror	r18
 760:	0a 95       	dec	r16
 762:	aa f7       	brpl	.-22     	; 0x74e <__lshrdi3+0x1e>
 764:	0f 91       	pop	r16
 766:	08 95       	ret

00000768 <__cmpdi2>:
 768:	2a 15       	cp	r18, r10
 76a:	3b 05       	cpc	r19, r11
 76c:	4c 05       	cpc	r20, r12
 76e:	5d 05       	cpc	r21, r13
 770:	6e 05       	cpc	r22, r14
 772:	7f 05       	cpc	r23, r15
 774:	80 07       	cpc	r24, r16
 776:	91 07       	cpc	r25, r17
 778:	08 95       	ret

0000077a <printf>:
 77a:	a0 e0       	ldi	r26, 0x00	; 0
 77c:	b0 e0       	ldi	r27, 0x00	; 0
 77e:	e3 ec       	ldi	r30, 0xC3	; 195
 780:	f3 e0       	ldi	r31, 0x03	; 3
 782:	0c 94 98 06 	jmp	0xd30	; 0xd30 <__prologue_saves__+0x20>
 786:	ae 01       	movw	r20, r28
 788:	4b 5f       	subi	r20, 0xFB	; 251
 78a:	5f 4f       	sbci	r21, 0xFF	; 255
 78c:	fa 01       	movw	r30, r20
 78e:	61 91       	ld	r22, Z+
 790:	71 91       	ld	r23, Z+
 792:	af 01       	movw	r20, r30
 794:	80 91 41 05 	lds	r24, 0x0541
 798:	90 91 42 05 	lds	r25, 0x0542
 79c:	0e 94 0a 04 	call	0x814	; 0x814 <vfprintf>
 7a0:	e2 e0       	ldi	r30, 0x02	; 2
 7a2:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__epilogue_restores__+0x20>

000007a6 <putchar>:
 7a6:	60 91 41 05 	lds	r22, 0x0541
 7aa:	70 91 42 05 	lds	r23, 0x0542
 7ae:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <fputc>
 7b2:	08 95       	ret

000007b4 <puts>:
 7b4:	0f 93       	push	r16
 7b6:	1f 93       	push	r17
 7b8:	cf 93       	push	r28
 7ba:	df 93       	push	r29
 7bc:	e0 91 41 05 	lds	r30, 0x0541
 7c0:	f0 91 42 05 	lds	r31, 0x0542
 7c4:	23 81       	ldd	r18, Z+3	; 0x03
 7c6:	21 ff       	sbrs	r18, 1
 7c8:	1b c0       	rjmp	.+54     	; 0x800 <puts+0x4c>
 7ca:	8c 01       	movw	r16, r24
 7cc:	d0 e0       	ldi	r29, 0x00	; 0
 7ce:	c0 e0       	ldi	r28, 0x00	; 0
 7d0:	f8 01       	movw	r30, r16
 7d2:	81 91       	ld	r24, Z+
 7d4:	8f 01       	movw	r16, r30
 7d6:	60 91 41 05 	lds	r22, 0x0541
 7da:	70 91 42 05 	lds	r23, 0x0542
 7de:	db 01       	movw	r26, r22
 7e0:	18 96       	adiw	r26, 0x08	; 8
 7e2:	ed 91       	ld	r30, X+
 7e4:	fc 91       	ld	r31, X
 7e6:	19 97       	sbiw	r26, 0x09	; 9
 7e8:	88 23       	and	r24, r24
 7ea:	31 f0       	breq	.+12     	; 0x7f8 <puts+0x44>
 7ec:	09 95       	icall
 7ee:	89 2b       	or	r24, r25
 7f0:	79 f3       	breq	.-34     	; 0x7d0 <puts+0x1c>
 7f2:	df ef       	ldi	r29, 0xFF	; 255
 7f4:	cf ef       	ldi	r28, 0xFF	; 255
 7f6:	ec cf       	rjmp	.-40     	; 0x7d0 <puts+0x1c>
 7f8:	8a e0       	ldi	r24, 0x0A	; 10
 7fa:	09 95       	icall
 7fc:	89 2b       	or	r24, r25
 7fe:	19 f0       	breq	.+6      	; 0x806 <puts+0x52>
 800:	8f ef       	ldi	r24, 0xFF	; 255
 802:	9f ef       	ldi	r25, 0xFF	; 255
 804:	02 c0       	rjmp	.+4      	; 0x80a <puts+0x56>
 806:	8d 2f       	mov	r24, r29
 808:	9c 2f       	mov	r25, r28
 80a:	df 91       	pop	r29
 80c:	cf 91       	pop	r28
 80e:	1f 91       	pop	r17
 810:	0f 91       	pop	r16
 812:	08 95       	ret

00000814 <vfprintf>:
 814:	ac e0       	ldi	r26, 0x0C	; 12
 816:	b0 e0       	ldi	r27, 0x00	; 0
 818:	e0 e1       	ldi	r30, 0x10	; 16
 81a:	f4 e0       	ldi	r31, 0x04	; 4
 81c:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__prologue_saves__>
 820:	7c 01       	movw	r14, r24
 822:	6b 01       	movw	r12, r22
 824:	8a 01       	movw	r16, r20
 826:	fc 01       	movw	r30, r24
 828:	17 82       	std	Z+7, r1	; 0x07
 82a:	16 82       	std	Z+6, r1	; 0x06
 82c:	83 81       	ldd	r24, Z+3	; 0x03
 82e:	81 ff       	sbrs	r24, 1
 830:	bd c1       	rjmp	.+890    	; 0xbac <__stack+0x2ad>
 832:	ce 01       	movw	r24, r28
 834:	01 96       	adiw	r24, 0x01	; 1
 836:	4c 01       	movw	r8, r24
 838:	f7 01       	movw	r30, r14
 83a:	93 81       	ldd	r25, Z+3	; 0x03
 83c:	f6 01       	movw	r30, r12
 83e:	93 fd       	sbrc	r25, 3
 840:	85 91       	lpm	r24, Z+
 842:	93 ff       	sbrs	r25, 3
 844:	81 91       	ld	r24, Z+
 846:	6f 01       	movw	r12, r30
 848:	88 23       	and	r24, r24
 84a:	09 f4       	brne	.+2      	; 0x84e <vfprintf+0x3a>
 84c:	ab c1       	rjmp	.+854    	; 0xba4 <__stack+0x2a5>
 84e:	85 32       	cpi	r24, 0x25	; 37
 850:	39 f4       	brne	.+14     	; 0x860 <vfprintf+0x4c>
 852:	93 fd       	sbrc	r25, 3
 854:	85 91       	lpm	r24, Z+
 856:	93 ff       	sbrs	r25, 3
 858:	81 91       	ld	r24, Z+
 85a:	6f 01       	movw	r12, r30
 85c:	85 32       	cpi	r24, 0x25	; 37
 85e:	29 f4       	brne	.+10     	; 0x86a <vfprintf+0x56>
 860:	b7 01       	movw	r22, r14
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <fputc>
 868:	e7 cf       	rjmp	.-50     	; 0x838 <vfprintf+0x24>
 86a:	51 2c       	mov	r5, r1
 86c:	31 2c       	mov	r3, r1
 86e:	20 e0       	ldi	r18, 0x00	; 0
 870:	20 32       	cpi	r18, 0x20	; 32
 872:	a0 f4       	brcc	.+40     	; 0x89c <vfprintf+0x88>
 874:	8b 32       	cpi	r24, 0x2B	; 43
 876:	69 f0       	breq	.+26     	; 0x892 <vfprintf+0x7e>
 878:	30 f4       	brcc	.+12     	; 0x886 <vfprintf+0x72>
 87a:	80 32       	cpi	r24, 0x20	; 32
 87c:	59 f0       	breq	.+22     	; 0x894 <vfprintf+0x80>
 87e:	83 32       	cpi	r24, 0x23	; 35
 880:	69 f4       	brne	.+26     	; 0x89c <vfprintf+0x88>
 882:	20 61       	ori	r18, 0x10	; 16
 884:	2c c0       	rjmp	.+88     	; 0x8de <vfprintf+0xca>
 886:	8d 32       	cpi	r24, 0x2D	; 45
 888:	39 f0       	breq	.+14     	; 0x898 <vfprintf+0x84>
 88a:	80 33       	cpi	r24, 0x30	; 48
 88c:	39 f4       	brne	.+14     	; 0x89c <vfprintf+0x88>
 88e:	21 60       	ori	r18, 0x01	; 1
 890:	26 c0       	rjmp	.+76     	; 0x8de <vfprintf+0xca>
 892:	22 60       	ori	r18, 0x02	; 2
 894:	24 60       	ori	r18, 0x04	; 4
 896:	23 c0       	rjmp	.+70     	; 0x8de <vfprintf+0xca>
 898:	28 60       	ori	r18, 0x08	; 8
 89a:	21 c0       	rjmp	.+66     	; 0x8de <vfprintf+0xca>
 89c:	27 fd       	sbrc	r18, 7
 89e:	27 c0       	rjmp	.+78     	; 0x8ee <vfprintf+0xda>
 8a0:	30 ed       	ldi	r19, 0xD0	; 208
 8a2:	38 0f       	add	r19, r24
 8a4:	3a 30       	cpi	r19, 0x0A	; 10
 8a6:	78 f4       	brcc	.+30     	; 0x8c6 <vfprintf+0xb2>
 8a8:	26 ff       	sbrs	r18, 6
 8aa:	06 c0       	rjmp	.+12     	; 0x8b8 <vfprintf+0xa4>
 8ac:	fa e0       	ldi	r31, 0x0A	; 10
 8ae:	5f 9e       	mul	r5, r31
 8b0:	30 0d       	add	r19, r0
 8b2:	11 24       	eor	r1, r1
 8b4:	53 2e       	mov	r5, r19
 8b6:	13 c0       	rjmp	.+38     	; 0x8de <vfprintf+0xca>
 8b8:	8a e0       	ldi	r24, 0x0A	; 10
 8ba:	38 9e       	mul	r3, r24
 8bc:	30 0d       	add	r19, r0
 8be:	11 24       	eor	r1, r1
 8c0:	33 2e       	mov	r3, r19
 8c2:	20 62       	ori	r18, 0x20	; 32
 8c4:	0c c0       	rjmp	.+24     	; 0x8de <vfprintf+0xca>
 8c6:	8e 32       	cpi	r24, 0x2E	; 46
 8c8:	21 f4       	brne	.+8      	; 0x8d2 <vfprintf+0xbe>
 8ca:	26 fd       	sbrc	r18, 6
 8cc:	6b c1       	rjmp	.+726    	; 0xba4 <__stack+0x2a5>
 8ce:	20 64       	ori	r18, 0x40	; 64
 8d0:	06 c0       	rjmp	.+12     	; 0x8de <vfprintf+0xca>
 8d2:	8c 36       	cpi	r24, 0x6C	; 108
 8d4:	11 f4       	brne	.+4      	; 0x8da <vfprintf+0xc6>
 8d6:	20 68       	ori	r18, 0x80	; 128
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <vfprintf+0xca>
 8da:	88 36       	cpi	r24, 0x68	; 104
 8dc:	41 f4       	brne	.+16     	; 0x8ee <vfprintf+0xda>
 8de:	f6 01       	movw	r30, r12
 8e0:	93 fd       	sbrc	r25, 3
 8e2:	85 91       	lpm	r24, Z+
 8e4:	93 ff       	sbrs	r25, 3
 8e6:	81 91       	ld	r24, Z+
 8e8:	6f 01       	movw	r12, r30
 8ea:	81 11       	cpse	r24, r1
 8ec:	c1 cf       	rjmp	.-126    	; 0x870 <vfprintf+0x5c>
 8ee:	98 2f       	mov	r25, r24
 8f0:	9f 7d       	andi	r25, 0xDF	; 223
 8f2:	95 54       	subi	r25, 0x45	; 69
 8f4:	93 30       	cpi	r25, 0x03	; 3
 8f6:	28 f4       	brcc	.+10     	; 0x902 <__stack+0x3>
 8f8:	0c 5f       	subi	r16, 0xFC	; 252
 8fa:	1f 4f       	sbci	r17, 0xFF	; 255
 8fc:	ff e3       	ldi	r31, 0x3F	; 63
 8fe:	f9 83       	std	Y+1, r31	; 0x01
 900:	0d c0       	rjmp	.+26     	; 0x91c <__stack+0x1d>
 902:	83 36       	cpi	r24, 0x63	; 99
 904:	31 f0       	breq	.+12     	; 0x912 <__stack+0x13>
 906:	83 37       	cpi	r24, 0x73	; 115
 908:	71 f0       	breq	.+28     	; 0x926 <__stack+0x27>
 90a:	83 35       	cpi	r24, 0x53	; 83
 90c:	09 f0       	breq	.+2      	; 0x910 <__stack+0x11>
 90e:	5b c0       	rjmp	.+182    	; 0x9c6 <__stack+0xc7>
 910:	22 c0       	rjmp	.+68     	; 0x956 <__stack+0x57>
 912:	f8 01       	movw	r30, r16
 914:	80 81       	ld	r24, Z
 916:	89 83       	std	Y+1, r24	; 0x01
 918:	0e 5f       	subi	r16, 0xFE	; 254
 91a:	1f 4f       	sbci	r17, 0xFF	; 255
 91c:	44 24       	eor	r4, r4
 91e:	43 94       	inc	r4
 920:	51 2c       	mov	r5, r1
 922:	54 01       	movw	r10, r8
 924:	15 c0       	rjmp	.+42     	; 0x950 <__stack+0x51>
 926:	38 01       	movw	r6, r16
 928:	f2 e0       	ldi	r31, 0x02	; 2
 92a:	6f 0e       	add	r6, r31
 92c:	71 1c       	adc	r7, r1
 92e:	f8 01       	movw	r30, r16
 930:	a0 80       	ld	r10, Z
 932:	b1 80       	ldd	r11, Z+1	; 0x01
 934:	26 ff       	sbrs	r18, 6
 936:	03 c0       	rjmp	.+6      	; 0x93e <__stack+0x3f>
 938:	65 2d       	mov	r22, r5
 93a:	70 e0       	ldi	r23, 0x00	; 0
 93c:	02 c0       	rjmp	.+4      	; 0x942 <__stack+0x43>
 93e:	6f ef       	ldi	r22, 0xFF	; 255
 940:	7f ef       	ldi	r23, 0xFF	; 255
 942:	c5 01       	movw	r24, r10
 944:	2c 87       	std	Y+12, r18	; 0x0c
 946:	0e 94 e7 05 	call	0xbce	; 0xbce <strnlen>
 94a:	2c 01       	movw	r4, r24
 94c:	83 01       	movw	r16, r6
 94e:	2c 85       	ldd	r18, Y+12	; 0x0c
 950:	2f 77       	andi	r18, 0x7F	; 127
 952:	22 2e       	mov	r2, r18
 954:	17 c0       	rjmp	.+46     	; 0x984 <__stack+0x85>
 956:	38 01       	movw	r6, r16
 958:	f2 e0       	ldi	r31, 0x02	; 2
 95a:	6f 0e       	add	r6, r31
 95c:	71 1c       	adc	r7, r1
 95e:	f8 01       	movw	r30, r16
 960:	a0 80       	ld	r10, Z
 962:	b1 80       	ldd	r11, Z+1	; 0x01
 964:	26 ff       	sbrs	r18, 6
 966:	03 c0       	rjmp	.+6      	; 0x96e <__stack+0x6f>
 968:	65 2d       	mov	r22, r5
 96a:	70 e0       	ldi	r23, 0x00	; 0
 96c:	02 c0       	rjmp	.+4      	; 0x972 <__stack+0x73>
 96e:	6f ef       	ldi	r22, 0xFF	; 255
 970:	7f ef       	ldi	r23, 0xFF	; 255
 972:	c5 01       	movw	r24, r10
 974:	2c 87       	std	Y+12, r18	; 0x0c
 976:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <strnlen_P>
 97a:	2c 01       	movw	r4, r24
 97c:	2c 85       	ldd	r18, Y+12	; 0x0c
 97e:	20 68       	ori	r18, 0x80	; 128
 980:	22 2e       	mov	r2, r18
 982:	83 01       	movw	r16, r6
 984:	23 fc       	sbrc	r2, 3
 986:	1b c0       	rjmp	.+54     	; 0x9be <__stack+0xbf>
 988:	83 2d       	mov	r24, r3
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	48 16       	cp	r4, r24
 98e:	59 06       	cpc	r5, r25
 990:	b0 f4       	brcc	.+44     	; 0x9be <__stack+0xbf>
 992:	b7 01       	movw	r22, r14
 994:	80 e2       	ldi	r24, 0x20	; 32
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <fputc>
 99c:	3a 94       	dec	r3
 99e:	f4 cf       	rjmp	.-24     	; 0x988 <__stack+0x89>
 9a0:	f5 01       	movw	r30, r10
 9a2:	27 fc       	sbrc	r2, 7
 9a4:	85 91       	lpm	r24, Z+
 9a6:	27 fe       	sbrs	r2, 7
 9a8:	81 91       	ld	r24, Z+
 9aa:	5f 01       	movw	r10, r30
 9ac:	b7 01       	movw	r22, r14
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <fputc>
 9b4:	31 10       	cpse	r3, r1
 9b6:	3a 94       	dec	r3
 9b8:	f1 e0       	ldi	r31, 0x01	; 1
 9ba:	4f 1a       	sub	r4, r31
 9bc:	51 08       	sbc	r5, r1
 9be:	41 14       	cp	r4, r1
 9c0:	51 04       	cpc	r5, r1
 9c2:	71 f7       	brne	.-36     	; 0x9a0 <__stack+0xa1>
 9c4:	e5 c0       	rjmp	.+458    	; 0xb90 <__stack+0x291>
 9c6:	84 36       	cpi	r24, 0x64	; 100
 9c8:	11 f0       	breq	.+4      	; 0x9ce <__stack+0xcf>
 9ca:	89 36       	cpi	r24, 0x69	; 105
 9cc:	39 f5       	brne	.+78     	; 0xa1c <__stack+0x11d>
 9ce:	f8 01       	movw	r30, r16
 9d0:	27 ff       	sbrs	r18, 7
 9d2:	07 c0       	rjmp	.+14     	; 0x9e2 <__stack+0xe3>
 9d4:	60 81       	ld	r22, Z
 9d6:	71 81       	ldd	r23, Z+1	; 0x01
 9d8:	82 81       	ldd	r24, Z+2	; 0x02
 9da:	93 81       	ldd	r25, Z+3	; 0x03
 9dc:	0c 5f       	subi	r16, 0xFC	; 252
 9de:	1f 4f       	sbci	r17, 0xFF	; 255
 9e0:	08 c0       	rjmp	.+16     	; 0x9f2 <__stack+0xf3>
 9e2:	60 81       	ld	r22, Z
 9e4:	71 81       	ldd	r23, Z+1	; 0x01
 9e6:	07 2e       	mov	r0, r23
 9e8:	00 0c       	add	r0, r0
 9ea:	88 0b       	sbc	r24, r24
 9ec:	99 0b       	sbc	r25, r25
 9ee:	0e 5f       	subi	r16, 0xFE	; 254
 9f0:	1f 4f       	sbci	r17, 0xFF	; 255
 9f2:	2f 76       	andi	r18, 0x6F	; 111
 9f4:	72 2e       	mov	r7, r18
 9f6:	97 ff       	sbrs	r25, 7
 9f8:	09 c0       	rjmp	.+18     	; 0xa0c <__stack+0x10d>
 9fa:	90 95       	com	r25
 9fc:	80 95       	com	r24
 9fe:	70 95       	com	r23
 a00:	61 95       	neg	r22
 a02:	7f 4f       	sbci	r23, 0xFF	; 255
 a04:	8f 4f       	sbci	r24, 0xFF	; 255
 a06:	9f 4f       	sbci	r25, 0xFF	; 255
 a08:	20 68       	ori	r18, 0x80	; 128
 a0a:	72 2e       	mov	r7, r18
 a0c:	2a e0       	ldi	r18, 0x0A	; 10
 a0e:	30 e0       	ldi	r19, 0x00	; 0
 a10:	a4 01       	movw	r20, r8
 a12:	0e 94 2a 06 	call	0xc54	; 0xc54 <__ultoa_invert>
 a16:	a8 2e       	mov	r10, r24
 a18:	a8 18       	sub	r10, r8
 a1a:	44 c0       	rjmp	.+136    	; 0xaa4 <__stack+0x1a5>
 a1c:	85 37       	cpi	r24, 0x75	; 117
 a1e:	29 f4       	brne	.+10     	; 0xa2a <__stack+0x12b>
 a20:	2f 7e       	andi	r18, 0xEF	; 239
 a22:	b2 2e       	mov	r11, r18
 a24:	2a e0       	ldi	r18, 0x0A	; 10
 a26:	30 e0       	ldi	r19, 0x00	; 0
 a28:	25 c0       	rjmp	.+74     	; 0xa74 <__stack+0x175>
 a2a:	f2 2f       	mov	r31, r18
 a2c:	f9 7f       	andi	r31, 0xF9	; 249
 a2e:	bf 2e       	mov	r11, r31
 a30:	8f 36       	cpi	r24, 0x6F	; 111
 a32:	c1 f0       	breq	.+48     	; 0xa64 <__stack+0x165>
 a34:	18 f4       	brcc	.+6      	; 0xa3c <__stack+0x13d>
 a36:	88 35       	cpi	r24, 0x58	; 88
 a38:	79 f0       	breq	.+30     	; 0xa58 <__stack+0x159>
 a3a:	b4 c0       	rjmp	.+360    	; 0xba4 <__stack+0x2a5>
 a3c:	80 37       	cpi	r24, 0x70	; 112
 a3e:	19 f0       	breq	.+6      	; 0xa46 <__stack+0x147>
 a40:	88 37       	cpi	r24, 0x78	; 120
 a42:	21 f0       	breq	.+8      	; 0xa4c <__stack+0x14d>
 a44:	af c0       	rjmp	.+350    	; 0xba4 <__stack+0x2a5>
 a46:	2f 2f       	mov	r18, r31
 a48:	20 61       	ori	r18, 0x10	; 16
 a4a:	b2 2e       	mov	r11, r18
 a4c:	b4 fe       	sbrs	r11, 4
 a4e:	0d c0       	rjmp	.+26     	; 0xa6a <__stack+0x16b>
 a50:	8b 2d       	mov	r24, r11
 a52:	84 60       	ori	r24, 0x04	; 4
 a54:	b8 2e       	mov	r11, r24
 a56:	09 c0       	rjmp	.+18     	; 0xa6a <__stack+0x16b>
 a58:	24 ff       	sbrs	r18, 4
 a5a:	0a c0       	rjmp	.+20     	; 0xa70 <__stack+0x171>
 a5c:	9f 2f       	mov	r25, r31
 a5e:	96 60       	ori	r25, 0x06	; 6
 a60:	b9 2e       	mov	r11, r25
 a62:	06 c0       	rjmp	.+12     	; 0xa70 <__stack+0x171>
 a64:	28 e0       	ldi	r18, 0x08	; 8
 a66:	30 e0       	ldi	r19, 0x00	; 0
 a68:	05 c0       	rjmp	.+10     	; 0xa74 <__stack+0x175>
 a6a:	20 e1       	ldi	r18, 0x10	; 16
 a6c:	30 e0       	ldi	r19, 0x00	; 0
 a6e:	02 c0       	rjmp	.+4      	; 0xa74 <__stack+0x175>
 a70:	20 e1       	ldi	r18, 0x10	; 16
 a72:	32 e0       	ldi	r19, 0x02	; 2
 a74:	f8 01       	movw	r30, r16
 a76:	b7 fe       	sbrs	r11, 7
 a78:	07 c0       	rjmp	.+14     	; 0xa88 <__stack+0x189>
 a7a:	60 81       	ld	r22, Z
 a7c:	71 81       	ldd	r23, Z+1	; 0x01
 a7e:	82 81       	ldd	r24, Z+2	; 0x02
 a80:	93 81       	ldd	r25, Z+3	; 0x03
 a82:	0c 5f       	subi	r16, 0xFC	; 252
 a84:	1f 4f       	sbci	r17, 0xFF	; 255
 a86:	06 c0       	rjmp	.+12     	; 0xa94 <__stack+0x195>
 a88:	60 81       	ld	r22, Z
 a8a:	71 81       	ldd	r23, Z+1	; 0x01
 a8c:	80 e0       	ldi	r24, 0x00	; 0
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	0e 5f       	subi	r16, 0xFE	; 254
 a92:	1f 4f       	sbci	r17, 0xFF	; 255
 a94:	a4 01       	movw	r20, r8
 a96:	0e 94 2a 06 	call	0xc54	; 0xc54 <__ultoa_invert>
 a9a:	a8 2e       	mov	r10, r24
 a9c:	a8 18       	sub	r10, r8
 a9e:	fb 2d       	mov	r31, r11
 aa0:	ff 77       	andi	r31, 0x7F	; 127
 aa2:	7f 2e       	mov	r7, r31
 aa4:	76 fe       	sbrs	r7, 6
 aa6:	0b c0       	rjmp	.+22     	; 0xabe <__stack+0x1bf>
 aa8:	37 2d       	mov	r19, r7
 aaa:	3e 7f       	andi	r19, 0xFE	; 254
 aac:	a5 14       	cp	r10, r5
 aae:	50 f4       	brcc	.+20     	; 0xac4 <__stack+0x1c5>
 ab0:	74 fe       	sbrs	r7, 4
 ab2:	0a c0       	rjmp	.+20     	; 0xac8 <__stack+0x1c9>
 ab4:	72 fc       	sbrc	r7, 2
 ab6:	08 c0       	rjmp	.+16     	; 0xac8 <__stack+0x1c9>
 ab8:	37 2d       	mov	r19, r7
 aba:	3e 7e       	andi	r19, 0xEE	; 238
 abc:	05 c0       	rjmp	.+10     	; 0xac8 <__stack+0x1c9>
 abe:	ba 2c       	mov	r11, r10
 ac0:	37 2d       	mov	r19, r7
 ac2:	03 c0       	rjmp	.+6      	; 0xaca <__stack+0x1cb>
 ac4:	ba 2c       	mov	r11, r10
 ac6:	01 c0       	rjmp	.+2      	; 0xaca <__stack+0x1cb>
 ac8:	b5 2c       	mov	r11, r5
 aca:	34 ff       	sbrs	r19, 4
 acc:	0d c0       	rjmp	.+26     	; 0xae8 <__stack+0x1e9>
 ace:	fe 01       	movw	r30, r28
 ad0:	ea 0d       	add	r30, r10
 ad2:	f1 1d       	adc	r31, r1
 ad4:	80 81       	ld	r24, Z
 ad6:	80 33       	cpi	r24, 0x30	; 48
 ad8:	11 f4       	brne	.+4      	; 0xade <__stack+0x1df>
 ada:	39 7e       	andi	r19, 0xE9	; 233
 adc:	09 c0       	rjmp	.+18     	; 0xaf0 <__stack+0x1f1>
 ade:	32 ff       	sbrs	r19, 2
 ae0:	06 c0       	rjmp	.+12     	; 0xaee <__stack+0x1ef>
 ae2:	b3 94       	inc	r11
 ae4:	b3 94       	inc	r11
 ae6:	04 c0       	rjmp	.+8      	; 0xaf0 <__stack+0x1f1>
 ae8:	83 2f       	mov	r24, r19
 aea:	86 78       	andi	r24, 0x86	; 134
 aec:	09 f0       	breq	.+2      	; 0xaf0 <__stack+0x1f1>
 aee:	b3 94       	inc	r11
 af0:	33 fd       	sbrc	r19, 3
 af2:	13 c0       	rjmp	.+38     	; 0xb1a <__stack+0x21b>
 af4:	30 ff       	sbrs	r19, 0
 af6:	06 c0       	rjmp	.+12     	; 0xb04 <__stack+0x205>
 af8:	5a 2c       	mov	r5, r10
 afa:	b3 14       	cp	r11, r3
 afc:	18 f4       	brcc	.+6      	; 0xb04 <__stack+0x205>
 afe:	53 0c       	add	r5, r3
 b00:	5b 18       	sub	r5, r11
 b02:	b3 2c       	mov	r11, r3
 b04:	b3 14       	cp	r11, r3
 b06:	68 f4       	brcc	.+26     	; 0xb22 <__stack+0x223>
 b08:	b7 01       	movw	r22, r14
 b0a:	80 e2       	ldi	r24, 0x20	; 32
 b0c:	90 e0       	ldi	r25, 0x00	; 0
 b0e:	3c 87       	std	Y+12, r19	; 0x0c
 b10:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <fputc>
 b14:	b3 94       	inc	r11
 b16:	3c 85       	ldd	r19, Y+12	; 0x0c
 b18:	f5 cf       	rjmp	.-22     	; 0xb04 <__stack+0x205>
 b1a:	b3 14       	cp	r11, r3
 b1c:	10 f4       	brcc	.+4      	; 0xb22 <__stack+0x223>
 b1e:	3b 18       	sub	r3, r11
 b20:	01 c0       	rjmp	.+2      	; 0xb24 <__stack+0x225>
 b22:	31 2c       	mov	r3, r1
 b24:	34 ff       	sbrs	r19, 4
 b26:	12 c0       	rjmp	.+36     	; 0xb4c <__stack+0x24d>
 b28:	b7 01       	movw	r22, r14
 b2a:	80 e3       	ldi	r24, 0x30	; 48
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	3c 87       	std	Y+12, r19	; 0x0c
 b30:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <fputc>
 b34:	3c 85       	ldd	r19, Y+12	; 0x0c
 b36:	32 ff       	sbrs	r19, 2
 b38:	17 c0       	rjmp	.+46     	; 0xb68 <__stack+0x269>
 b3a:	31 fd       	sbrc	r19, 1
 b3c:	03 c0       	rjmp	.+6      	; 0xb44 <__stack+0x245>
 b3e:	88 e7       	ldi	r24, 0x78	; 120
 b40:	90 e0       	ldi	r25, 0x00	; 0
 b42:	02 c0       	rjmp	.+4      	; 0xb48 <__stack+0x249>
 b44:	88 e5       	ldi	r24, 0x58	; 88
 b46:	90 e0       	ldi	r25, 0x00	; 0
 b48:	b7 01       	movw	r22, r14
 b4a:	0c c0       	rjmp	.+24     	; 0xb64 <__stack+0x265>
 b4c:	83 2f       	mov	r24, r19
 b4e:	86 78       	andi	r24, 0x86	; 134
 b50:	59 f0       	breq	.+22     	; 0xb68 <__stack+0x269>
 b52:	31 ff       	sbrs	r19, 1
 b54:	02 c0       	rjmp	.+4      	; 0xb5a <__stack+0x25b>
 b56:	8b e2       	ldi	r24, 0x2B	; 43
 b58:	01 c0       	rjmp	.+2      	; 0xb5c <__stack+0x25d>
 b5a:	80 e2       	ldi	r24, 0x20	; 32
 b5c:	37 fd       	sbrc	r19, 7
 b5e:	8d e2       	ldi	r24, 0x2D	; 45
 b60:	b7 01       	movw	r22, r14
 b62:	90 e0       	ldi	r25, 0x00	; 0
 b64:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <fputc>
 b68:	a5 14       	cp	r10, r5
 b6a:	38 f4       	brcc	.+14     	; 0xb7a <__stack+0x27b>
 b6c:	b7 01       	movw	r22, r14
 b6e:	80 e3       	ldi	r24, 0x30	; 48
 b70:	90 e0       	ldi	r25, 0x00	; 0
 b72:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <fputc>
 b76:	5a 94       	dec	r5
 b78:	f7 cf       	rjmp	.-18     	; 0xb68 <__stack+0x269>
 b7a:	aa 94       	dec	r10
 b7c:	f4 01       	movw	r30, r8
 b7e:	ea 0d       	add	r30, r10
 b80:	f1 1d       	adc	r31, r1
 b82:	80 81       	ld	r24, Z
 b84:	b7 01       	movw	r22, r14
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <fputc>
 b8c:	a1 10       	cpse	r10, r1
 b8e:	f5 cf       	rjmp	.-22     	; 0xb7a <__stack+0x27b>
 b90:	33 20       	and	r3, r3
 b92:	09 f4       	brne	.+2      	; 0xb96 <__stack+0x297>
 b94:	51 ce       	rjmp	.-862    	; 0x838 <vfprintf+0x24>
 b96:	b7 01       	movw	r22, r14
 b98:	80 e2       	ldi	r24, 0x20	; 32
 b9a:	90 e0       	ldi	r25, 0x00	; 0
 b9c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <fputc>
 ba0:	3a 94       	dec	r3
 ba2:	f6 cf       	rjmp	.-20     	; 0xb90 <__stack+0x291>
 ba4:	f7 01       	movw	r30, r14
 ba6:	86 81       	ldd	r24, Z+6	; 0x06
 ba8:	97 81       	ldd	r25, Z+7	; 0x07
 baa:	02 c0       	rjmp	.+4      	; 0xbb0 <__stack+0x2b1>
 bac:	8f ef       	ldi	r24, 0xFF	; 255
 bae:	9f ef       	ldi	r25, 0xFF	; 255
 bb0:	2c 96       	adiw	r28, 0x0c	; 12
 bb2:	e2 e1       	ldi	r30, 0x12	; 18
 bb4:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <__epilogue_restores__>

00000bb8 <strnlen_P>:
 bb8:	fc 01       	movw	r30, r24
 bba:	05 90       	lpm	r0, Z+
 bbc:	61 50       	subi	r22, 0x01	; 1
 bbe:	70 40       	sbci	r23, 0x00	; 0
 bc0:	01 10       	cpse	r0, r1
 bc2:	d8 f7       	brcc	.-10     	; 0xbba <strnlen_P+0x2>
 bc4:	80 95       	com	r24
 bc6:	90 95       	com	r25
 bc8:	8e 0f       	add	r24, r30
 bca:	9f 1f       	adc	r25, r31
 bcc:	08 95       	ret

00000bce <strnlen>:
 bce:	fc 01       	movw	r30, r24
 bd0:	61 50       	subi	r22, 0x01	; 1
 bd2:	70 40       	sbci	r23, 0x00	; 0
 bd4:	01 90       	ld	r0, Z+
 bd6:	01 10       	cpse	r0, r1
 bd8:	d8 f7       	brcc	.-10     	; 0xbd0 <strnlen+0x2>
 bda:	80 95       	com	r24
 bdc:	90 95       	com	r25
 bde:	8e 0f       	add	r24, r30
 be0:	9f 1f       	adc	r25, r31
 be2:	08 95       	ret

00000be4 <fputc>:
 be4:	0f 93       	push	r16
 be6:	1f 93       	push	r17
 be8:	cf 93       	push	r28
 bea:	df 93       	push	r29
 bec:	fb 01       	movw	r30, r22
 bee:	23 81       	ldd	r18, Z+3	; 0x03
 bf0:	21 fd       	sbrc	r18, 1
 bf2:	03 c0       	rjmp	.+6      	; 0xbfa <fputc+0x16>
 bf4:	8f ef       	ldi	r24, 0xFF	; 255
 bf6:	9f ef       	ldi	r25, 0xFF	; 255
 bf8:	28 c0       	rjmp	.+80     	; 0xc4a <fputc+0x66>
 bfa:	22 ff       	sbrs	r18, 2
 bfc:	16 c0       	rjmp	.+44     	; 0xc2a <fputc+0x46>
 bfe:	46 81       	ldd	r20, Z+6	; 0x06
 c00:	57 81       	ldd	r21, Z+7	; 0x07
 c02:	24 81       	ldd	r18, Z+4	; 0x04
 c04:	35 81       	ldd	r19, Z+5	; 0x05
 c06:	42 17       	cp	r20, r18
 c08:	53 07       	cpc	r21, r19
 c0a:	44 f4       	brge	.+16     	; 0xc1c <fputc+0x38>
 c0c:	a0 81       	ld	r26, Z
 c0e:	b1 81       	ldd	r27, Z+1	; 0x01
 c10:	9d 01       	movw	r18, r26
 c12:	2f 5f       	subi	r18, 0xFF	; 255
 c14:	3f 4f       	sbci	r19, 0xFF	; 255
 c16:	31 83       	std	Z+1, r19	; 0x01
 c18:	20 83       	st	Z, r18
 c1a:	8c 93       	st	X, r24
 c1c:	26 81       	ldd	r18, Z+6	; 0x06
 c1e:	37 81       	ldd	r19, Z+7	; 0x07
 c20:	2f 5f       	subi	r18, 0xFF	; 255
 c22:	3f 4f       	sbci	r19, 0xFF	; 255
 c24:	37 83       	std	Z+7, r19	; 0x07
 c26:	26 83       	std	Z+6, r18	; 0x06
 c28:	10 c0       	rjmp	.+32     	; 0xc4a <fputc+0x66>
 c2a:	eb 01       	movw	r28, r22
 c2c:	09 2f       	mov	r16, r25
 c2e:	18 2f       	mov	r17, r24
 c30:	00 84       	ldd	r0, Z+8	; 0x08
 c32:	f1 85       	ldd	r31, Z+9	; 0x09
 c34:	e0 2d       	mov	r30, r0
 c36:	09 95       	icall
 c38:	89 2b       	or	r24, r25
 c3a:	e1 f6       	brne	.-72     	; 0xbf4 <fputc+0x10>
 c3c:	8e 81       	ldd	r24, Y+6	; 0x06
 c3e:	9f 81       	ldd	r25, Y+7	; 0x07
 c40:	01 96       	adiw	r24, 0x01	; 1
 c42:	9f 83       	std	Y+7, r25	; 0x07
 c44:	8e 83       	std	Y+6, r24	; 0x06
 c46:	81 2f       	mov	r24, r17
 c48:	90 2f       	mov	r25, r16
 c4a:	df 91       	pop	r29
 c4c:	cf 91       	pop	r28
 c4e:	1f 91       	pop	r17
 c50:	0f 91       	pop	r16
 c52:	08 95       	ret

00000c54 <__ultoa_invert>:
 c54:	fa 01       	movw	r30, r20
 c56:	aa 27       	eor	r26, r26
 c58:	28 30       	cpi	r18, 0x08	; 8
 c5a:	51 f1       	breq	.+84     	; 0xcb0 <__ultoa_invert+0x5c>
 c5c:	20 31       	cpi	r18, 0x10	; 16
 c5e:	81 f1       	breq	.+96     	; 0xcc0 <__ultoa_invert+0x6c>
 c60:	e8 94       	clt
 c62:	6f 93       	push	r22
 c64:	6e 7f       	andi	r22, 0xFE	; 254
 c66:	6e 5f       	subi	r22, 0xFE	; 254
 c68:	7f 4f       	sbci	r23, 0xFF	; 255
 c6a:	8f 4f       	sbci	r24, 0xFF	; 255
 c6c:	9f 4f       	sbci	r25, 0xFF	; 255
 c6e:	af 4f       	sbci	r26, 0xFF	; 255
 c70:	b1 e0       	ldi	r27, 0x01	; 1
 c72:	3e d0       	rcall	.+124    	; 0xcf0 <__ultoa_invert+0x9c>
 c74:	b4 e0       	ldi	r27, 0x04	; 4
 c76:	3c d0       	rcall	.+120    	; 0xcf0 <__ultoa_invert+0x9c>
 c78:	67 0f       	add	r22, r23
 c7a:	78 1f       	adc	r23, r24
 c7c:	89 1f       	adc	r24, r25
 c7e:	9a 1f       	adc	r25, r26
 c80:	a1 1d       	adc	r26, r1
 c82:	68 0f       	add	r22, r24
 c84:	79 1f       	adc	r23, r25
 c86:	8a 1f       	adc	r24, r26
 c88:	91 1d       	adc	r25, r1
 c8a:	a1 1d       	adc	r26, r1
 c8c:	6a 0f       	add	r22, r26
 c8e:	71 1d       	adc	r23, r1
 c90:	81 1d       	adc	r24, r1
 c92:	91 1d       	adc	r25, r1
 c94:	a1 1d       	adc	r26, r1
 c96:	20 d0       	rcall	.+64     	; 0xcd8 <__ultoa_invert+0x84>
 c98:	09 f4       	brne	.+2      	; 0xc9c <__ultoa_invert+0x48>
 c9a:	68 94       	set
 c9c:	3f 91       	pop	r19
 c9e:	2a e0       	ldi	r18, 0x0A	; 10
 ca0:	26 9f       	mul	r18, r22
 ca2:	11 24       	eor	r1, r1
 ca4:	30 19       	sub	r19, r0
 ca6:	30 5d       	subi	r19, 0xD0	; 208
 ca8:	31 93       	st	Z+, r19
 caa:	de f6       	brtc	.-74     	; 0xc62 <__ultoa_invert+0xe>
 cac:	cf 01       	movw	r24, r30
 cae:	08 95       	ret
 cb0:	46 2f       	mov	r20, r22
 cb2:	47 70       	andi	r20, 0x07	; 7
 cb4:	40 5d       	subi	r20, 0xD0	; 208
 cb6:	41 93       	st	Z+, r20
 cb8:	b3 e0       	ldi	r27, 0x03	; 3
 cba:	0f d0       	rcall	.+30     	; 0xcda <__ultoa_invert+0x86>
 cbc:	c9 f7       	brne	.-14     	; 0xcb0 <__ultoa_invert+0x5c>
 cbe:	f6 cf       	rjmp	.-20     	; 0xcac <__ultoa_invert+0x58>
 cc0:	46 2f       	mov	r20, r22
 cc2:	4f 70       	andi	r20, 0x0F	; 15
 cc4:	40 5d       	subi	r20, 0xD0	; 208
 cc6:	4a 33       	cpi	r20, 0x3A	; 58
 cc8:	18 f0       	brcs	.+6      	; 0xcd0 <__ultoa_invert+0x7c>
 cca:	49 5d       	subi	r20, 0xD9	; 217
 ccc:	31 fd       	sbrc	r19, 1
 cce:	40 52       	subi	r20, 0x20	; 32
 cd0:	41 93       	st	Z+, r20
 cd2:	02 d0       	rcall	.+4      	; 0xcd8 <__ultoa_invert+0x84>
 cd4:	a9 f7       	brne	.-22     	; 0xcc0 <__ultoa_invert+0x6c>
 cd6:	ea cf       	rjmp	.-44     	; 0xcac <__ultoa_invert+0x58>
 cd8:	b4 e0       	ldi	r27, 0x04	; 4
 cda:	a6 95       	lsr	r26
 cdc:	97 95       	ror	r25
 cde:	87 95       	ror	r24
 ce0:	77 95       	ror	r23
 ce2:	67 95       	ror	r22
 ce4:	ba 95       	dec	r27
 ce6:	c9 f7       	brne	.-14     	; 0xcda <__ultoa_invert+0x86>
 ce8:	00 97       	sbiw	r24, 0x00	; 0
 cea:	61 05       	cpc	r22, r1
 cec:	71 05       	cpc	r23, r1
 cee:	08 95       	ret
 cf0:	9b 01       	movw	r18, r22
 cf2:	ac 01       	movw	r20, r24
 cf4:	0a 2e       	mov	r0, r26
 cf6:	06 94       	lsr	r0
 cf8:	57 95       	ror	r21
 cfa:	47 95       	ror	r20
 cfc:	37 95       	ror	r19
 cfe:	27 95       	ror	r18
 d00:	ba 95       	dec	r27
 d02:	c9 f7       	brne	.-14     	; 0xcf6 <__ultoa_invert+0xa2>
 d04:	62 0f       	add	r22, r18
 d06:	73 1f       	adc	r23, r19
 d08:	84 1f       	adc	r24, r20
 d0a:	95 1f       	adc	r25, r21
 d0c:	a0 1d       	adc	r26, r0
 d0e:	08 95       	ret

00000d10 <__prologue_saves__>:
 d10:	2f 92       	push	r2
 d12:	3f 92       	push	r3
 d14:	4f 92       	push	r4
 d16:	5f 92       	push	r5
 d18:	6f 92       	push	r6
 d1a:	7f 92       	push	r7
 d1c:	8f 92       	push	r8
 d1e:	9f 92       	push	r9
 d20:	af 92       	push	r10
 d22:	bf 92       	push	r11
 d24:	cf 92       	push	r12
 d26:	df 92       	push	r13
 d28:	ef 92       	push	r14
 d2a:	ff 92       	push	r15
 d2c:	0f 93       	push	r16
 d2e:	1f 93       	push	r17
 d30:	cf 93       	push	r28
 d32:	df 93       	push	r29
 d34:	cd b7       	in	r28, 0x3d	; 61
 d36:	de b7       	in	r29, 0x3e	; 62
 d38:	ca 1b       	sub	r28, r26
 d3a:	db 0b       	sbc	r29, r27
 d3c:	0f b6       	in	r0, 0x3f	; 63
 d3e:	f8 94       	cli
 d40:	de bf       	out	0x3e, r29	; 62
 d42:	0f be       	out	0x3f, r0	; 63
 d44:	cd bf       	out	0x3d, r28	; 61
 d46:	09 94       	ijmp

00000d48 <__epilogue_restores__>:
 d48:	2a 88       	ldd	r2, Y+18	; 0x12
 d4a:	39 88       	ldd	r3, Y+17	; 0x11
 d4c:	48 88       	ldd	r4, Y+16	; 0x10
 d4e:	5f 84       	ldd	r5, Y+15	; 0x0f
 d50:	6e 84       	ldd	r6, Y+14	; 0x0e
 d52:	7d 84       	ldd	r7, Y+13	; 0x0d
 d54:	8c 84       	ldd	r8, Y+12	; 0x0c
 d56:	9b 84       	ldd	r9, Y+11	; 0x0b
 d58:	aa 84       	ldd	r10, Y+10	; 0x0a
 d5a:	b9 84       	ldd	r11, Y+9	; 0x09
 d5c:	c8 84       	ldd	r12, Y+8	; 0x08
 d5e:	df 80       	ldd	r13, Y+7	; 0x07
 d60:	ee 80       	ldd	r14, Y+6	; 0x06
 d62:	fd 80       	ldd	r15, Y+5	; 0x05
 d64:	0c 81       	ldd	r16, Y+4	; 0x04
 d66:	1b 81       	ldd	r17, Y+3	; 0x03
 d68:	aa 81       	ldd	r26, Y+2	; 0x02
 d6a:	b9 81       	ldd	r27, Y+1	; 0x01
 d6c:	ce 0f       	add	r28, r30
 d6e:	d1 1d       	adc	r29, r1
 d70:	0f b6       	in	r0, 0x3f	; 63
 d72:	f8 94       	cli
 d74:	de bf       	out	0x3e, r29	; 62
 d76:	0f be       	out	0x3f, r0	; 63
 d78:	cd bf       	out	0x3d, r28	; 61
 d7a:	ed 01       	movw	r28, r26
 d7c:	08 95       	ret

00000d7e <_exit>:
 d7e:	f8 94       	cli

00000d80 <__stop_program>:
 d80:	ff cf       	rjmp	.-2      	; 0xd80 <__stop_program>
