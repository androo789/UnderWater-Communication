
Receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000128  00800200  00000d98  00000e2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000327  00800328  00800328  00000f54  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ab9  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004fe  00000000  00000000  00001b29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000790  00000000  00000000  00002027  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  000027b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000032e  00000000  00000000  000029dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d9d  00000000  00000000  00002d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00003aa7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	65 c3       	rjmp	.+1738   	; 0x6f0 <__vector_9>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e9       	ldi	r30, 0x98	; 152
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 32       	cpi	r26, 0x28	; 40
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	26 e0       	ldi	r18, 0x06	; 6
 110:	a8 e2       	ldi	r26, 0x28	; 40
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	af 34       	cpi	r26, 0x4F	; 79
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	16 d2       	rcall	.+1068   	; 0x54c <main>
 120:	39 c6       	rjmp	.+3186   	; 0xd94 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <CRC>:
    #ifdef DEBUG // Debugging
    printf("\ndataLength: %i\n", dataLength);
    #endif // DEBUG

    return ret;
}
 124:	2f 92       	push	r2
 126:	3f 92       	push	r3
 128:	4f 92       	push	r4
 12a:	5f 92       	push	r5
 12c:	6f 92       	push	r6
 12e:	7f 92       	push	r7
 130:	8f 92       	push	r8
 132:	9f 92       	push	r9
 134:	af 92       	push	r10
 136:	bf 92       	push	r11
 138:	cf 92       	push	r12
 13a:	df 92       	push	r13
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
 14c:	60 97       	sbiw	r28, 0x10	; 16
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	f8 94       	cli
 152:	de bf       	out	0x3e, r29	; 62
 154:	0f be       	out	0x3f, r0	; 63
 156:	cd bf       	out	0x3d, r28	; 61
 158:	3c 01       	movw	r6, r24
 15a:	8b 01       	movw	r16, r22
 15c:	2a 01       	movw	r4, r20
 15e:	f2 2e       	mov	r15, r18
 160:	1f 93       	push	r17
 162:	6f 93       	push	r22
 164:	82 e4       	ldi	r24, 0x42	; 66
 166:	92 e0       	ldi	r25, 0x02	; 2
 168:	9f 93       	push	r25
 16a:	8f 93       	push	r24
 16c:	31 d3       	rcall	.+1634   	; 0x7d0 <printf>
 16e:	0f 90       	pop	r0
 170:	0f 90       	pop	r0
 172:	0f 90       	pop	r0
 174:	0f 90       	pop	r0
 176:	10 16       	cp	r1, r16
 178:	11 06       	cpc	r1, r17
 17a:	0c f0       	brlt	.+2      	; 0x17e <CRC+0x5a>
 17c:	c2 c0       	rjmp	.+388    	; 0x302 <CRC+0x1de>
 17e:	43 01       	movw	r8, r6
 180:	60 0e       	add	r6, r16
 182:	71 1e       	adc	r7, r17
 184:	21 2c       	mov	r2, r1
 186:	31 2c       	mov	r3, r1
 188:	0e e0       	ldi	r16, 0x0E	; 14
 18a:	12 e0       	ldi	r17, 0x02	; 2
 18c:	54 01       	movw	r10, r8
 18e:	d4 01       	movw	r26, r8
 190:	8d 91       	ld	r24, X+
 192:	4d 01       	movw	r8, r26
 194:	1f 92       	push	r1
 196:	8f 93       	push	r24
 198:	1f 93       	push	r17
 19a:	0f 93       	push	r16
 19c:	19 d3       	rcall	.+1586   	; 0x7d0 <printf>
 19e:	32 2c       	mov	r3, r2
 1a0:	22 24       	eor	r2, r2
 1a2:	f5 01       	movw	r30, r10
 1a4:	80 81       	ld	r24, Z
 1a6:	28 2a       	or	r2, r24
 1a8:	0f 90       	pop	r0
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	86 14       	cp	r8, r6
 1b2:	97 04       	cpc	r9, r7
 1b4:	59 f7       	brne	.-42     	; 0x18c <CRC+0x68>
 1b6:	3f 92       	push	r3
 1b8:	2f 92       	push	r2
 1ba:	89 e1       	ldi	r24, 0x19	; 25
 1bc:	92 e0       	ldi	r25, 0x02	; 2
 1be:	9f 93       	push	r25
 1c0:	8f 93       	push	r24
 1c2:	06 d3       	rcall	.+1548   	; 0x7d0 <printf>
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	f1 10       	cpse	r15, r1
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <CRC+0xb0>
 1d0:	32 2c       	mov	r3, r2
 1d2:	22 24       	eor	r2, r2
 1d4:	92 01       	movw	r18, r4
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	50 e0       	ldi	r21, 0x00	; 0
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	cb 01       	movw	r24, r22
 1e0:	49 86       	std	Y+9, r4	; 0x09
 1e2:	3a 87       	std	Y+10, r19	; 0x0a
 1e4:	4b 87       	std	Y+11, r20	; 0x0b
 1e6:	5c 87       	std	Y+12, r21	; 0x0c
 1e8:	6d 87       	std	Y+13, r22	; 0x0d
 1ea:	7e 87       	std	Y+14, r23	; 0x0e
 1ec:	8f 87       	std	Y+15, r24	; 0x0f
 1ee:	98 8b       	std	Y+16, r25	; 0x10
 1f0:	3f ef       	ldi	r19, 0xFF	; 255
 1f2:	23 16       	cp	r2, r19
 1f4:	31 04       	cpc	r3, r1
 1f6:	08 f4       	brcc	.+2      	; 0x1fa <CRC+0xd6>
 1f8:	94 c0       	rjmp	.+296    	; 0x322 <CRC+0x1fe>
 1fa:	a1 01       	movw	r20, r2
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	dc 01       	movw	r26, r24
 206:	29 82       	std	Y+1, r2	; 0x01
 208:	5a 83       	std	Y+2, r21	; 0x02
 20a:	6b 83       	std	Y+3, r22	; 0x03
 20c:	7c 83       	std	Y+4, r23	; 0x04
 20e:	8d 83       	std	Y+5, r24	; 0x05
 210:	9e 83       	std	Y+6, r25	; 0x06
 212:	af 83       	std	Y+7, r26	; 0x07
 214:	b8 87       	std	Y+8, r27	; 0x08
 216:	29 85       	ldd	r18, Y+9	; 0x09
 218:	3a 85       	ldd	r19, Y+10	; 0x0a
 21a:	4b 85       	ldd	r20, Y+11	; 0x0b
 21c:	5c 85       	ldd	r21, Y+12	; 0x0c
 21e:	6d 85       	ldd	r22, Y+13	; 0x0d
 220:	7e 85       	ldd	r23, Y+14	; 0x0e
 222:	8f 85       	ldd	r24, Y+15	; 0x0f
 224:	98 89       	ldd	r25, Y+16	; 0x10
 226:	a9 80       	ldd	r10, Y+1	; 0x01
 228:	ba 80       	ldd	r11, Y+2	; 0x02
 22a:	c1 2c       	mov	r12, r1
 22c:	d1 2c       	mov	r13, r1
 22e:	e1 2c       	mov	r14, r1
 230:	f1 2c       	mov	r15, r1
 232:	00 e0       	ldi	r16, 0x00	; 0
 234:	10 e0       	ldi	r17, 0x00	; 0
 236:	c3 d2       	rcall	.+1414   	; 0x7be <__cmpdi2>
 238:	b0 f5       	brcc	.+108    	; 0x2a6 <CRC+0x182>
 23a:	82 2e       	mov	r8, r18
 23c:	93 2e       	mov	r9, r19
 23e:	44 2e       	mov	r4, r20
 240:	75 2e       	mov	r7, r21
 242:	66 2e       	mov	r6, r22
 244:	57 2e       	mov	r5, r23
 246:	f8 2f       	mov	r31, r24
 248:	e9 2f       	mov	r30, r25
 24a:	28 2d       	mov	r18, r8
 24c:	39 2d       	mov	r19, r9
 24e:	44 2d       	mov	r20, r4
 250:	57 2d       	mov	r21, r7
 252:	66 2d       	mov	r22, r6
 254:	75 2d       	mov	r23, r5
 256:	8f 2f       	mov	r24, r31
 258:	9e 2f       	mov	r25, r30
 25a:	01 e0       	ldi	r16, 0x01	; 1
 25c:	79 d2       	rcall	.+1266   	; 0x750 <__ashldi3>
 25e:	82 2e       	mov	r8, r18
 260:	93 2e       	mov	r9, r19
 262:	44 2e       	mov	r4, r20
 264:	75 2e       	mov	r7, r21
 266:	66 2e       	mov	r6, r22
 268:	57 2e       	mov	r5, r23
 26a:	f8 2f       	mov	r31, r24
 26c:	e9 2f       	mov	r30, r25
 26e:	a9 80       	ldd	r10, Y+1	; 0x01
 270:	ba 80       	ldd	r11, Y+2	; 0x02
 272:	cb 80       	ldd	r12, Y+3	; 0x03
 274:	dc 80       	ldd	r13, Y+4	; 0x04
 276:	ed 80       	ldd	r14, Y+5	; 0x05
 278:	fe 80       	ldd	r15, Y+6	; 0x06
 27a:	0f 81       	ldd	r16, Y+7	; 0x07
 27c:	18 85       	ldd	r17, Y+8	; 0x08
 27e:	9f d2       	rcall	.+1342   	; 0x7be <__cmpdi2>
 280:	20 f3       	brcs	.-56     	; 0x24a <CRC+0x126>
 282:	57 2d       	mov	r21, r7
 284:	8f 2f       	mov	r24, r31
 286:	9e 2f       	mov	r25, r30
 288:	28 2d       	mov	r18, r8
 28a:	39 2d       	mov	r19, r9
 28c:	66 2d       	mov	r22, r6
 28e:	75 2d       	mov	r23, r5
 290:	01 e0       	ldi	r16, 0x01	; 1
 292:	79 d2       	rcall	.+1266   	; 0x786 <__lshrdi3>
 294:	42 2e       	mov	r4, r18
 296:	53 2e       	mov	r5, r19
 298:	64 2e       	mov	r6, r20
 29a:	75 2e       	mov	r7, r21
 29c:	86 2e       	mov	r8, r22
 29e:	97 2e       	mov	r9, r23
 2a0:	a8 2e       	mov	r10, r24
 2a2:	b9 2e       	mov	r11, r25
 2a4:	08 c0       	rjmp	.+16     	; 0x2b6 <CRC+0x192>
 2a6:	49 84       	ldd	r4, Y+9	; 0x09
 2a8:	5a 84       	ldd	r5, Y+10	; 0x0a
 2aa:	6b 84       	ldd	r6, Y+11	; 0x0b
 2ac:	7c 84       	ldd	r7, Y+12	; 0x0c
 2ae:	8d 84       	ldd	r8, Y+13	; 0x0d
 2b0:	9e 84       	ldd	r9, Y+14	; 0x0e
 2b2:	af 84       	ldd	r10, Y+15	; 0x0f
 2b4:	b8 88       	ldd	r11, Y+16	; 0x10
 2b6:	bf 92       	push	r11
 2b8:	af 92       	push	r10
 2ba:	9f 92       	push	r9
 2bc:	8f 92       	push	r8
 2be:	7f 92       	push	r7
 2c0:	6f 92       	push	r6
 2c2:	5f 92       	push	r5
 2c4:	4f 92       	push	r4
 2c6:	3f 92       	push	r3
 2c8:	2f 92       	push	r2
 2ca:	a7 e2       	ldi	r26, 0x27	; 39
 2cc:	b2 e0       	ldi	r27, 0x02	; 2
 2ce:	bf 93       	push	r27
 2d0:	af 93       	push	r26
 2d2:	7e d2       	rcall	.+1276   	; 0x7d0 <printf>
 2d4:	24 24       	eor	r2, r4
 2d6:	35 24       	eor	r3, r5
 2d8:	3f 92       	push	r3
 2da:	2f 92       	push	r2
 2dc:	aa ec       	ldi	r26, 0xCA	; 202
 2de:	b2 e0       	ldi	r27, 0x02	; 2
 2e0:	bf 93       	push	r27
 2e2:	af 93       	push	r26
 2e4:	75 d2       	rcall	.+1258   	; 0x7d0 <printf>
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	f8 94       	cli
 2ea:	de bf       	out	0x3e, r29	; 62
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	cd bf       	out	0x3d, r28	; 61
 2f0:	3f ef       	ldi	r19, 0xFF	; 255
 2f2:	23 16       	cp	r2, r19
 2f4:	31 04       	cpc	r3, r1
 2f6:	08 f0       	brcs	.+2      	; 0x2fa <CRC+0x1d6>
 2f8:	80 cf       	rjmp	.-256    	; 0x1fa <CRC+0xd6>
 2fa:	13 c0       	rjmp	.+38     	; 0x322 <CRC+0x1fe>
 2fc:	21 2c       	mov	r2, r1
 2fe:	31 2c       	mov	r3, r1
 300:	10 c0       	rjmp	.+32     	; 0x322 <CRC+0x1fe>
 302:	1f 92       	push	r1
 304:	1f 92       	push	r1
 306:	89 e1       	ldi	r24, 0x19	; 25
 308:	92 e0       	ldi	r25, 0x02	; 2
 30a:	9f 93       	push	r25
 30c:	8f 93       	push	r24
 30e:	60 d2       	rcall	.+1216   	; 0x7d0 <printf>
 310:	0f 90       	pop	r0
 312:	0f 90       	pop	r0
 314:	0f 90       	pop	r0
 316:	0f 90       	pop	r0
 318:	f1 10       	cpse	r15, r1
 31a:	f0 cf       	rjmp	.-32     	; 0x2fc <CRC+0x1d8>
 31c:	21 2c       	mov	r2, r1
 31e:	31 2c       	mov	r3, r1
 320:	57 cf       	rjmp	.-338    	; 0x1d0 <CRC+0xac>
 322:	c1 01       	movw	r24, r2
 324:	60 96       	adiw	r28, 0x10	; 16
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	f8 94       	cli
 32a:	de bf       	out	0x3e, r29	; 62
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	cd bf       	out	0x3d, r28	; 61
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	1f 91       	pop	r17
 336:	0f 91       	pop	r16
 338:	ff 90       	pop	r15
 33a:	ef 90       	pop	r14
 33c:	df 90       	pop	r13
 33e:	cf 90       	pop	r12
 340:	bf 90       	pop	r11
 342:	af 90       	pop	r10
 344:	9f 90       	pop	r9
 346:	8f 90       	pop	r8
 348:	7f 90       	pop	r7
 34a:	6f 90       	pop	r6
 34c:	5f 90       	pop	r5
 34e:	4f 90       	pop	r4
 350:	3f 90       	pop	r3
 352:	2f 90       	pop	r2
 354:	08 95       	ret

00000356 <convertToData>:
 * @param length The length of the array
 *
 * @return The readable data
*/
char* convertToData(uint8_t bits[800], int length)
{
 356:	2f 92       	push	r2
 358:	3f 92       	push	r3
 35a:	4f 92       	push	r4
 35c:	5f 92       	push	r5
 35e:	6f 92       	push	r6
 360:	7f 92       	push	r7
 362:	8f 92       	push	r8
 364:	9f 92       	push	r9
 366:	af 92       	push	r10
 368:	bf 92       	push	r11
 36a:	cf 92       	push	r12
 36c:	df 92       	push	r13
 36e:	ef 92       	push	r14
 370:	ff 92       	push	r15
 372:	0f 93       	push	r16
 374:	1f 93       	push	r17
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	cd b7       	in	r28, 0x3d	; 61
 37c:	de b7       	in	r29, 0x3e	; 62
 37e:	c8 5c       	subi	r28, 0xC8	; 200
 380:	d1 09       	sbc	r29, r1
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	f8 94       	cli
 386:	de bf       	out	0x3e, r29	; 62
 388:	0f be       	out	0x3f, r0	; 63
 38a:	cd bf       	out	0x3d, r28	; 61
 38c:	e8 2e       	mov	r14, r24
 38e:	f9 2e       	mov	r15, r25
 390:	06 2f       	mov	r16, r22
 392:	17 2f       	mov	r17, r23
    // Reset some stuff and initialize some variables
    uint16_t i;
    int total = 0;
    char ret[100] = ""; // The return value
 394:	19 82       	std	Y+1, r1	; 0x01
 396:	1a 82       	std	Y+2, r1	; 0x02
 398:	1b 82       	std	Y+3, r1	; 0x03
 39a:	1c 82       	std	Y+4, r1	; 0x04
 39c:	fe 01       	movw	r30, r28
 39e:	35 96       	adiw	r30, 0x05	; 5
 3a0:	80 e6       	ldi	r24, 0x60	; 96
 3a2:	df 01       	movw	r26, r30
 3a4:	1d 92       	st	X+, r1
 3a6:	8a 95       	dec	r24
 3a8:	e9 f7       	brne	.-6      	; 0x3a4 <convertToData+0x4e>
    char tmp = 0b00000000; // Create a temp char with no data
    uint8_t ascii[100]; // The int representation of the data

    #ifdef DEBUG // Debugging
    printf("length: %i\n", length);
 3aa:	7f 93       	push	r23
 3ac:	6f 93       	push	r22
 3ae:	2e e4       	ldi	r18, 0x4E	; 78
 3b0:	32 e0       	ldi	r19, 0x02	; 2
 3b2:	3f 93       	push	r19
 3b4:	2f 93       	push	r18
 3b6:	0c d2       	rcall	.+1048   	; 0x7d0 <printf>
 3b8:	6e 2c       	mov	r6, r14
 3ba:	7f 2c       	mov	r7, r15
 3bc:	80 2e       	mov	r8, r16
 3be:	91 2e       	mov	r9, r17
    #endif // DEBUG

    // Loop through all the bits
    for (i = 0; i < length; i++)
 3c0:	0f 90       	pop	r0
 3c2:	0f 90       	pop	r0
 3c4:	0f 90       	pop	r0
 3c6:	0f 90       	pop	r0
{
    // Reset some stuff and initialize some variables
    uint16_t i;
    int total = 0;
    char ret[100] = ""; // The return value
    char tmp = 0b00000000; // Create a temp char with no data
 3c8:	31 2c       	mov	r3, r1
*/
char* convertToData(uint8_t bits[800], int length)
{
    // Reset some stuff and initialize some variables
    uint16_t i;
    int total = 0;
 3ca:	a1 2c       	mov	r10, r1
 3cc:	b1 2c       	mov	r11, r1
    #ifdef DEBUG // Debugging
    printf("length: %i\n", length);
    #endif // DEBUG

    // Loop through all the bits
    for (i = 0; i < length; i++)
 3ce:	00 e0       	ldi	r16, 0x00	; 0
 3d0:	10 e0       	ldi	r17, 0x00	; 0
    {
        #ifdef DEBUG // Debugging
        printf("\ni:%i", i);
 3d2:	0f 2e       	mov	r0, r31
 3d4:	fa e5       	ldi	r31, 0x5A	; 90
 3d6:	cf 2e       	mov	r12, r31
 3d8:	f2 e0       	ldi	r31, 0x02	; 2
 3da:	df 2e       	mov	r13, r31
 3dc:	f0 2d       	mov	r31, r0
        #endif

        tmp = tmp << 1 | (bits[i] & 0b1); // Add the bit to the right of the previous ones

        #ifdef DEBUG // Debugging
        printf(" bits%i tmp%i,", (bits[i] & 0b1), (uint8_t)tmp);
 3de:	0f 2e       	mov	r0, r31
 3e0:	f0 e6       	ldi	r31, 0x60	; 96
 3e2:	ef 2e       	mov	r14, r31
 3e4:	f2 e0       	ldi	r31, 0x02	; 2
 3e6:	ff 2e       	mov	r15, r31
 3e8:	f0 2d       	mov	r31, r0

        // If this is dividable by 8
        if ((i + 1) % 8 == 0)
        {
            #ifdef DEBUG // Debugging
            printf("\nchar %c\nTotal %i\n", tmp, total);
 3ea:	0f 2e       	mov	r0, r31
 3ec:	ff e6       	ldi	r31, 0x6F	; 111
 3ee:	4f 2e       	mov	r4, r31
 3f0:	f2 e0       	ldi	r31, 0x02	; 2
 3f2:	5f 2e       	mov	r5, r31
 3f4:	f0 2d       	mov	r31, r0
						//return NULL;
					}
				}
				ret[total] = tmp; // Store the temp value in the return value
				total++; // Add one to the total
				tmp = 0b00000000; // Reset the temp value
 3f6:	21 2c       	mov	r2, r1
    #ifdef DEBUG // Debugging
    printf("length: %i\n", length);
    #endif // DEBUG

    // Loop through all the bits
    for (i = 0; i < length; i++)
 3f8:	43 c0       	rjmp	.+134    	; 0x480 <convertToData+0x12a>
    {
        #ifdef DEBUG // Debugging
        printf("\ni:%i", i);
 3fa:	1f 93       	push	r17
 3fc:	0f 93       	push	r16
 3fe:	df 92       	push	r13
 400:	cf 92       	push	r12
 402:	e6 d1       	rcall	.+972    	; 0x7d0 <printf>
        #endif

        tmp = tmp << 1 | (bits[i] & 0b1); // Add the bit to the right of the previous ones
 404:	f3 01       	movw	r30, r6
 406:	81 91       	ld	r24, Z+
 408:	3f 01       	movw	r6, r30
 40a:	81 70       	andi	r24, 0x01	; 1
 40c:	33 0c       	add	r3, r3
 40e:	38 2a       	or	r3, r24

        #ifdef DEBUG // Debugging
        printf(" bits%i tmp%i,", (bits[i] & 0b1), (uint8_t)tmp);
 410:	1f 92       	push	r1
 412:	3f 92       	push	r3
 414:	1f 92       	push	r1
 416:	8f 93       	push	r24
 418:	ff 92       	push	r15
 41a:	ef 92       	push	r14
 41c:	d9 d1       	rcall	.+946    	; 0x7d0 <printf>
        #endif

        // If this is dividable by 8
        if ((i + 1) % 8 == 0)
 41e:	0f 5f       	subi	r16, 0xFF	; 255
 420:	1f 4f       	sbci	r17, 0xFF	; 255
 422:	c8 01       	movw	r24, r16
 424:	87 70       	andi	r24, 0x07	; 7
 426:	99 27       	eor	r25, r25
 428:	0f b6       	in	r0, 0x3f	; 63
 42a:	f8 94       	cli
 42c:	de bf       	out	0x3e, r29	; 62
 42e:	0f be       	out	0x3f, r0	; 63
 430:	cd bf       	out	0x3d, r28	; 61
 432:	89 2b       	or	r24, r25
 434:	29 f5       	brne	.+74     	; 0x480 <convertToData+0x12a>
        {
            #ifdef DEBUG // Debugging
            printf("\nchar %c\nTotal %i\n", tmp, total);
 436:	bf 92       	push	r11
 438:	af 92       	push	r10
 43a:	1f 92       	push	r1
 43c:	3f 92       	push	r3
 43e:	5f 92       	push	r5
 440:	4f 92       	push	r4
 442:	c6 d1       	rcall	.+908    	; 0x7d0 <printf>
            #endif // DEBUG

			if (tmp != 0b11111111)
 444:	0f 90       	pop	r0
 446:	0f 90       	pop	r0
 448:	0f 90       	pop	r0
 44a:	0f 90       	pop	r0
 44c:	0f 90       	pop	r0
 44e:	0f 90       	pop	r0
 450:	3f ef       	ldi	r19, 0xFF	; 255
 452:	33 16       	cp	r3, r19
 454:	a9 f0       	breq	.+42     	; 0x480 <convertToData+0x12a>
			{
				if (total == 1)
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	a8 16       	cp	r10, r24
 45a:	b1 04       	cpc	r11, r1
 45c:	31 f4       	brne	.+12     	; 0x46a <convertToData+0x114>
				{
					if (tmp != OWN_ADDRESS)
 45e:	a0 e4       	ldi	r26, 0x40	; 64
 460:	3a 16       	cp	r3, r26
 462:	19 f0       	breq	.+6      	; 0x46a <convertToData+0x114>
					{
						printf("Not for me\n\n");
 464:	82 e8       	ldi	r24, 0x82	; 130
 466:	92 e0       	ldi	r25, 0x02	; 2
 468:	cb d1       	rcall	.+918    	; 0x800 <puts>
						//break;
						//return NULL;
					}
				}
				ret[total] = tmp; // Store the temp value in the return value
 46a:	e1 e0       	ldi	r30, 0x01	; 1
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	ec 0f       	add	r30, r28
 470:	fd 1f       	adc	r31, r29
 472:	ea 0d       	add	r30, r10
 474:	fb 1d       	adc	r31, r11
 476:	30 82       	st	Z, r3
				total++; // Add one to the total
 478:	bf ef       	ldi	r27, 0xFF	; 255
 47a:	ab 1a       	sub	r10, r27
 47c:	bb 0a       	sbc	r11, r27
				tmp = 0b00000000; // Reset the temp value
 47e:	32 2c       	mov	r3, r2
    #ifdef DEBUG // Debugging
    printf("length: %i\n", length);
    #endif // DEBUG

    // Loop through all the bits
    for (i = 0; i < length; i++)
 480:	08 15       	cp	r16, r8
 482:	19 05       	cpc	r17, r9
 484:	09 f0       	breq	.+2      	; 0x488 <convertToData+0x132>
 486:	b9 cf       	rjmp	.-142    	; 0x3fa <convertToData+0xa4>
 488:	ae 01       	movw	r20, r28
 48a:	4f 5f       	subi	r20, 0xFF	; 255
 48c:	5f 4f       	sbci	r21, 0xFF	; 255
 48e:	9e 01       	movw	r18, r28
 490:	2b 59       	subi	r18, 0x9B	; 155
 492:	3f 4f       	sbci	r19, 0xFF	; 255
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
    }

    // Loop through all the chars
    for (i = 0; i < strlen(ret); i++)
 498:	da 01       	movw	r26, r20
 49a:	07 c0       	rjmp	.+14     	; 0x4aa <convertToData+0x154>
    {
        ascii[i] = (uint8_t)ret[i]; // Convert them to ints
 49c:	fa 01       	movw	r30, r20
 49e:	61 91       	ld	r22, Z+
 4a0:	af 01       	movw	r20, r30
 4a2:	f9 01       	movw	r30, r18
 4a4:	61 93       	st	Z+, r22
 4a6:	9f 01       	movw	r18, r30
			}
		}
    }

    // Loop through all the chars
    for (i = 0; i < strlen(ret); i++)
 4a8:	01 96       	adiw	r24, 0x01	; 1
 4aa:	fd 01       	movw	r30, r26
 4ac:	01 90       	ld	r0, Z+
 4ae:	00 20       	and	r0, r0
 4b0:	e9 f7       	brne	.-6      	; 0x4ac <convertToData+0x156>
 4b2:	31 97       	sbiw	r30, 0x01	; 1
 4b4:	bf 01       	movw	r22, r30
 4b6:	6a 1b       	sub	r22, r26
 4b8:	7b 0b       	sbc	r23, r27
 4ba:	86 17       	cp	r24, r22
 4bc:	97 07       	cpc	r25, r23
 4be:	70 f3       	brcs	.-36     	; 0x49c <convertToData+0x146>
    {
        ascii[i] = (uint8_t)ret[i]; // Convert them to ints
    }

    int checksum = CRC(ascii, strlen(ret), POLY, true); // Do the checksum
 4c0:	21 e0       	ldi	r18, 0x01	; 1
 4c2:	47 e6       	ldi	r20, 0x67	; 103
 4c4:	51 e0       	ldi	r21, 0x01	; 1
 4c6:	ce 01       	movw	r24, r28
 4c8:	8b 59       	subi	r24, 0x9B	; 155
 4ca:	9f 4f       	sbci	r25, 0xFF	; 255
 4cc:	2b de       	rcall	.-938    	; 0x124 <CRC>
 4ce:	8c 01       	movw	r16, r24

    ret[total - 1] = 0b00000000; // Set the last 2 bytes to 0 (this is the checksum and end byte)
 4d0:	fe 01       	movw	r30, r28
 4d2:	ea 0d       	add	r30, r10
 4d4:	fb 1d       	adc	r31, r11
 4d6:	10 82       	st	Z, r1
	ret[total - 2] = 0b00000000;
 4d8:	ef ef       	ldi	r30, 0xFF	; 255
 4da:	ff ef       	ldi	r31, 0xFF	; 255
 4dc:	ec 0f       	add	r30, r28
 4de:	fd 1f       	adc	r31, r29
 4e0:	ea 0d       	add	r30, r10
 4e2:	fb 1d       	adc	r31, r11
 4e4:	10 82       	st	Z, r1

    #ifdef DEBUG // Debugging
    printf("\n\nChecksum: %i\n\n", checksum);
 4e6:	1f 93       	push	r17
 4e8:	8f 93       	push	r24
 4ea:	8e e8       	ldi	r24, 0x8E	; 142
 4ec:	92 e0       	ldi	r25, 0x02	; 2
 4ee:	9f 93       	push	r25
 4f0:	8f 93       	push	r24
 4f2:	6e d1       	rcall	.+732    	; 0x7d0 <printf>
    #endif // DEBUG

    if (checksum == 0)
 4f4:	0f 90       	pop	r0
 4f6:	0f 90       	pop	r0
 4f8:	0f 90       	pop	r0
 4fa:	0f 90       	pop	r0
 4fc:	01 2b       	or	r16, r17
 4fe:	31 f4       	brne	.+12     	; 0x50c <convertToData+0x1b6>
    {
		ret[0] = 0xFF;
 500:	8f ef       	ldi	r24, 0xFF	; 255
 502:	89 83       	std	Y+1, r24	; 0x01
        #ifdef DEBUG // Debugging
        printf("No errors.\n");
 504:	8f e9       	ldi	r24, 0x9F	; 159
 506:	92 e0       	ldi	r25, 0x02	; 2
 508:	7b d1       	rcall	.+758    	; 0x800 <puts>
 50a:	04 c0       	rjmp	.+8      	; 0x514 <convertToData+0x1be>
        #endif // DEBUG
    }
    else
    {
        ret[0] = 0x00;
 50c:	19 82       	std	Y+1, r1	; 0x01
        #ifdef DEBUG // Debugging
        printf("Error detected.\n");
 50e:	8a ea       	ldi	r24, 0xAA	; 170
 510:	92 e0       	ldi	r25, 0x02	; 2
 512:	76 d1       	rcall	.+748    	; 0x800 <puts>
        #endif // DEBUG
    }

    return ret;
}
 514:	ce 01       	movw	r24, r28
 516:	01 96       	adiw	r24, 0x01	; 1
 518:	c8 53       	subi	r28, 0x38	; 56
 51a:	df 4f       	sbci	r29, 0xFF	; 255
 51c:	0f b6       	in	r0, 0x3f	; 63
 51e:	f8 94       	cli
 520:	de bf       	out	0x3e, r29	; 62
 522:	0f be       	out	0x3f, r0	; 63
 524:	cd bf       	out	0x3d, r28	; 61
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	1f 91       	pop	r17
 52c:	0f 91       	pop	r16
 52e:	ff 90       	pop	r15
 530:	ef 90       	pop	r14
 532:	df 90       	pop	r13
 534:	cf 90       	pop	r12
 536:	bf 90       	pop	r11
 538:	af 90       	pop	r10
 53a:	9f 90       	pop	r9
 53c:	8f 90       	pop	r8
 53e:	7f 90       	pop	r7
 540:	6f 90       	pop	r6
 542:	5f 90       	pop	r5
 544:	4f 90       	pop	r4
 546:	3f 90       	pop	r3
 548:	2f 90       	pop	r2
 54a:	08 95       	ret

0000054c <main>:
volatile uint8_t receiving;



int main(void)
{
 54c:	e8 e2       	ldi	r30, 0x28	; 40
 54e:	f3 e0       	ldi	r31, 0x03	; 3
 550:	88 e4       	ldi	r24, 0x48	; 72
 552:	96 e0       	ldi	r25, 0x06	; 6
    for (int i = 0; i < 800; i++)
	{
		receivedData[i] = 0;
 554:	11 92       	st	Z+, r1



int main(void)
{
    for (int i = 0; i < 800; i++)
 556:	e8 17       	cp	r30, r24
 558:	f9 07       	cpc	r31, r25
 55a:	e1 f7       	brne	.-8      	; 0x554 <main+0x8>
	{
		receivedData[i] = 0;
	}

	receiving = 0;
 55c:	10 92 48 06 	sts	0x0648, r1

	USART0Init(); // Initlialize USART communication
 560:	d7 d0       	rcall	.+430    	; 0x710 <USART0Init>
	stdout =& usart0_str;
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	92 e0       	ldi	r25, 0x02	; 2
 566:	90 93 4c 06 	sts	0x064C, r25
 56a:	80 93 4b 06 	sts	0x064B, r24
	
	printf("Start baudrate: %i\n", OUTPUT_BAUDRATE);
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	8f 93       	push	r24
 572:	84 ef       	ldi	r24, 0xF4	; 244
 574:	8f 93       	push	r24
 576:	8a eb       	ldi	r24, 0xBA	; 186
 578:	92 e0       	ldi	r25, 0x02	; 2
 57a:	9f 93       	push	r25
 57c:	8f 93       	push	r24
 57e:	28 d1       	rcall	.+592    	; 0x7d0 <printf>

	DDRB &= ~(1 << INPUT_PIN); // Set INPUT_PIN as input
 580:	20 98       	cbi	0x04, 0	; 4

	PCICR |= (1 << PCIE0);
 582:	e8 e6       	ldi	r30, 0x68	; 104
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	80 81       	ld	r24, Z
 588:	81 60       	ori	r24, 0x01	; 1
 58a:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT0);
 58c:	eb e6       	ldi	r30, 0x6B	; 107
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	80 81       	ld	r24, Z
 592:	81 60       	ori	r24, 0x01	; 1
 594:	80 83       	st	Z, r24

	sei(); // Turn on interrupts
 596:	78 94       	sei
 598:	0f 90       	pop	r0
 59a:	0f 90       	pop	r0
 59c:	0f 90       	pop	r0
 59e:	0f 90       	pop	r0

	int counter = 0;
	
	uint8_t zeroStreak = 0;
 5a0:	51 2c       	mov	r5, r1
	PCICR |= (1 << PCIE0);
	PCMSK0 |= (1 << PCINT0);

	sei(); // Turn on interrupts

	int counter = 0;
 5a2:	e1 2c       	mov	r14, r1
 5a4:	f1 2c       	mov	r15, r1
		{
			_delay_us(DELAY_US / 4); // Wait a quarter of the baudrate to sample somewhere in the middle
			receivedData[counter] = PINB & (1 << INPUT_PIN);
			
			if (receivedData[counter] == 0) zeroStreak++; // Add one to the zeroStreak if the received bit is a 0
			else zeroStreak = 0; // Reset the zeroStreak if the received bit is a 1
 5a6:	41 2c       	mov	r4, r1
			counter++; // Add one to the counter
			_delay_us((DELAY_US / 4) * 3); // Wait the other three quarters of the baudrate

			if (((counter % 8) == 0) && zeroStreak >= 8)  // If the counter is dividable by 8 and the zeroStreak is bigger or equal to 8
			{
				printf("\nStop Byte detected, stopped receiving.");
 5a8:	0f 2e       	mov	r0, r31
 5aa:	fe ec       	ldi	r31, 0xCE	; 206
 5ac:	8f 2e       	mov	r8, r31
 5ae:	f2 e0       	ldi	r31, 0x02	; 2
 5b0:	9f 2e       	mov	r9, r31
 5b2:	f0 2d       	mov	r31, r0

				printf("\n\n");
				for (int i = 0; i < counter; i++) // Loop through all the data
				{
					printf("%i", receivedData[i]);
 5b4:	0f 2e       	mov	r0, r31
 5b6:	f8 e2       	ldi	r31, 0x28	; 40
 5b8:	af 2e       	mov	r10, r31
 5ba:	f3 e0       	ldi	r31, 0x03	; 3
 5bc:	bf 2e       	mov	r11, r31
 5be:	f0 2d       	mov	r31, r0
 5c0:	cd e5       	ldi	r28, 0x5D	; 93
 5c2:	d2 e0       	ldi	r29, 0x02	; 2
				{
					if (received[0] != 0xFF) // If the first byte is not equal to 255 (0xFF)
					{
						printf("Error detected...\n");
					}
					printf("Received data: %s\n\n", received);
 5c4:	0f 2e       	mov	r0, r31
 5c6:	f8 e0       	ldi	r31, 0x08	; 8
 5c8:	2f 2e       	mov	r2, r31
 5ca:	f3 e0       	ldi	r31, 0x03	; 3
 5cc:	3f 2e       	mov	r3, r31
 5ce:	f0 2d       	mov	r31, r0
 5d0:	6a c0       	rjmp	.+212    	; 0x6a6 <main+0x15a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d2:	8f ec       	ldi	r24, 0xCF	; 207
 5d4:	97 e0       	ldi	r25, 0x07	; 7
 5d6:	01 97       	sbiw	r24, 0x01	; 1
 5d8:	f1 f7       	brne	.-4      	; 0x5d6 <main+0x8a>
 5da:	00 c0       	rjmp	.+0      	; 0x5dc <main+0x90>
 5dc:	00 00       	nop
    while (1) 
    {
		while (receiving == 1)
		{
			_delay_us(DELAY_US / 4); // Wait a quarter of the baudrate to sample somewhere in the middle
			receivedData[counter] = PINB & (1 << INPUT_PIN);
 5de:	83 b1       	in	r24, 0x03	; 3
 5e0:	81 70       	andi	r24, 0x01	; 1
 5e2:	f7 01       	movw	r30, r14
 5e4:	e8 5d       	subi	r30, 0xD8	; 216
 5e6:	fc 4f       	sbci	r31, 0xFC	; 252
 5e8:	80 83       	st	Z, r24
			
			if (receivedData[counter] == 0) zeroStreak++; // Add one to the zeroStreak if the received bit is a 0
 5ea:	81 11       	cpse	r24, r1
 5ec:	61 c0       	rjmp	.+194    	; 0x6b0 <main+0x164>
 5ee:	53 94       	inc	r5
			else zeroStreak = 0; // Reset the zeroStreak if the received bit is a 1
			counter++; // Add one to the counter
 5f0:	67 01       	movw	r12, r14
 5f2:	9f ef       	ldi	r25, 0xFF	; 255
 5f4:	c9 1a       	sub	r12, r25
 5f6:	d9 0a       	sbc	r13, r25
 5f8:	ef e6       	ldi	r30, 0x6F	; 111
 5fa:	f7 e1       	ldi	r31, 0x17	; 23
 5fc:	31 97       	sbiw	r30, 0x01	; 1
 5fe:	f1 f7       	brne	.-4      	; 0x5fc <main+0xb0>
 600:	00 c0       	rjmp	.+0      	; 0x602 <main+0xb6>
 602:	00 00       	nop
			_delay_us((DELAY_US / 4) * 3); // Wait the other three quarters of the baudrate

			if (((counter % 8) == 0) && zeroStreak >= 8)  // If the counter is dividable by 8 and the zeroStreak is bigger or equal to 8
 604:	c6 01       	movw	r24, r12
 606:	87 70       	andi	r24, 0x07	; 7
 608:	99 27       	eor	r25, r25
 60a:	89 2b       	or	r24, r25
 60c:	09 f0       	breq	.+2      	; 0x610 <main+0xc4>
 60e:	4a c0       	rjmp	.+148    	; 0x6a4 <main+0x158>
 610:	f7 e0       	ldi	r31, 0x07	; 7
 612:	f5 15       	cp	r31, r5
 614:	08 f0       	brcs	.+2      	; 0x618 <main+0xcc>
 616:	46 c0       	rjmp	.+140    	; 0x6a4 <main+0x158>
			{
				printf("\nStop Byte detected, stopped receiving.");
 618:	9f 92       	push	r9
 61a:	8f 92       	push	r8
 61c:	d9 d0       	rcall	.+434    	; 0x7d0 <printf>

				printf("\n\n");
 61e:	8d e9       	ldi	r24, 0x9D	; 157
 620:	92 e0       	ldi	r25, 0x02	; 2
 622:	ee d0       	rcall	.+476    	; 0x800 <puts>
				for (int i = 0; i < counter; i++) // Loop through all the data
 624:	0f 90       	pop	r0
 626:	0f 90       	pop	r0
 628:	1c 14       	cp	r1, r12
 62a:	1d 04       	cpc	r1, r13
 62c:	0c f4       	brge	.+2      	; 0x630 <main+0xe4>
 62e:	4c c0       	rjmp	.+152    	; 0x6c8 <main+0x17c>
 630:	1a c0       	rjmp	.+52     	; 0x666 <main+0x11a>
				{
					printf("%i", receivedData[i]);
 632:	f8 01       	movw	r30, r16
 634:	81 91       	ld	r24, Z+
 636:	8f 01       	movw	r16, r30
 638:	1f 92       	push	r1
 63a:	8f 93       	push	r24
 63c:	df 93       	push	r29
 63e:	cf 93       	push	r28
 640:	c7 d0       	rcall	.+398    	; 0x7d0 <printf>

					if ((i + 1) % 8 == 0) printf(" ");
 642:	9f ef       	ldi	r25, 0xFF	; 255
 644:	69 1a       	sub	r6, r25
 646:	79 0a       	sbc	r7, r25
 648:	c3 01       	movw	r24, r6
 64a:	87 70       	andi	r24, 0x07	; 7
 64c:	99 27       	eor	r25, r25
 64e:	0f 90       	pop	r0
 650:	0f 90       	pop	r0
 652:	0f 90       	pop	r0
 654:	0f 90       	pop	r0
 656:	89 2b       	or	r24, r25
 658:	19 f4       	brne	.+6      	; 0x660 <main+0x114>
 65a:	80 e2       	ldi	r24, 0x20	; 32
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	cb d0       	rcall	.+406    	; 0x7f6 <putchar>
			if (((counter % 8) == 0) && zeroStreak >= 8)  // If the counter is dividable by 8 and the zeroStreak is bigger or equal to 8
			{
				printf("\nStop Byte detected, stopped receiving.");

				printf("\n\n");
				for (int i = 0; i < counter; i++) // Loop through all the data
 660:	6e 14       	cp	r6, r14
 662:	7f 04       	cpc	r7, r15
 664:	31 f7       	brne	.-52     	; 0x632 <main+0xe6>
					printf("%i", receivedData[i]);

					if ((i + 1) % 8 == 0) printf(" ");
				}

				char* received = convertToData(receivedData, counter); // Convert base2 to data
 666:	b6 01       	movw	r22, r12
 668:	c5 01       	movw	r24, r10
 66a:	75 de       	rcall	.-790    	; 0x356 <convertToData>
 66c:	8c 01       	movw	r16, r24

				if (received != NULL)
 66e:	00 97       	sbiw	r24, 0x00	; 0
 670:	89 f0       	breq	.+34     	; 0x694 <main+0x148>
				{
					if (received[0] != 0xFF) // If the first byte is not equal to 255 (0xFF)
 672:	fc 01       	movw	r30, r24
 674:	80 81       	ld	r24, Z
 676:	8f 3f       	cpi	r24, 0xFF	; 255
 678:	19 f0       	breq	.+6      	; 0x680 <main+0x134>
					{
						printf("Error detected...\n");
 67a:	86 ef       	ldi	r24, 0xF6	; 246
 67c:	92 e0       	ldi	r25, 0x02	; 2
 67e:	c0 d0       	rcall	.+384    	; 0x800 <puts>
					}
					printf("Received data: %s\n\n", received);
 680:	1f 93       	push	r17
 682:	0f 93       	push	r16
 684:	3f 92       	push	r3
 686:	2f 92       	push	r2
 688:	a3 d0       	rcall	.+326    	; 0x7d0 <printf>
 68a:	0f 90       	pop	r0
 68c:	0f 90       	pop	r0
 68e:	0f 90       	pop	r0
 690:	0f 90       	pop	r0
 692:	03 c0       	rjmp	.+6      	; 0x69a <main+0x14e>
				}
				else
					printf("Not for me\n");
 694:	8c e1       	ldi	r24, 0x1C	; 28
 696:	93 e0       	ldi	r25, 0x03	; 3
 698:	b3 d0       	rcall	.+358    	; 0x800 <puts>

				// Reset some variables
				counter = 0;
				receiving = 0;
 69a:	40 92 48 06 	sts	0x0648, r4

				sei(); // Turn on interrupts again
 69e:	78 94       	sei
				}
				else
					printf("Not for me\n");

				// Reset some variables
				counter = 0;
 6a0:	c1 2c       	mov	r12, r1
 6a2:	d1 2c       	mov	r13, r1
		{
			_delay_us(DELAY_US / 4); // Wait a quarter of the baudrate to sample somewhere in the middle
			receivedData[counter] = PINB & (1 << INPUT_PIN);
			
			if (receivedData[counter] == 0) zeroStreak++; // Add one to the zeroStreak if the received bit is a 0
			else zeroStreak = 0; // Reset the zeroStreak if the received bit is a 1
 6a4:	76 01       	movw	r14, r12
	
	uint8_t zeroStreak = 0;

    while (1) 
    {
		while (receiving == 1)
 6a6:	80 91 48 06 	lds	r24, 0x0648
 6aa:	81 30       	cpi	r24, 0x01	; 1
 6ac:	e1 f7       	brne	.-8      	; 0x6a6 <main+0x15a>
 6ae:	91 cf       	rjmp	.-222    	; 0x5d2 <main+0x86>
			_delay_us(DELAY_US / 4); // Wait a quarter of the baudrate to sample somewhere in the middle
			receivedData[counter] = PINB & (1 << INPUT_PIN);
			
			if (receivedData[counter] == 0) zeroStreak++; // Add one to the zeroStreak if the received bit is a 0
			else zeroStreak = 0; // Reset the zeroStreak if the received bit is a 1
			counter++; // Add one to the counter
 6b0:	67 01       	movw	r12, r14
 6b2:	ff ef       	ldi	r31, 0xFF	; 255
 6b4:	cf 1a       	sub	r12, r31
 6b6:	df 0a       	sbc	r13, r31
 6b8:	8f e6       	ldi	r24, 0x6F	; 111
 6ba:	97 e1       	ldi	r25, 0x17	; 23
 6bc:	01 97       	sbiw	r24, 0x01	; 1
 6be:	f1 f7       	brne	.-4      	; 0x6bc <main+0x170>
 6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <main+0x176>
 6c2:	00 00       	nop
		{
			_delay_us(DELAY_US / 4); // Wait a quarter of the baudrate to sample somewhere in the middle
			receivedData[counter] = PINB & (1 << INPUT_PIN);
			
			if (receivedData[counter] == 0) zeroStreak++; // Add one to the zeroStreak if the received bit is a 0
			else zeroStreak = 0; // Reset the zeroStreak if the received bit is a 1
 6c4:	54 2c       	mov	r5, r4
 6c6:	ee cf       	rjmp	.-36     	; 0x6a4 <main+0x158>
				printf("\nStop Byte detected, stopped receiving.");

				printf("\n\n");
				for (int i = 0; i < counter; i++) // Loop through all the data
				{
					printf("%i", receivedData[i]);
 6c8:	f5 01       	movw	r30, r10
 6ca:	80 81       	ld	r24, Z
 6cc:	1f 92       	push	r1
 6ce:	8f 93       	push	r24
 6d0:	df 93       	push	r29
 6d2:	cf 93       	push	r28
 6d4:	7d d0       	rcall	.+250    	; 0x7d0 <printf>
 6d6:	09 e2       	ldi	r16, 0x29	; 41
 6d8:	13 e0       	ldi	r17, 0x03	; 3
 6da:	9f ef       	ldi	r25, 0xFF	; 255
 6dc:	e9 1a       	sub	r14, r25
 6de:	f9 0a       	sbc	r15, r25
 6e0:	0f 90       	pop	r0
 6e2:	0f 90       	pop	r0
 6e4:	0f 90       	pop	r0
 6e6:	0f 90       	pop	r0

					if ((i + 1) % 8 == 0) printf(" ");
 6e8:	66 24       	eor	r6, r6
 6ea:	63 94       	inc	r6
 6ec:	71 2c       	mov	r7, r1
 6ee:	b8 cf       	rjmp	.-144    	; 0x660 <main+0x114>

000006f0 <__vector_9>:
		}
	}
}

ISR(PCINT0_vect)
{
 6f0:	1f 92       	push	r1
 6f2:	0f 92       	push	r0
 6f4:	0f b6       	in	r0, 0x3f	; 63
 6f6:	0f 92       	push	r0
 6f8:	11 24       	eor	r1, r1
 6fa:	8f 93       	push	r24
	receiving = 1;
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	80 93 48 06 	sts	0x0648, r24
	cli(); // Disable interrupts
 702:	f8 94       	cli
 704:	8f 91       	pop	r24
 706:	0f 90       	pop	r0
 708:	0f be       	out	0x3f, r0	; 63
 70a:	0f 90       	pop	r0
 70c:	1f 90       	pop	r1
 70e:	18 95       	reti

00000710 <USART0Init>:
#include "defines.h"

void USART0Init()
{
	// Set baud rate
	UBRR0H = (uint8_t)(UBRR_BAUDRATE >> 8);
 710:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)UBRR_BAUDRATE;
 714:	10 92 c4 00 	sts	0x00C4, r1

	// Enable transmission
	UCSR0B |= (1 << TXEN0);
 718:	e1 ec       	ldi	r30, 0xC1	; 193
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	80 81       	ld	r24, Z
 71e:	88 60       	ori	r24, 0x08	; 8
 720:	80 83       	st	Z, r24

	// Set frame format to 8 data bits, no parity, 1 stop bit
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
 722:	e2 ec       	ldi	r30, 0xC2	; 194
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	80 81       	ld	r24, Z
 728:	86 60       	ori	r24, 0x06	; 6
 72a:	80 83       	st	Z, r24
 72c:	08 95       	ret

0000072e <USART0SendByte>:
}

int USART0SendByte(char u8Data, FILE *stream)
{
 72e:	cf 93       	push	r28
 730:	c8 2f       	mov	r28, r24
	if (u8Data == '\n') USART0SendByte('\r', stream);
 732:	8a 30       	cpi	r24, 0x0A	; 10
 734:	11 f4       	brne	.+4      	; 0x73a <USART0SendByte+0xc>
 736:	8d e0       	ldi	r24, 0x0D	; 13
 738:	fa df       	rcall	.-12     	; 0x72e <USART0SendByte>

	// Wait while previous byte is completed
	while (!(UCSR0A & (1 << UDRE0)));
 73a:	e0 ec       	ldi	r30, 0xC0	; 192
 73c:	f0 e0       	ldi	r31, 0x00	; 0
 73e:	90 81       	ld	r25, Z
 740:	95 ff       	sbrs	r25, 5
 742:	fd cf       	rjmp	.-6      	; 0x73e <USART0SendByte+0x10>

	// Transmit data
	UDR0 = u8Data;
 744:	c0 93 c6 00 	sts	0x00C6, r28
	return 0;
 748:	80 e0       	ldi	r24, 0x00	; 0
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	cf 91       	pop	r28
 74e:	08 95       	ret

00000750 <__ashldi3>:
 750:	0f 93       	push	r16
 752:	08 30       	cpi	r16, 0x08	; 8
 754:	90 f0       	brcs	.+36     	; 0x77a <__ashldi3+0x2a>
 756:	98 2f       	mov	r25, r24
 758:	87 2f       	mov	r24, r23
 75a:	76 2f       	mov	r23, r22
 75c:	65 2f       	mov	r22, r21
 75e:	54 2f       	mov	r21, r20
 760:	43 2f       	mov	r20, r19
 762:	32 2f       	mov	r19, r18
 764:	22 27       	eor	r18, r18
 766:	08 50       	subi	r16, 0x08	; 8
 768:	f4 cf       	rjmp	.-24     	; 0x752 <__ashldi3+0x2>
 76a:	22 0f       	add	r18, r18
 76c:	33 1f       	adc	r19, r19
 76e:	44 1f       	adc	r20, r20
 770:	55 1f       	adc	r21, r21
 772:	66 1f       	adc	r22, r22
 774:	77 1f       	adc	r23, r23
 776:	88 1f       	adc	r24, r24
 778:	99 1f       	adc	r25, r25
 77a:	0a 95       	dec	r16
 77c:	b2 f7       	brpl	.-20     	; 0x76a <__ashldi3+0x1a>
 77e:	0f 91       	pop	r16
 780:	08 95       	ret

00000782 <__ashrdi3>:
 782:	97 fb       	bst	r25, 7
 784:	10 f8       	bld	r1, 0

00000786 <__lshrdi3>:
 786:	16 94       	lsr	r1
 788:	00 08       	sbc	r0, r0
 78a:	0f 93       	push	r16
 78c:	08 30       	cpi	r16, 0x08	; 8
 78e:	98 f0       	brcs	.+38     	; 0x7b6 <__lshrdi3+0x30>
 790:	08 50       	subi	r16, 0x08	; 8
 792:	23 2f       	mov	r18, r19
 794:	34 2f       	mov	r19, r20
 796:	45 2f       	mov	r20, r21
 798:	56 2f       	mov	r21, r22
 79a:	67 2f       	mov	r22, r23
 79c:	78 2f       	mov	r23, r24
 79e:	89 2f       	mov	r24, r25
 7a0:	90 2d       	mov	r25, r0
 7a2:	f4 cf       	rjmp	.-24     	; 0x78c <__lshrdi3+0x6>
 7a4:	05 94       	asr	r0
 7a6:	97 95       	ror	r25
 7a8:	87 95       	ror	r24
 7aa:	77 95       	ror	r23
 7ac:	67 95       	ror	r22
 7ae:	57 95       	ror	r21
 7b0:	47 95       	ror	r20
 7b2:	37 95       	ror	r19
 7b4:	27 95       	ror	r18
 7b6:	0a 95       	dec	r16
 7b8:	aa f7       	brpl	.-22     	; 0x7a4 <__lshrdi3+0x1e>
 7ba:	0f 91       	pop	r16
 7bc:	08 95       	ret

000007be <__cmpdi2>:
 7be:	2a 15       	cp	r18, r10
 7c0:	3b 05       	cpc	r19, r11
 7c2:	4c 05       	cpc	r20, r12
 7c4:	5d 05       	cpc	r21, r13
 7c6:	6e 05       	cpc	r22, r14
 7c8:	7f 05       	cpc	r23, r15
 7ca:	80 07       	cpc	r24, r16
 7cc:	91 07       	cpc	r25, r17
 7ce:	08 95       	ret

000007d0 <printf>:
 7d0:	cf 93       	push	r28
 7d2:	df 93       	push	r29
 7d4:	cd b7       	in	r28, 0x3d	; 61
 7d6:	de b7       	in	r29, 0x3e	; 62
 7d8:	ae 01       	movw	r20, r28
 7da:	4a 5f       	subi	r20, 0xFA	; 250
 7dc:	5f 4f       	sbci	r21, 0xFF	; 255
 7de:	fa 01       	movw	r30, r20
 7e0:	61 91       	ld	r22, Z+
 7e2:	71 91       	ld	r23, Z+
 7e4:	af 01       	movw	r20, r30
 7e6:	80 91 4b 06 	lds	r24, 0x064B
 7ea:	90 91 4c 06 	lds	r25, 0x064C
 7ee:	38 d0       	rcall	.+112    	; 0x860 <vfprintf>
 7f0:	df 91       	pop	r29
 7f2:	cf 91       	pop	r28
 7f4:	08 95       	ret

000007f6 <putchar>:
 7f6:	60 91 4b 06 	lds	r22, 0x064B
 7fa:	70 91 4c 06 	lds	r23, 0x064C
 7fe:	34 c2       	rjmp	.+1128   	; 0xc68 <fputc>

00000800 <puts>:
 800:	0f 93       	push	r16
 802:	1f 93       	push	r17
 804:	cf 93       	push	r28
 806:	df 93       	push	r29
 808:	e0 91 4b 06 	lds	r30, 0x064B
 80c:	f0 91 4c 06 	lds	r31, 0x064C
 810:	23 81       	ldd	r18, Z+3	; 0x03
 812:	21 ff       	sbrs	r18, 1
 814:	1b c0       	rjmp	.+54     	; 0x84c <puts+0x4c>
 816:	8c 01       	movw	r16, r24
 818:	d0 e0       	ldi	r29, 0x00	; 0
 81a:	c0 e0       	ldi	r28, 0x00	; 0
 81c:	f8 01       	movw	r30, r16
 81e:	81 91       	ld	r24, Z+
 820:	8f 01       	movw	r16, r30
 822:	60 91 4b 06 	lds	r22, 0x064B
 826:	70 91 4c 06 	lds	r23, 0x064C
 82a:	db 01       	movw	r26, r22
 82c:	18 96       	adiw	r26, 0x08	; 8
 82e:	ed 91       	ld	r30, X+
 830:	fc 91       	ld	r31, X
 832:	19 97       	sbiw	r26, 0x09	; 9
 834:	88 23       	and	r24, r24
 836:	31 f0       	breq	.+12     	; 0x844 <puts+0x44>
 838:	19 95       	eicall
 83a:	89 2b       	or	r24, r25
 83c:	79 f3       	breq	.-34     	; 0x81c <puts+0x1c>
 83e:	df ef       	ldi	r29, 0xFF	; 255
 840:	cf ef       	ldi	r28, 0xFF	; 255
 842:	ec cf       	rjmp	.-40     	; 0x81c <puts+0x1c>
 844:	8a e0       	ldi	r24, 0x0A	; 10
 846:	19 95       	eicall
 848:	89 2b       	or	r24, r25
 84a:	19 f0       	breq	.+6      	; 0x852 <puts+0x52>
 84c:	8f ef       	ldi	r24, 0xFF	; 255
 84e:	9f ef       	ldi	r25, 0xFF	; 255
 850:	02 c0       	rjmp	.+4      	; 0x856 <puts+0x56>
 852:	8d 2f       	mov	r24, r29
 854:	9c 2f       	mov	r25, r28
 856:	df 91       	pop	r29
 858:	cf 91       	pop	r28
 85a:	1f 91       	pop	r17
 85c:	0f 91       	pop	r16
 85e:	08 95       	ret

00000860 <vfprintf>:
 860:	2f 92       	push	r2
 862:	3f 92       	push	r3
 864:	4f 92       	push	r4
 866:	5f 92       	push	r5
 868:	6f 92       	push	r6
 86a:	7f 92       	push	r7
 86c:	8f 92       	push	r8
 86e:	9f 92       	push	r9
 870:	af 92       	push	r10
 872:	bf 92       	push	r11
 874:	cf 92       	push	r12
 876:	df 92       	push	r13
 878:	ef 92       	push	r14
 87a:	ff 92       	push	r15
 87c:	0f 93       	push	r16
 87e:	1f 93       	push	r17
 880:	cf 93       	push	r28
 882:	df 93       	push	r29
 884:	cd b7       	in	r28, 0x3d	; 61
 886:	de b7       	in	r29, 0x3e	; 62
 888:	2c 97       	sbiw	r28, 0x0c	; 12
 88a:	0f b6       	in	r0, 0x3f	; 63
 88c:	f8 94       	cli
 88e:	de bf       	out	0x3e, r29	; 62
 890:	0f be       	out	0x3f, r0	; 63
 892:	cd bf       	out	0x3d, r28	; 61
 894:	7c 01       	movw	r14, r24
 896:	6b 01       	movw	r12, r22
 898:	8a 01       	movw	r16, r20
 89a:	fc 01       	movw	r30, r24
 89c:	17 82       	std	Z+7, r1	; 0x07
 89e:	16 82       	std	Z+6, r1	; 0x06
 8a0:	83 81       	ldd	r24, Z+3	; 0x03
 8a2:	81 ff       	sbrs	r24, 1
 8a4:	b0 c1       	rjmp	.+864    	; 0xc06 <vfprintf+0x3a6>
 8a6:	ce 01       	movw	r24, r28
 8a8:	01 96       	adiw	r24, 0x01	; 1
 8aa:	4c 01       	movw	r8, r24
 8ac:	f7 01       	movw	r30, r14
 8ae:	93 81       	ldd	r25, Z+3	; 0x03
 8b0:	f6 01       	movw	r30, r12
 8b2:	93 fd       	sbrc	r25, 3
 8b4:	85 91       	lpm	r24, Z+
 8b6:	93 ff       	sbrs	r25, 3
 8b8:	81 91       	ld	r24, Z+
 8ba:	6f 01       	movw	r12, r30
 8bc:	88 23       	and	r24, r24
 8be:	09 f4       	brne	.+2      	; 0x8c2 <vfprintf+0x62>
 8c0:	9e c1       	rjmp	.+828    	; 0xbfe <vfprintf+0x39e>
 8c2:	85 32       	cpi	r24, 0x25	; 37
 8c4:	39 f4       	brne	.+14     	; 0x8d4 <vfprintf+0x74>
 8c6:	93 fd       	sbrc	r25, 3
 8c8:	85 91       	lpm	r24, Z+
 8ca:	93 ff       	sbrs	r25, 3
 8cc:	81 91       	ld	r24, Z+
 8ce:	6f 01       	movw	r12, r30
 8d0:	85 32       	cpi	r24, 0x25	; 37
 8d2:	21 f4       	brne	.+8      	; 0x8dc <vfprintf+0x7c>
 8d4:	b7 01       	movw	r22, r14
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	c7 d1       	rcall	.+910    	; 0xc68 <fputc>
 8da:	e8 cf       	rjmp	.-48     	; 0x8ac <vfprintf+0x4c>
 8dc:	51 2c       	mov	r5, r1
 8de:	31 2c       	mov	r3, r1
 8e0:	20 e0       	ldi	r18, 0x00	; 0
 8e2:	20 32       	cpi	r18, 0x20	; 32
 8e4:	a0 f4       	brcc	.+40     	; 0x90e <vfprintf+0xae>
 8e6:	8b 32       	cpi	r24, 0x2B	; 43
 8e8:	69 f0       	breq	.+26     	; 0x904 <vfprintf+0xa4>
 8ea:	30 f4       	brcc	.+12     	; 0x8f8 <vfprintf+0x98>
 8ec:	80 32       	cpi	r24, 0x20	; 32
 8ee:	59 f0       	breq	.+22     	; 0x906 <vfprintf+0xa6>
 8f0:	83 32       	cpi	r24, 0x23	; 35
 8f2:	69 f4       	brne	.+26     	; 0x90e <vfprintf+0xae>
 8f4:	20 61       	ori	r18, 0x10	; 16
 8f6:	2c c0       	rjmp	.+88     	; 0x950 <vfprintf+0xf0>
 8f8:	8d 32       	cpi	r24, 0x2D	; 45
 8fa:	39 f0       	breq	.+14     	; 0x90a <vfprintf+0xaa>
 8fc:	80 33       	cpi	r24, 0x30	; 48
 8fe:	39 f4       	brne	.+14     	; 0x90e <vfprintf+0xae>
 900:	21 60       	ori	r18, 0x01	; 1
 902:	26 c0       	rjmp	.+76     	; 0x950 <vfprintf+0xf0>
 904:	22 60       	ori	r18, 0x02	; 2
 906:	24 60       	ori	r18, 0x04	; 4
 908:	23 c0       	rjmp	.+70     	; 0x950 <vfprintf+0xf0>
 90a:	28 60       	ori	r18, 0x08	; 8
 90c:	21 c0       	rjmp	.+66     	; 0x950 <vfprintf+0xf0>
 90e:	27 fd       	sbrc	r18, 7
 910:	27 c0       	rjmp	.+78     	; 0x960 <vfprintf+0x100>
 912:	30 ed       	ldi	r19, 0xD0	; 208
 914:	38 0f       	add	r19, r24
 916:	3a 30       	cpi	r19, 0x0A	; 10
 918:	78 f4       	brcc	.+30     	; 0x938 <vfprintf+0xd8>
 91a:	26 ff       	sbrs	r18, 6
 91c:	06 c0       	rjmp	.+12     	; 0x92a <vfprintf+0xca>
 91e:	fa e0       	ldi	r31, 0x0A	; 10
 920:	5f 9e       	mul	r5, r31
 922:	30 0d       	add	r19, r0
 924:	11 24       	eor	r1, r1
 926:	53 2e       	mov	r5, r19
 928:	13 c0       	rjmp	.+38     	; 0x950 <vfprintf+0xf0>
 92a:	8a e0       	ldi	r24, 0x0A	; 10
 92c:	38 9e       	mul	r3, r24
 92e:	30 0d       	add	r19, r0
 930:	11 24       	eor	r1, r1
 932:	33 2e       	mov	r3, r19
 934:	20 62       	ori	r18, 0x20	; 32
 936:	0c c0       	rjmp	.+24     	; 0x950 <vfprintf+0xf0>
 938:	8e 32       	cpi	r24, 0x2E	; 46
 93a:	21 f4       	brne	.+8      	; 0x944 <vfprintf+0xe4>
 93c:	26 fd       	sbrc	r18, 6
 93e:	5f c1       	rjmp	.+702    	; 0xbfe <vfprintf+0x39e>
 940:	20 64       	ori	r18, 0x40	; 64
 942:	06 c0       	rjmp	.+12     	; 0x950 <vfprintf+0xf0>
 944:	8c 36       	cpi	r24, 0x6C	; 108
 946:	11 f4       	brne	.+4      	; 0x94c <vfprintf+0xec>
 948:	20 68       	ori	r18, 0x80	; 128
 94a:	02 c0       	rjmp	.+4      	; 0x950 <vfprintf+0xf0>
 94c:	88 36       	cpi	r24, 0x68	; 104
 94e:	41 f4       	brne	.+16     	; 0x960 <vfprintf+0x100>
 950:	f6 01       	movw	r30, r12
 952:	93 fd       	sbrc	r25, 3
 954:	85 91       	lpm	r24, Z+
 956:	93 ff       	sbrs	r25, 3
 958:	81 91       	ld	r24, Z+
 95a:	6f 01       	movw	r12, r30
 95c:	81 11       	cpse	r24, r1
 95e:	c1 cf       	rjmp	.-126    	; 0x8e2 <vfprintf+0x82>
 960:	98 2f       	mov	r25, r24
 962:	9f 7d       	andi	r25, 0xDF	; 223
 964:	95 54       	subi	r25, 0x45	; 69
 966:	93 30       	cpi	r25, 0x03	; 3
 968:	28 f4       	brcc	.+10     	; 0x974 <vfprintf+0x114>
 96a:	0c 5f       	subi	r16, 0xFC	; 252
 96c:	1f 4f       	sbci	r17, 0xFF	; 255
 96e:	ff e3       	ldi	r31, 0x3F	; 63
 970:	f9 83       	std	Y+1, r31	; 0x01
 972:	0d c0       	rjmp	.+26     	; 0x98e <vfprintf+0x12e>
 974:	83 36       	cpi	r24, 0x63	; 99
 976:	31 f0       	breq	.+12     	; 0x984 <vfprintf+0x124>
 978:	83 37       	cpi	r24, 0x73	; 115
 97a:	71 f0       	breq	.+28     	; 0x998 <vfprintf+0x138>
 97c:	83 35       	cpi	r24, 0x53	; 83
 97e:	09 f0       	breq	.+2      	; 0x982 <vfprintf+0x122>
 980:	57 c0       	rjmp	.+174    	; 0xa30 <vfprintf+0x1d0>
 982:	21 c0       	rjmp	.+66     	; 0x9c6 <vfprintf+0x166>
 984:	f8 01       	movw	r30, r16
 986:	80 81       	ld	r24, Z
 988:	89 83       	std	Y+1, r24	; 0x01
 98a:	0e 5f       	subi	r16, 0xFE	; 254
 98c:	1f 4f       	sbci	r17, 0xFF	; 255
 98e:	44 24       	eor	r4, r4
 990:	43 94       	inc	r4
 992:	51 2c       	mov	r5, r1
 994:	54 01       	movw	r10, r8
 996:	14 c0       	rjmp	.+40     	; 0x9c0 <vfprintf+0x160>
 998:	38 01       	movw	r6, r16
 99a:	f2 e0       	ldi	r31, 0x02	; 2
 99c:	6f 0e       	add	r6, r31
 99e:	71 1c       	adc	r7, r1
 9a0:	f8 01       	movw	r30, r16
 9a2:	a0 80       	ld	r10, Z
 9a4:	b1 80       	ldd	r11, Z+1	; 0x01
 9a6:	26 ff       	sbrs	r18, 6
 9a8:	03 c0       	rjmp	.+6      	; 0x9b0 <vfprintf+0x150>
 9aa:	65 2d       	mov	r22, r5
 9ac:	70 e0       	ldi	r23, 0x00	; 0
 9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <vfprintf+0x154>
 9b0:	6f ef       	ldi	r22, 0xFF	; 255
 9b2:	7f ef       	ldi	r23, 0xFF	; 255
 9b4:	c5 01       	movw	r24, r10
 9b6:	2c 87       	std	Y+12, r18	; 0x0c
 9b8:	4c d1       	rcall	.+664    	; 0xc52 <strnlen>
 9ba:	2c 01       	movw	r4, r24
 9bc:	83 01       	movw	r16, r6
 9be:	2c 85       	ldd	r18, Y+12	; 0x0c
 9c0:	2f 77       	andi	r18, 0x7F	; 127
 9c2:	22 2e       	mov	r2, r18
 9c4:	16 c0       	rjmp	.+44     	; 0x9f2 <vfprintf+0x192>
 9c6:	38 01       	movw	r6, r16
 9c8:	f2 e0       	ldi	r31, 0x02	; 2
 9ca:	6f 0e       	add	r6, r31
 9cc:	71 1c       	adc	r7, r1
 9ce:	f8 01       	movw	r30, r16
 9d0:	a0 80       	ld	r10, Z
 9d2:	b1 80       	ldd	r11, Z+1	; 0x01
 9d4:	26 ff       	sbrs	r18, 6
 9d6:	03 c0       	rjmp	.+6      	; 0x9de <vfprintf+0x17e>
 9d8:	65 2d       	mov	r22, r5
 9da:	70 e0       	ldi	r23, 0x00	; 0
 9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <vfprintf+0x182>
 9de:	6f ef       	ldi	r22, 0xFF	; 255
 9e0:	7f ef       	ldi	r23, 0xFF	; 255
 9e2:	c5 01       	movw	r24, r10
 9e4:	2c 87       	std	Y+12, r18	; 0x0c
 9e6:	2a d1       	rcall	.+596    	; 0xc3c <strnlen_P>
 9e8:	2c 01       	movw	r4, r24
 9ea:	2c 85       	ldd	r18, Y+12	; 0x0c
 9ec:	20 68       	ori	r18, 0x80	; 128
 9ee:	22 2e       	mov	r2, r18
 9f0:	83 01       	movw	r16, r6
 9f2:	23 fc       	sbrc	r2, 3
 9f4:	19 c0       	rjmp	.+50     	; 0xa28 <vfprintf+0x1c8>
 9f6:	83 2d       	mov	r24, r3
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	48 16       	cp	r4, r24
 9fc:	59 06       	cpc	r5, r25
 9fe:	a0 f4       	brcc	.+40     	; 0xa28 <vfprintf+0x1c8>
 a00:	b7 01       	movw	r22, r14
 a02:	80 e2       	ldi	r24, 0x20	; 32
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	30 d1       	rcall	.+608    	; 0xc68 <fputc>
 a08:	3a 94       	dec	r3
 a0a:	f5 cf       	rjmp	.-22     	; 0x9f6 <vfprintf+0x196>
 a0c:	f5 01       	movw	r30, r10
 a0e:	27 fc       	sbrc	r2, 7
 a10:	85 91       	lpm	r24, Z+
 a12:	27 fe       	sbrs	r2, 7
 a14:	81 91       	ld	r24, Z+
 a16:	5f 01       	movw	r10, r30
 a18:	b7 01       	movw	r22, r14
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	25 d1       	rcall	.+586    	; 0xc68 <fputc>
 a1e:	31 10       	cpse	r3, r1
 a20:	3a 94       	dec	r3
 a22:	f1 e0       	ldi	r31, 0x01	; 1
 a24:	4f 1a       	sub	r4, r31
 a26:	51 08       	sbc	r5, r1
 a28:	41 14       	cp	r4, r1
 a2a:	51 04       	cpc	r5, r1
 a2c:	79 f7       	brne	.-34     	; 0xa0c <vfprintf+0x1ac>
 a2e:	de c0       	rjmp	.+444    	; 0xbec <vfprintf+0x38c>
 a30:	84 36       	cpi	r24, 0x64	; 100
 a32:	11 f0       	breq	.+4      	; 0xa38 <vfprintf+0x1d8>
 a34:	89 36       	cpi	r24, 0x69	; 105
 a36:	31 f5       	brne	.+76     	; 0xa84 <vfprintf+0x224>
 a38:	f8 01       	movw	r30, r16
 a3a:	27 ff       	sbrs	r18, 7
 a3c:	07 c0       	rjmp	.+14     	; 0xa4c <vfprintf+0x1ec>
 a3e:	60 81       	ld	r22, Z
 a40:	71 81       	ldd	r23, Z+1	; 0x01
 a42:	82 81       	ldd	r24, Z+2	; 0x02
 a44:	93 81       	ldd	r25, Z+3	; 0x03
 a46:	0c 5f       	subi	r16, 0xFC	; 252
 a48:	1f 4f       	sbci	r17, 0xFF	; 255
 a4a:	08 c0       	rjmp	.+16     	; 0xa5c <vfprintf+0x1fc>
 a4c:	60 81       	ld	r22, Z
 a4e:	71 81       	ldd	r23, Z+1	; 0x01
 a50:	07 2e       	mov	r0, r23
 a52:	00 0c       	add	r0, r0
 a54:	88 0b       	sbc	r24, r24
 a56:	99 0b       	sbc	r25, r25
 a58:	0e 5f       	subi	r16, 0xFE	; 254
 a5a:	1f 4f       	sbci	r17, 0xFF	; 255
 a5c:	2f 76       	andi	r18, 0x6F	; 111
 a5e:	72 2e       	mov	r7, r18
 a60:	97 ff       	sbrs	r25, 7
 a62:	09 c0       	rjmp	.+18     	; 0xa76 <vfprintf+0x216>
 a64:	90 95       	com	r25
 a66:	80 95       	com	r24
 a68:	70 95       	com	r23
 a6a:	61 95       	neg	r22
 a6c:	7f 4f       	sbci	r23, 0xFF	; 255
 a6e:	8f 4f       	sbci	r24, 0xFF	; 255
 a70:	9f 4f       	sbci	r25, 0xFF	; 255
 a72:	20 68       	ori	r18, 0x80	; 128
 a74:	72 2e       	mov	r7, r18
 a76:	2a e0       	ldi	r18, 0x0A	; 10
 a78:	30 e0       	ldi	r19, 0x00	; 0
 a7a:	a4 01       	movw	r20, r8
 a7c:	2d d1       	rcall	.+602    	; 0xcd8 <__ultoa_invert>
 a7e:	a8 2e       	mov	r10, r24
 a80:	a8 18       	sub	r10, r8
 a82:	43 c0       	rjmp	.+134    	; 0xb0a <vfprintf+0x2aa>
 a84:	85 37       	cpi	r24, 0x75	; 117
 a86:	29 f4       	brne	.+10     	; 0xa92 <vfprintf+0x232>
 a88:	2f 7e       	andi	r18, 0xEF	; 239
 a8a:	b2 2e       	mov	r11, r18
 a8c:	2a e0       	ldi	r18, 0x0A	; 10
 a8e:	30 e0       	ldi	r19, 0x00	; 0
 a90:	25 c0       	rjmp	.+74     	; 0xadc <vfprintf+0x27c>
 a92:	f2 2f       	mov	r31, r18
 a94:	f9 7f       	andi	r31, 0xF9	; 249
 a96:	bf 2e       	mov	r11, r31
 a98:	8f 36       	cpi	r24, 0x6F	; 111
 a9a:	c1 f0       	breq	.+48     	; 0xacc <vfprintf+0x26c>
 a9c:	18 f4       	brcc	.+6      	; 0xaa4 <vfprintf+0x244>
 a9e:	88 35       	cpi	r24, 0x58	; 88
 aa0:	79 f0       	breq	.+30     	; 0xac0 <vfprintf+0x260>
 aa2:	ad c0       	rjmp	.+346    	; 0xbfe <vfprintf+0x39e>
 aa4:	80 37       	cpi	r24, 0x70	; 112
 aa6:	19 f0       	breq	.+6      	; 0xaae <vfprintf+0x24e>
 aa8:	88 37       	cpi	r24, 0x78	; 120
 aaa:	21 f0       	breq	.+8      	; 0xab4 <vfprintf+0x254>
 aac:	a8 c0       	rjmp	.+336    	; 0xbfe <vfprintf+0x39e>
 aae:	2f 2f       	mov	r18, r31
 ab0:	20 61       	ori	r18, 0x10	; 16
 ab2:	b2 2e       	mov	r11, r18
 ab4:	b4 fe       	sbrs	r11, 4
 ab6:	0d c0       	rjmp	.+26     	; 0xad2 <vfprintf+0x272>
 ab8:	8b 2d       	mov	r24, r11
 aba:	84 60       	ori	r24, 0x04	; 4
 abc:	b8 2e       	mov	r11, r24
 abe:	09 c0       	rjmp	.+18     	; 0xad2 <vfprintf+0x272>
 ac0:	24 ff       	sbrs	r18, 4
 ac2:	0a c0       	rjmp	.+20     	; 0xad8 <vfprintf+0x278>
 ac4:	9f 2f       	mov	r25, r31
 ac6:	96 60       	ori	r25, 0x06	; 6
 ac8:	b9 2e       	mov	r11, r25
 aca:	06 c0       	rjmp	.+12     	; 0xad8 <vfprintf+0x278>
 acc:	28 e0       	ldi	r18, 0x08	; 8
 ace:	30 e0       	ldi	r19, 0x00	; 0
 ad0:	05 c0       	rjmp	.+10     	; 0xadc <vfprintf+0x27c>
 ad2:	20 e1       	ldi	r18, 0x10	; 16
 ad4:	30 e0       	ldi	r19, 0x00	; 0
 ad6:	02 c0       	rjmp	.+4      	; 0xadc <vfprintf+0x27c>
 ad8:	20 e1       	ldi	r18, 0x10	; 16
 ada:	32 e0       	ldi	r19, 0x02	; 2
 adc:	f8 01       	movw	r30, r16
 ade:	b7 fe       	sbrs	r11, 7
 ae0:	07 c0       	rjmp	.+14     	; 0xaf0 <vfprintf+0x290>
 ae2:	60 81       	ld	r22, Z
 ae4:	71 81       	ldd	r23, Z+1	; 0x01
 ae6:	82 81       	ldd	r24, Z+2	; 0x02
 ae8:	93 81       	ldd	r25, Z+3	; 0x03
 aea:	0c 5f       	subi	r16, 0xFC	; 252
 aec:	1f 4f       	sbci	r17, 0xFF	; 255
 aee:	06 c0       	rjmp	.+12     	; 0xafc <vfprintf+0x29c>
 af0:	60 81       	ld	r22, Z
 af2:	71 81       	ldd	r23, Z+1	; 0x01
 af4:	80 e0       	ldi	r24, 0x00	; 0
 af6:	90 e0       	ldi	r25, 0x00	; 0
 af8:	0e 5f       	subi	r16, 0xFE	; 254
 afa:	1f 4f       	sbci	r17, 0xFF	; 255
 afc:	a4 01       	movw	r20, r8
 afe:	ec d0       	rcall	.+472    	; 0xcd8 <__ultoa_invert>
 b00:	a8 2e       	mov	r10, r24
 b02:	a8 18       	sub	r10, r8
 b04:	fb 2d       	mov	r31, r11
 b06:	ff 77       	andi	r31, 0x7F	; 127
 b08:	7f 2e       	mov	r7, r31
 b0a:	76 fe       	sbrs	r7, 6
 b0c:	0b c0       	rjmp	.+22     	; 0xb24 <vfprintf+0x2c4>
 b0e:	37 2d       	mov	r19, r7
 b10:	3e 7f       	andi	r19, 0xFE	; 254
 b12:	a5 14       	cp	r10, r5
 b14:	50 f4       	brcc	.+20     	; 0xb2a <vfprintf+0x2ca>
 b16:	74 fe       	sbrs	r7, 4
 b18:	0a c0       	rjmp	.+20     	; 0xb2e <vfprintf+0x2ce>
 b1a:	72 fc       	sbrc	r7, 2
 b1c:	08 c0       	rjmp	.+16     	; 0xb2e <vfprintf+0x2ce>
 b1e:	37 2d       	mov	r19, r7
 b20:	3e 7e       	andi	r19, 0xEE	; 238
 b22:	05 c0       	rjmp	.+10     	; 0xb2e <vfprintf+0x2ce>
 b24:	ba 2c       	mov	r11, r10
 b26:	37 2d       	mov	r19, r7
 b28:	03 c0       	rjmp	.+6      	; 0xb30 <vfprintf+0x2d0>
 b2a:	ba 2c       	mov	r11, r10
 b2c:	01 c0       	rjmp	.+2      	; 0xb30 <vfprintf+0x2d0>
 b2e:	b5 2c       	mov	r11, r5
 b30:	34 ff       	sbrs	r19, 4
 b32:	0d c0       	rjmp	.+26     	; 0xb4e <vfprintf+0x2ee>
 b34:	fe 01       	movw	r30, r28
 b36:	ea 0d       	add	r30, r10
 b38:	f1 1d       	adc	r31, r1
 b3a:	80 81       	ld	r24, Z
 b3c:	80 33       	cpi	r24, 0x30	; 48
 b3e:	11 f4       	brne	.+4      	; 0xb44 <vfprintf+0x2e4>
 b40:	39 7e       	andi	r19, 0xE9	; 233
 b42:	09 c0       	rjmp	.+18     	; 0xb56 <vfprintf+0x2f6>
 b44:	32 ff       	sbrs	r19, 2
 b46:	06 c0       	rjmp	.+12     	; 0xb54 <vfprintf+0x2f4>
 b48:	b3 94       	inc	r11
 b4a:	b3 94       	inc	r11
 b4c:	04 c0       	rjmp	.+8      	; 0xb56 <vfprintf+0x2f6>
 b4e:	83 2f       	mov	r24, r19
 b50:	86 78       	andi	r24, 0x86	; 134
 b52:	09 f0       	breq	.+2      	; 0xb56 <vfprintf+0x2f6>
 b54:	b3 94       	inc	r11
 b56:	33 fd       	sbrc	r19, 3
 b58:	12 c0       	rjmp	.+36     	; 0xb7e <vfprintf+0x31e>
 b5a:	30 ff       	sbrs	r19, 0
 b5c:	06 c0       	rjmp	.+12     	; 0xb6a <vfprintf+0x30a>
 b5e:	5a 2c       	mov	r5, r10
 b60:	b3 14       	cp	r11, r3
 b62:	18 f4       	brcc	.+6      	; 0xb6a <vfprintf+0x30a>
 b64:	53 0c       	add	r5, r3
 b66:	5b 18       	sub	r5, r11
 b68:	b3 2c       	mov	r11, r3
 b6a:	b3 14       	cp	r11, r3
 b6c:	60 f4       	brcc	.+24     	; 0xb86 <vfprintf+0x326>
 b6e:	b7 01       	movw	r22, r14
 b70:	80 e2       	ldi	r24, 0x20	; 32
 b72:	90 e0       	ldi	r25, 0x00	; 0
 b74:	3c 87       	std	Y+12, r19	; 0x0c
 b76:	78 d0       	rcall	.+240    	; 0xc68 <fputc>
 b78:	b3 94       	inc	r11
 b7a:	3c 85       	ldd	r19, Y+12	; 0x0c
 b7c:	f6 cf       	rjmp	.-20     	; 0xb6a <vfprintf+0x30a>
 b7e:	b3 14       	cp	r11, r3
 b80:	10 f4       	brcc	.+4      	; 0xb86 <vfprintf+0x326>
 b82:	3b 18       	sub	r3, r11
 b84:	01 c0       	rjmp	.+2      	; 0xb88 <vfprintf+0x328>
 b86:	31 2c       	mov	r3, r1
 b88:	34 ff       	sbrs	r19, 4
 b8a:	11 c0       	rjmp	.+34     	; 0xbae <vfprintf+0x34e>
 b8c:	b7 01       	movw	r22, r14
 b8e:	80 e3       	ldi	r24, 0x30	; 48
 b90:	90 e0       	ldi	r25, 0x00	; 0
 b92:	3c 87       	std	Y+12, r19	; 0x0c
 b94:	69 d0       	rcall	.+210    	; 0xc68 <fputc>
 b96:	3c 85       	ldd	r19, Y+12	; 0x0c
 b98:	32 ff       	sbrs	r19, 2
 b9a:	16 c0       	rjmp	.+44     	; 0xbc8 <vfprintf+0x368>
 b9c:	31 fd       	sbrc	r19, 1
 b9e:	03 c0       	rjmp	.+6      	; 0xba6 <vfprintf+0x346>
 ba0:	88 e7       	ldi	r24, 0x78	; 120
 ba2:	90 e0       	ldi	r25, 0x00	; 0
 ba4:	02 c0       	rjmp	.+4      	; 0xbaa <vfprintf+0x34a>
 ba6:	88 e5       	ldi	r24, 0x58	; 88
 ba8:	90 e0       	ldi	r25, 0x00	; 0
 baa:	b7 01       	movw	r22, r14
 bac:	0c c0       	rjmp	.+24     	; 0xbc6 <vfprintf+0x366>
 bae:	83 2f       	mov	r24, r19
 bb0:	86 78       	andi	r24, 0x86	; 134
 bb2:	51 f0       	breq	.+20     	; 0xbc8 <vfprintf+0x368>
 bb4:	31 ff       	sbrs	r19, 1
 bb6:	02 c0       	rjmp	.+4      	; 0xbbc <vfprintf+0x35c>
 bb8:	8b e2       	ldi	r24, 0x2B	; 43
 bba:	01 c0       	rjmp	.+2      	; 0xbbe <vfprintf+0x35e>
 bbc:	80 e2       	ldi	r24, 0x20	; 32
 bbe:	37 fd       	sbrc	r19, 7
 bc0:	8d e2       	ldi	r24, 0x2D	; 45
 bc2:	b7 01       	movw	r22, r14
 bc4:	90 e0       	ldi	r25, 0x00	; 0
 bc6:	50 d0       	rcall	.+160    	; 0xc68 <fputc>
 bc8:	a5 14       	cp	r10, r5
 bca:	30 f4       	brcc	.+12     	; 0xbd8 <vfprintf+0x378>
 bcc:	b7 01       	movw	r22, r14
 bce:	80 e3       	ldi	r24, 0x30	; 48
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	4a d0       	rcall	.+148    	; 0xc68 <fputc>
 bd4:	5a 94       	dec	r5
 bd6:	f8 cf       	rjmp	.-16     	; 0xbc8 <vfprintf+0x368>
 bd8:	aa 94       	dec	r10
 bda:	f4 01       	movw	r30, r8
 bdc:	ea 0d       	add	r30, r10
 bde:	f1 1d       	adc	r31, r1
 be0:	80 81       	ld	r24, Z
 be2:	b7 01       	movw	r22, r14
 be4:	90 e0       	ldi	r25, 0x00	; 0
 be6:	40 d0       	rcall	.+128    	; 0xc68 <fputc>
 be8:	a1 10       	cpse	r10, r1
 bea:	f6 cf       	rjmp	.-20     	; 0xbd8 <vfprintf+0x378>
 bec:	33 20       	and	r3, r3
 bee:	09 f4       	brne	.+2      	; 0xbf2 <vfprintf+0x392>
 bf0:	5d ce       	rjmp	.-838    	; 0x8ac <vfprintf+0x4c>
 bf2:	b7 01       	movw	r22, r14
 bf4:	80 e2       	ldi	r24, 0x20	; 32
 bf6:	90 e0       	ldi	r25, 0x00	; 0
 bf8:	37 d0       	rcall	.+110    	; 0xc68 <fputc>
 bfa:	3a 94       	dec	r3
 bfc:	f7 cf       	rjmp	.-18     	; 0xbec <vfprintf+0x38c>
 bfe:	f7 01       	movw	r30, r14
 c00:	86 81       	ldd	r24, Z+6	; 0x06
 c02:	97 81       	ldd	r25, Z+7	; 0x07
 c04:	02 c0       	rjmp	.+4      	; 0xc0a <vfprintf+0x3aa>
 c06:	8f ef       	ldi	r24, 0xFF	; 255
 c08:	9f ef       	ldi	r25, 0xFF	; 255
 c0a:	2c 96       	adiw	r28, 0x0c	; 12
 c0c:	0f b6       	in	r0, 0x3f	; 63
 c0e:	f8 94       	cli
 c10:	de bf       	out	0x3e, r29	; 62
 c12:	0f be       	out	0x3f, r0	; 63
 c14:	cd bf       	out	0x3d, r28	; 61
 c16:	df 91       	pop	r29
 c18:	cf 91       	pop	r28
 c1a:	1f 91       	pop	r17
 c1c:	0f 91       	pop	r16
 c1e:	ff 90       	pop	r15
 c20:	ef 90       	pop	r14
 c22:	df 90       	pop	r13
 c24:	cf 90       	pop	r12
 c26:	bf 90       	pop	r11
 c28:	af 90       	pop	r10
 c2a:	9f 90       	pop	r9
 c2c:	8f 90       	pop	r8
 c2e:	7f 90       	pop	r7
 c30:	6f 90       	pop	r6
 c32:	5f 90       	pop	r5
 c34:	4f 90       	pop	r4
 c36:	3f 90       	pop	r3
 c38:	2f 90       	pop	r2
 c3a:	08 95       	ret

00000c3c <strnlen_P>:
 c3c:	fc 01       	movw	r30, r24
 c3e:	05 90       	lpm	r0, Z+
 c40:	61 50       	subi	r22, 0x01	; 1
 c42:	70 40       	sbci	r23, 0x00	; 0
 c44:	01 10       	cpse	r0, r1
 c46:	d8 f7       	brcc	.-10     	; 0xc3e <strnlen_P+0x2>
 c48:	80 95       	com	r24
 c4a:	90 95       	com	r25
 c4c:	8e 0f       	add	r24, r30
 c4e:	9f 1f       	adc	r25, r31
 c50:	08 95       	ret

00000c52 <strnlen>:
 c52:	fc 01       	movw	r30, r24
 c54:	61 50       	subi	r22, 0x01	; 1
 c56:	70 40       	sbci	r23, 0x00	; 0
 c58:	01 90       	ld	r0, Z+
 c5a:	01 10       	cpse	r0, r1
 c5c:	d8 f7       	brcc	.-10     	; 0xc54 <strnlen+0x2>
 c5e:	80 95       	com	r24
 c60:	90 95       	com	r25
 c62:	8e 0f       	add	r24, r30
 c64:	9f 1f       	adc	r25, r31
 c66:	08 95       	ret

00000c68 <fputc>:
 c68:	0f 93       	push	r16
 c6a:	1f 93       	push	r17
 c6c:	cf 93       	push	r28
 c6e:	df 93       	push	r29
 c70:	fb 01       	movw	r30, r22
 c72:	23 81       	ldd	r18, Z+3	; 0x03
 c74:	21 fd       	sbrc	r18, 1
 c76:	03 c0       	rjmp	.+6      	; 0xc7e <fputc+0x16>
 c78:	8f ef       	ldi	r24, 0xFF	; 255
 c7a:	9f ef       	ldi	r25, 0xFF	; 255
 c7c:	28 c0       	rjmp	.+80     	; 0xcce <fputc+0x66>
 c7e:	22 ff       	sbrs	r18, 2
 c80:	16 c0       	rjmp	.+44     	; 0xcae <fputc+0x46>
 c82:	46 81       	ldd	r20, Z+6	; 0x06
 c84:	57 81       	ldd	r21, Z+7	; 0x07
 c86:	24 81       	ldd	r18, Z+4	; 0x04
 c88:	35 81       	ldd	r19, Z+5	; 0x05
 c8a:	42 17       	cp	r20, r18
 c8c:	53 07       	cpc	r21, r19
 c8e:	44 f4       	brge	.+16     	; 0xca0 <fputc+0x38>
 c90:	a0 81       	ld	r26, Z
 c92:	b1 81       	ldd	r27, Z+1	; 0x01
 c94:	9d 01       	movw	r18, r26
 c96:	2f 5f       	subi	r18, 0xFF	; 255
 c98:	3f 4f       	sbci	r19, 0xFF	; 255
 c9a:	31 83       	std	Z+1, r19	; 0x01
 c9c:	20 83       	st	Z, r18
 c9e:	8c 93       	st	X, r24
 ca0:	26 81       	ldd	r18, Z+6	; 0x06
 ca2:	37 81       	ldd	r19, Z+7	; 0x07
 ca4:	2f 5f       	subi	r18, 0xFF	; 255
 ca6:	3f 4f       	sbci	r19, 0xFF	; 255
 ca8:	37 83       	std	Z+7, r19	; 0x07
 caa:	26 83       	std	Z+6, r18	; 0x06
 cac:	10 c0       	rjmp	.+32     	; 0xcce <fputc+0x66>
 cae:	eb 01       	movw	r28, r22
 cb0:	09 2f       	mov	r16, r25
 cb2:	18 2f       	mov	r17, r24
 cb4:	00 84       	ldd	r0, Z+8	; 0x08
 cb6:	f1 85       	ldd	r31, Z+9	; 0x09
 cb8:	e0 2d       	mov	r30, r0
 cba:	19 95       	eicall
 cbc:	89 2b       	or	r24, r25
 cbe:	e1 f6       	brne	.-72     	; 0xc78 <fputc+0x10>
 cc0:	8e 81       	ldd	r24, Y+6	; 0x06
 cc2:	9f 81       	ldd	r25, Y+7	; 0x07
 cc4:	01 96       	adiw	r24, 0x01	; 1
 cc6:	9f 83       	std	Y+7, r25	; 0x07
 cc8:	8e 83       	std	Y+6, r24	; 0x06
 cca:	81 2f       	mov	r24, r17
 ccc:	90 2f       	mov	r25, r16
 cce:	df 91       	pop	r29
 cd0:	cf 91       	pop	r28
 cd2:	1f 91       	pop	r17
 cd4:	0f 91       	pop	r16
 cd6:	08 95       	ret

00000cd8 <__ultoa_invert>:
 cd8:	fa 01       	movw	r30, r20
 cda:	aa 27       	eor	r26, r26
 cdc:	28 30       	cpi	r18, 0x08	; 8
 cde:	51 f1       	breq	.+84     	; 0xd34 <__ultoa_invert+0x5c>
 ce0:	20 31       	cpi	r18, 0x10	; 16
 ce2:	81 f1       	breq	.+96     	; 0xd44 <__ultoa_invert+0x6c>
 ce4:	e8 94       	clt
 ce6:	6f 93       	push	r22
 ce8:	6e 7f       	andi	r22, 0xFE	; 254
 cea:	6e 5f       	subi	r22, 0xFE	; 254
 cec:	7f 4f       	sbci	r23, 0xFF	; 255
 cee:	8f 4f       	sbci	r24, 0xFF	; 255
 cf0:	9f 4f       	sbci	r25, 0xFF	; 255
 cf2:	af 4f       	sbci	r26, 0xFF	; 255
 cf4:	b1 e0       	ldi	r27, 0x01	; 1
 cf6:	3e d0       	rcall	.+124    	; 0xd74 <__ultoa_invert+0x9c>
 cf8:	b4 e0       	ldi	r27, 0x04	; 4
 cfa:	3c d0       	rcall	.+120    	; 0xd74 <__ultoa_invert+0x9c>
 cfc:	67 0f       	add	r22, r23
 cfe:	78 1f       	adc	r23, r24
 d00:	89 1f       	adc	r24, r25
 d02:	9a 1f       	adc	r25, r26
 d04:	a1 1d       	adc	r26, r1
 d06:	68 0f       	add	r22, r24
 d08:	79 1f       	adc	r23, r25
 d0a:	8a 1f       	adc	r24, r26
 d0c:	91 1d       	adc	r25, r1
 d0e:	a1 1d       	adc	r26, r1
 d10:	6a 0f       	add	r22, r26
 d12:	71 1d       	adc	r23, r1
 d14:	81 1d       	adc	r24, r1
 d16:	91 1d       	adc	r25, r1
 d18:	a1 1d       	adc	r26, r1
 d1a:	20 d0       	rcall	.+64     	; 0xd5c <__ultoa_invert+0x84>
 d1c:	09 f4       	brne	.+2      	; 0xd20 <__ultoa_invert+0x48>
 d1e:	68 94       	set
 d20:	3f 91       	pop	r19
 d22:	2a e0       	ldi	r18, 0x0A	; 10
 d24:	26 9f       	mul	r18, r22
 d26:	11 24       	eor	r1, r1
 d28:	30 19       	sub	r19, r0
 d2a:	30 5d       	subi	r19, 0xD0	; 208
 d2c:	31 93       	st	Z+, r19
 d2e:	de f6       	brtc	.-74     	; 0xce6 <__ultoa_invert+0xe>
 d30:	cf 01       	movw	r24, r30
 d32:	08 95       	ret
 d34:	46 2f       	mov	r20, r22
 d36:	47 70       	andi	r20, 0x07	; 7
 d38:	40 5d       	subi	r20, 0xD0	; 208
 d3a:	41 93       	st	Z+, r20
 d3c:	b3 e0       	ldi	r27, 0x03	; 3
 d3e:	0f d0       	rcall	.+30     	; 0xd5e <__ultoa_invert+0x86>
 d40:	c9 f7       	brne	.-14     	; 0xd34 <__ultoa_invert+0x5c>
 d42:	f6 cf       	rjmp	.-20     	; 0xd30 <__ultoa_invert+0x58>
 d44:	46 2f       	mov	r20, r22
 d46:	4f 70       	andi	r20, 0x0F	; 15
 d48:	40 5d       	subi	r20, 0xD0	; 208
 d4a:	4a 33       	cpi	r20, 0x3A	; 58
 d4c:	18 f0       	brcs	.+6      	; 0xd54 <__ultoa_invert+0x7c>
 d4e:	49 5d       	subi	r20, 0xD9	; 217
 d50:	31 fd       	sbrc	r19, 1
 d52:	40 52       	subi	r20, 0x20	; 32
 d54:	41 93       	st	Z+, r20
 d56:	02 d0       	rcall	.+4      	; 0xd5c <__ultoa_invert+0x84>
 d58:	a9 f7       	brne	.-22     	; 0xd44 <__ultoa_invert+0x6c>
 d5a:	ea cf       	rjmp	.-44     	; 0xd30 <__ultoa_invert+0x58>
 d5c:	b4 e0       	ldi	r27, 0x04	; 4
 d5e:	a6 95       	lsr	r26
 d60:	97 95       	ror	r25
 d62:	87 95       	ror	r24
 d64:	77 95       	ror	r23
 d66:	67 95       	ror	r22
 d68:	ba 95       	dec	r27
 d6a:	c9 f7       	brne	.-14     	; 0xd5e <__ultoa_invert+0x86>
 d6c:	00 97       	sbiw	r24, 0x00	; 0
 d6e:	61 05       	cpc	r22, r1
 d70:	71 05       	cpc	r23, r1
 d72:	08 95       	ret
 d74:	9b 01       	movw	r18, r22
 d76:	ac 01       	movw	r20, r24
 d78:	0a 2e       	mov	r0, r26
 d7a:	06 94       	lsr	r0
 d7c:	57 95       	ror	r21
 d7e:	47 95       	ror	r20
 d80:	37 95       	ror	r19
 d82:	27 95       	ror	r18
 d84:	ba 95       	dec	r27
 d86:	c9 f7       	brne	.-14     	; 0xd7a <__ultoa_invert+0xa2>
 d88:	62 0f       	add	r22, r18
 d8a:	73 1f       	adc	r23, r19
 d8c:	84 1f       	adc	r24, r20
 d8e:	95 1f       	adc	r25, r21
 d90:	a0 1d       	adc	r26, r0
 d92:	08 95       	ret

00000d94 <_exit>:
 d94:	f8 94       	cli

00000d96 <__stop_program>:
 d96:	ff cf       	rjmp	.-2      	; 0xd96 <__stop_program>
