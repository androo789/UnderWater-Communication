
Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ae  00800100  000018e6  0000197a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  008002ae  008002ae  00001b28  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b28  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00001bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001232  00000000  00000000  00001cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069d  00000000  00000000  00002eee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b4  00000000  00000000  0000358b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b0  00000000  00000000  00003c40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000418  00000000  00000000  00003ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013f2  00000000  00000000  00004408  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000057fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
       4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      24:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      34:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      40:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      54:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      58:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      5c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      60:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      64:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      68:	08 00       	.word	0x0008	; ????
      6a:	00 00       	nop
      6c:	be 92       	st	-X, r11
      6e:	24 49       	sbci	r18, 0x94	; 148
      70:	12 3e       	cpi	r17, 0xE2	; 226
      72:	ab aa       	std	Y+51, r10	; 0x33
      74:	aa 2a       	or	r10, r26
      76:	be cd       	rjmp	.-1156   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
      78:	cc cc       	rjmp	.-1640   	; 0xfffffa12 <__eeprom_end+0xff7efa12>
      7a:	4c 3e       	cpi	r20, 0xEC	; 236
      7c:	00 00       	nop
      7e:	00 80       	ld	r0, Z
      80:	be ab       	std	Y+54, r27	; 0x36
      82:	aa aa       	std	Y+50, r10	; 0x32
      84:	aa 3e       	cpi	r26, 0xEA	; 234
      86:	00 00       	nop
      88:	00 00       	nop
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	00 00       	nop
      92:	00 00       	nop
      94:	00 08       	sbc	r0, r0
      96:	41 78       	andi	r20, 0x81	; 129
      98:	d3 bb       	out	0x13, r29	; 19
      9a:	43 87       	std	Z+11, r20	; 0x0b
      9c:	d1 13       	cpse	r29, r17
      9e:	3d 19       	sub	r19, r13
      a0:	0e 3c       	cpi	r16, 0xCE	; 206
      a2:	c3 bd       	out	0x23, r28	; 35
      a4:	42 82       	std	Z+2, r4	; 0x02
      a6:	ad 2b       	or	r26, r29
      a8:	3e 68       	ori	r19, 0x8E	; 142
      aa:	ec 82       	std	Y+4, r14	; 0x04
      ac:	76 be       	out	0x36, r7	; 54
      ae:	d9 8f       	std	Y+25, r29	; 0x19
      b0:	e1 a9       	ldd	r30, Z+49	; 0x31
      b2:	3e 4c       	sbci	r19, 0xCE	; 206
      b4:	80 ef       	ldi	r24, 0xF0	; 240
      b6:	ff be       	out	0x3f, r15	; 63
      b8:	01 c4       	rjmp	.+2050   	; 0x8bc <main+0xd6>
      ba:	ff 7f       	andi	r31, 0xFF	; 255
      bc:	3f 00       	.word	0x003f	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	07 63       	ori	r16, 0x37	; 55
      c4:	42 36       	cpi	r20, 0x62	; 98
      c6:	b7 9b       	sbis	0x16, 7	; 22
      c8:	d8 a7       	std	Y+40, r29	; 0x28
      ca:	1a 39       	cpi	r17, 0x9A	; 154
      cc:	68 56       	subi	r22, 0x68	; 104
      ce:	18 ae       	std	Y+56, r1	; 0x38
      d0:	ba ab       	std	Y+50, r27	; 0x32
      d2:	55 8c       	ldd	r5, Z+29	; 0x1d
      d4:	1d 3c       	cpi	r17, 0xCD	; 205
      d6:	b7 cc       	rjmp	.-1682   	; 0xfffffa46 <__eeprom_end+0xff7efa46>
      d8:	57 63       	ori	r21, 0x37	; 55
      da:	bd 6d       	ori	r27, 0xDD	; 221
      dc:	ed fd       	.word	0xfded	; ????
      de:	75 3e       	cpi	r23, 0xE5	; 229
      e0:	f6 17       	cp	r31, r22
      e2:	72 31       	cpi	r23, 0x12	; 18
      e4:	bf 00       	.word	0x00bf	; ????
      e6:	00 00       	nop
      e8:	80 3f       	cpi	r24, 0xF0	; 240

000000ea <__ctors_end>:
      ea:	11 24       	eor	r1, r1
      ec:	1f be       	out	0x3f, r1	; 63
      ee:	cf ef       	ldi	r28, 0xFF	; 255
      f0:	d8 e0       	ldi	r29, 0x08	; 8
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
      f6:	12 e0       	ldi	r17, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b1 e0       	ldi	r27, 0x01	; 1
      fc:	e6 ee       	ldi	r30, 0xE6	; 230
      fe:	f8 e1       	ldi	r31, 0x18	; 24
     100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
     102:	05 90       	lpm	r0, Z+
     104:	0d 92       	st	X+, r0
     106:	ae 3a       	cpi	r26, 0xAE	; 174
     108:	b1 07       	cpc	r27, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>

0000010c <__do_clear_bss>:
     10c:	22 e0       	ldi	r18, 0x02	; 2
     10e:	ae ea       	ldi	r26, 0xAE	; 174
     110:	b2 e0       	ldi	r27, 0x02	; 2
     112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
     114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
     116:	a7 3b       	cpi	r26, 0xB7	; 183
     118:	b2 07       	cpc	r27, r18
     11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
     11c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <main>
     120:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <_exit>

00000124 <__bad_interrupt>:
     124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <CRC>:
					{
						return NULL;
					}
				}
				ret[total] = tmp; // Store the temp value in the return value
				total++; // Add one to the total
     128:	2f 92       	push	r2
				tmp = 0b00000000; // Reset the temp value
     12a:	3f 92       	push	r3
    #ifdef DEBUG // Debugging
    printf("length: %i\n", length);
    #endif // DEBUG

    // Loop through all the bits
    for (i = 0; i < length; i++)
     12c:	4f 92       	push	r4
     12e:	5f 92       	push	r5
     130:	6f 92       	push	r6
     132:	7f 92       	push	r7
     134:	8f 92       	push	r8
     136:	9f 92       	push	r9
     138:	af 92       	push	r10
     13a:	bf 92       	push	r11
     13c:	cf 92       	push	r12
     13e:	df 92       	push	r13
     140:	ef 92       	push	r14
     142:	ff 92       	push	r15
			}
		}
    }

    // Loop through all the chars
    for (i = 0; i < strlen(ret); i++)
     144:	0f 93       	push	r16
     146:	1f 93       	push	r17
    {
        ascii[i] = (uint8_t)ret[i]; // Convert them to ints
     148:	cf 93       	push	r28
     14a:	df 93       	push	r29
     14c:	cd b7       	in	r28, 0x3d	; 61
     14e:	de b7       	in	r29, 0x3e	; 62
     150:	60 97       	sbiw	r28, 0x10	; 16
     152:	0f b6       	in	r0, 0x3f	; 63
			}
		}
    }

    // Loop through all the chars
    for (i = 0; i < strlen(ret); i++)
     154:	f8 94       	cli
     156:	de bf       	out	0x3e, r29	; 62
     158:	0f be       	out	0x3f, r0	; 63
     15a:	cd bf       	out	0x3d, r28	; 61
     15c:	3c 01       	movw	r6, r24
     15e:	8b 01       	movw	r16, r22
     160:	2a 01       	movw	r4, r20
     162:	f2 2e       	mov	r15, r18
     164:	1f 93       	push	r17
     166:	6f 93       	push	r22
     168:	86 ea       	ldi	r24, 0xA6	; 166
     16a:	91 e0       	ldi	r25, 0x01	; 1
    {
        ascii[i] = (uint8_t)ret[i]; // Convert them to ints
    }

    int checksum = CRC(ascii, strlen(ret), POLY, true); // Do the checksum
     16c:	9f 93       	push	r25
     16e:	8f 93       	push	r24
     170:	0e 94 9f 09 	call	0x133e	; 0x133e <printf>
     174:	0f 90       	pop	r0
     176:	0f 90       	pop	r0
     178:	0f 90       	pop	r0
     17a:	0f 90       	pop	r0
     17c:	10 16       	cp	r1, r16

    ret[total - 1] = 0b00000000; // Set the last 2 bytes to 0 (this is the checksum and end byte)
     17e:	11 06       	cpc	r1, r17
     180:	0c f0       	brlt	.+2      	; 0x184 <CRC+0x5c>
     182:	ca c0       	rjmp	.+404    	; 0x318 <CRC+0x1f0>
     184:	43 01       	movw	r8, r6
	ret[total - 2] = 0b00000000;
     186:	60 0e       	add	r6, r16
     188:	71 1e       	adc	r7, r17
     18a:	21 2c       	mov	r2, r1
     18c:	31 2c       	mov	r3, r1
     18e:	02 e7       	ldi	r16, 0x72	; 114
     190:	11 e0       	ldi	r17, 0x01	; 1
     192:	54 01       	movw	r10, r8

    #ifdef DEBUG // Debugging
    printf("\n\nChecksum: %i\n\n", checksum);
     194:	d4 01       	movw	r26, r8
     196:	8d 91       	ld	r24, X+
     198:	4d 01       	movw	r8, r26
     19a:	1f 92       	push	r1
     19c:	8f 93       	push	r24
     19e:	1f 93       	push	r17
     1a0:	0f 93       	push	r16
     1a2:	0e 94 9f 09 	call	0x133e	; 0x133e <printf>
    #endif // DEBUG

    if (checksum == 0)
     1a6:	32 2c       	mov	r3, r2
     1a8:	22 24       	eor	r2, r2
     1aa:	f5 01       	movw	r30, r10
     1ac:	80 81       	ld	r24, Z
     1ae:	28 2a       	or	r2, r24
    {
        #ifdef DEBUG // Debugging
        printf("No errors.\n");
     1b0:	0f 90       	pop	r0
     1b2:	0f 90       	pop	r0
     1b4:	0f 90       	pop	r0
     1b6:	0f 90       	pop	r0
        #ifdef DEBUG // Debugging
        printf("Error detected.\n");
        #endif // DEBUG
    }

    return ret;
     1b8:	86 14       	cp	r8, r6
     1ba:	97 04       	cpc	r9, r7
     1bc:	51 f7       	brne	.-44     	; 0x192 <CRC+0x6a>
        printf("No errors.\n");
        #endif // DEBUG
    }
    else
    {
        ret[0] = -1;
     1be:	3f 92       	push	r3
     1c0:	2f 92       	push	r2
        #ifdef DEBUG // Debugging
        printf("Error detected.\n");
     1c2:	8d e7       	ldi	r24, 0x7D	; 125
     1c4:	91 e0       	ldi	r25, 0x01	; 1
     1c6:	9f 93       	push	r25
     1c8:	8f 93       	push	r24
        #endif // DEBUG
    }

    return ret;
     1ca:	0e 94 9f 09 	call	0x133e	; 0x133e <printf>
     1ce:	0f 90       	pop	r0
			{
				if (total == 1)
				{
					if (tmp != OWN_ADDRESS)
					{
						return NULL;
     1d0:	0f 90       	pop	r0
     1d2:	0f 90       	pop	r0
        printf("Error detected.\n");
        #endif // DEBUG
    }

    return ret;
}
     1d4:	0f 90       	pop	r0
     1d6:	f1 10       	cpse	r15, r1
     1d8:	02 c0       	rjmp	.+4      	; 0x1de <CRC+0xb6>
     1da:	32 2c       	mov	r3, r2
     1dc:	22 24       	eor	r2, r2
     1de:	92 01       	movw	r18, r4
     1e0:	40 e0       	ldi	r20, 0x00	; 0
     1e2:	50 e0       	ldi	r21, 0x00	; 0
     1e4:	60 e0       	ldi	r22, 0x00	; 0
     1e6:	70 e0       	ldi	r23, 0x00	; 0
     1e8:	cb 01       	movw	r24, r22
     1ea:	49 86       	std	Y+9, r4	; 0x09
     1ec:	3a 87       	std	Y+10, r19	; 0x0a
     1ee:	4b 87       	std	Y+11, r20	; 0x0b
     1f0:	5c 87       	std	Y+12, r21	; 0x0c
     1f2:	6d 87       	std	Y+13, r22	; 0x0d
     1f4:	7e 87       	std	Y+14, r23	; 0x0e
     1f6:	8f 87       	std	Y+15, r24	; 0x0f
     1f8:	98 8b       	std	Y+16, r25	; 0x10
     1fa:	3f ef       	ldi	r19, 0xFF	; 255
     1fc:	23 16       	cp	r2, r19
     1fe:	31 04       	cpc	r3, r1
     200:	08 f4       	brcc	.+2      	; 0x204 <CRC+0xdc>
     202:	9b c0       	rjmp	.+310    	; 0x33a <CRC+0x212>
     204:	a1 01       	movw	r20, r2
     206:	60 e0       	ldi	r22, 0x00	; 0
    while (1)
    {
        bool shiftBack = false; // To see if we need to shift back later

        if (allData < 0xFF) break; // If the data is smaller then 255 (0xFF)
        while (calcPoly < allData)
     208:	70 e0       	ldi	r23, 0x00	; 0
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	dc 01       	movw	r26, r24
     210:	29 82       	std	Y+1, r2	; 0x01
     212:	5a 83       	std	Y+2, r21	; 0x02
     214:	6b 83       	std	Y+3, r22	; 0x03
     216:	7c 83       	std	Y+4, r23	; 0x04
     218:	8d 83       	std	Y+5, r24	; 0x05
     21a:	9e 83       	std	Y+6, r25	; 0x06
     21c:	af 83       	std	Y+7, r26	; 0x07
     21e:	b8 87       	std	Y+8, r27	; 0x08
     220:	29 85       	ldd	r18, Y+9	; 0x09
     222:	3a 85       	ldd	r19, Y+10	; 0x0a
     224:	4b 85       	ldd	r20, Y+11	; 0x0b
     226:	5c 85       	ldd	r21, Y+12	; 0x0c
     228:	6d 85       	ldd	r22, Y+13	; 0x0d
     22a:	7e 85       	ldd	r23, Y+14	; 0x0e
     22c:	8f 85       	ldd	r24, Y+15	; 0x0f
     22e:	98 89       	ldd	r25, Y+16	; 0x10
     230:	a9 80       	ldd	r10, Y+1	; 0x01
     232:	ba 80       	ldd	r11, Y+2	; 0x02
     234:	c1 2c       	mov	r12, r1
     236:	d1 2c       	mov	r13, r1
     238:	e1 2c       	mov	r14, r1
     23a:	f1 2c       	mov	r15, r1
     23c:	00 e0       	ldi	r16, 0x00	; 0
     23e:	10 e0       	ldi	r17, 0x00	; 0
     240:	0e 94 96 09 	call	0x132c	; 0x132c <__cmpdi2>
     244:	c8 f5       	brcc	.+114    	; 0x2b8 <CRC+0x190>
     246:	82 2e       	mov	r8, r18
     248:	93 2e       	mov	r9, r19
     24a:	44 2e       	mov	r4, r20
     24c:	75 2e       	mov	r7, r21
     24e:	66 2e       	mov	r6, r22
     250:	57 2e       	mov	r5, r23
     252:	f8 2f       	mov	r31, r24
     254:	e9 2f       	mov	r30, r25
        {
            calcPoly = calcPoly << 1; // Shift the polynomial left by one
     256:	28 2d       	mov	r18, r8
     258:	39 2d       	mov	r19, r9
     25a:	44 2d       	mov	r20, r4
     25c:	57 2d       	mov	r21, r7
     25e:	66 2d       	mov	r22, r6
     260:	75 2d       	mov	r23, r5
     262:	8f 2f       	mov	r24, r31
     264:	9e 2f       	mov	r25, r30
     266:	01 e0       	ldi	r16, 0x01	; 1
     268:	0e 94 5f 09 	call	0x12be	; 0x12be <__ashldi3>
     26c:	82 2e       	mov	r8, r18
     26e:	93 2e       	mov	r9, r19
     270:	44 2e       	mov	r4, r20
     272:	75 2e       	mov	r7, r21
     274:	66 2e       	mov	r6, r22
     276:	57 2e       	mov	r5, r23
     278:	f8 2f       	mov	r31, r24
     27a:	e9 2f       	mov	r30, r25
    while (1)
    {
        bool shiftBack = false; // To see if we need to shift back later

        if (allData < 0xFF) break; // If the data is smaller then 255 (0xFF)
        while (calcPoly < allData)
     27c:	a9 80       	ldd	r10, Y+1	; 0x01
     27e:	ba 80       	ldd	r11, Y+2	; 0x02
     280:	cb 80       	ldd	r12, Y+3	; 0x03
     282:	dc 80       	ldd	r13, Y+4	; 0x04
     284:	ed 80       	ldd	r14, Y+5	; 0x05
     286:	fe 80       	ldd	r15, Y+6	; 0x06
     288:	0f 81       	ldd	r16, Y+7	; 0x07
     28a:	18 85       	ldd	r17, Y+8	; 0x08
     28c:	0e 94 96 09 	call	0x132c	; 0x132c <__cmpdi2>
     290:	10 f3       	brcs	.-60     	; 0x256 <CRC+0x12e>
     292:	57 2d       	mov	r21, r7
     294:	8f 2f       	mov	r24, r31
     296:	9e 2f       	mov	r25, r30
        {
            calcPoly = calcPoly << 1; // Shift the polynomial left by one
            shiftBack = true;
        }
        if (shiftBack) calcPoly = calcPoly >> 1; // Shift the polynomial back one
     298:	28 2d       	mov	r18, r8
     29a:	39 2d       	mov	r19, r9
     29c:	66 2d       	mov	r22, r6
     29e:	75 2d       	mov	r23, r5
     2a0:	01 e0       	ldi	r16, 0x01	; 1
     2a2:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <__lshrdi3>
     2a6:	42 2e       	mov	r4, r18
     2a8:	53 2e       	mov	r5, r19
     2aa:	64 2e       	mov	r6, r20
     2ac:	75 2e       	mov	r7, r21
     2ae:	86 2e       	mov	r8, r22
     2b0:	97 2e       	mov	r9, r23
     2b2:	a8 2e       	mov	r10, r24
     2b4:	b9 2e       	mov	r11, r25
     2b6:	08 c0       	rjmp	.+16     	; 0x2c8 <CRC+0x1a0>
    if (!received) // Check if the data is received or not
    {
        allData = allData << 8; // Add one byte of empty data at the right of the data
    }

    uint64_t calcPoly = poly; // Store the polynomial in a variable so we can modify it
     2b8:	49 84       	ldd	r4, Y+9	; 0x09
     2ba:	5a 84       	ldd	r5, Y+10	; 0x0a
     2bc:	6b 84       	ldd	r6, Y+11	; 0x0b
     2be:	7c 84       	ldd	r7, Y+12	; 0x0c
     2c0:	8d 84       	ldd	r8, Y+13	; 0x0d
     2c2:	9e 84       	ldd	r9, Y+14	; 0x0e
     2c4:	af 84       	ldd	r10, Y+15	; 0x0f
     2c6:	b8 88       	ldd	r11, Y+16	; 0x10
            shiftBack = true;
        }
        if (shiftBack) calcPoly = calcPoly >> 1; // Shift the polynomial back one

        #ifdef DEBUG // Debugging
        printf("%i^%i=", allData, calcPoly);
     2c8:	bf 92       	push	r11
     2ca:	af 92       	push	r10
     2cc:	9f 92       	push	r9
     2ce:	8f 92       	push	r8
     2d0:	7f 92       	push	r7
     2d2:	6f 92       	push	r6
     2d4:	5f 92       	push	r5
     2d6:	4f 92       	push	r4
     2d8:	3f 92       	push	r3
     2da:	2f 92       	push	r2
     2dc:	ab e8       	ldi	r26, 0x8B	; 139
     2de:	b1 e0       	ldi	r27, 0x01	; 1
     2e0:	bf 93       	push	r27
     2e2:	af 93       	push	r26
     2e4:	0e 94 9f 09 	call	0x133e	; 0x133e <printf>
        #endif // DEBUG

        allData = allData ^ calcPoly; // Do the actual XOR
     2e8:	24 24       	eor	r2, r4
     2ea:	35 24       	eor	r3, r5

        #ifdef DEBUG // Debugging
        printf("%i\n", allData);
     2ec:	3f 92       	push	r3
     2ee:	2f 92       	push	r2
     2f0:	aa e7       	ldi	r26, 0x7A	; 122
     2f2:	b2 e0       	ldi	r27, 0x02	; 2
     2f4:	bf 93       	push	r27
     2f6:	af 93       	push	r26
     2f8:	0e 94 9f 09 	call	0x133e	; 0x133e <printf>
    // Loop endlessly
    while (1)
    {
        bool shiftBack = false; // To see if we need to shift back later

        if (allData < 0xFF) break; // If the data is smaller then 255 (0xFF)
     2fc:	0f b6       	in	r0, 0x3f	; 63
     2fe:	f8 94       	cli
     300:	de bf       	out	0x3e, r29	; 62
     302:	0f be       	out	0x3f, r0	; 63
     304:	cd bf       	out	0x3d, r28	; 61
     306:	3f ef       	ldi	r19, 0xFF	; 255
     308:	23 16       	cp	r2, r19
     30a:	31 04       	cpc	r3, r1
     30c:	08 f0       	brcs	.+2      	; 0x310 <CRC+0x1e8>
     30e:	7a cf       	rjmp	.-268    	; 0x204 <CRC+0xdc>
     310:	14 c0       	rjmp	.+40     	; 0x33a <CRC+0x212>
    printf("Length: %i\n", length);
    #endif // DEBUG

    // Reset some stuff and initialize some variables
    int i;
    uint16_t allData = 0;
     312:	21 2c       	mov	r2, r1
     314:	31 2c       	mov	r3, r1
     316:	11 c0       	rjmp	.+34     	; 0x33a <CRC+0x212>

        allData = allData << 8 | (uint8_t)data[i]; // Add the last byte to the right of the previous ones
    }

    #ifdef DEBUG // Debugging
    printf("\nallData: %u\n", allData);
     318:	1f 92       	push	r1
     31a:	1f 92       	push	r1
     31c:	8d e7       	ldi	r24, 0x7D	; 125
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	9f 93       	push	r25
     322:	8f 93       	push	r24
     324:	0e 94 9f 09 	call	0x133e	; 0x133e <printf>
    #endif // DEBUG

    if (!received) // Check if the data is received or not
     328:	0f 90       	pop	r0
     32a:	0f 90       	pop	r0
     32c:	0f 90       	pop	r0
     32e:	0f 90       	pop	r0
     330:	f1 10       	cpse	r15, r1
     332:	ef cf       	rjmp	.-34     	; 0x312 <CRC+0x1ea>
    printf("Length: %i\n", length);
    #endif // DEBUG

    // Reset some stuff and initialize some variables
    int i;
    uint16_t allData = 0;
     334:	21 2c       	mov	r2, r1
     336:	31 2c       	mov	r3, r1
     338:	50 cf       	rjmp	.-352    	; 0x1da <CRC+0xb2>

        calcPoly = poly; // Reset the polynomial to its original value
    }

    return allData;
     33a:	c1 01       	movw	r24, r2
     33c:	60 96       	adiw	r28, 0x10	; 16
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	f8 94       	cli
     342:	de bf       	out	0x3e, r29	; 62
     344:	0f be       	out	0x3f, r0	; 63
     346:	cd bf       	out	0x3d, r28	; 61
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	df 90       	pop	r13
     356:	cf 90       	pop	r12
     358:	bf 90       	pop	r11
     35a:	af 90       	pop	r10
     35c:	9f 90       	pop	r9
     35e:	8f 90       	pop	r8
     360:	7f 90       	pop	r7
     362:	6f 90       	pop	r6
     364:	5f 90       	pop	r5
     366:	4f 90       	pop	r4
     368:	3f 90       	pop	r3
     36a:	2f 90       	pop	r2
     36c:	08 95       	ret

0000036e <fillDataArray>:
 *
 * @return The array of integers which can be send.
 *
*/
uint8_t* fillDataArray(char data[100], uint8_t receivce_address)
{
     36e:	5f 92       	push	r5
     370:	6f 92       	push	r6
     372:	7f 92       	push	r7
     374:	8f 92       	push	r8
     376:	9f 92       	push	r9
     378:	af 92       	push	r10
     37a:	bf 92       	push	r11
     37c:	cf 92       	push	r12
     37e:	df 92       	push	r13
     380:	ef 92       	push	r14
     382:	ff 92       	push	r15
     384:	0f 93       	push	r16
     386:	1f 93       	push	r17
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	c4 58       	subi	r28, 0x84	; 132
     392:	d3 40       	sbci	r29, 0x03	; 3
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	f8 94       	cli
     398:	de bf       	out	0x3e, r29	; 62
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	cd bf       	out	0x3d, r28	; 61
     39e:	8c 01       	movw	r16, r24
     3a0:	fe 01       	movw	r30, r28
     3a2:	31 96       	adiw	r30, 0x01	; 1
     3a4:	9e 01       	movw	r18, r28
     3a6:	27 5f       	subi	r18, 0xF7	; 247
     3a8:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t data_num[100]; // The int representation of the data

	// Add start byte
	for (i = 0; i < 8; i++)
	{
		ret[dataLength++] = 1;
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	81 93       	st	Z+, r24
    int i;
    uint8_t ret[800]; // The return variable
    uint8_t data_num[100]; // The int representation of the data

	// Add start byte
	for (i = 0; i < 8; i++)
     3ae:	e2 17       	cp	r30, r18
     3b0:	f3 07       	cpc	r31, r19
     3b2:	e1 f7       	brne	.-8      	; 0x3ac <fillDataArray+0x3e>
	{
		ret[dataLength++] = 1;
	}

	// Add own address
	ret[dataLength++] = (OWN_ADDRESS & 0b00000001);
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	89 87       	std	Y+9, r24	; 0x09
	ret[dataLength++] = (OWN_ADDRESS & 0b00000010) >> 1;
     3b8:	1a 86       	std	Y+10, r1	; 0x0a
	ret[dataLength++] = (OWN_ADDRESS & 0b00000100) >> 2;
     3ba:	1b 86       	std	Y+11, r1	; 0x0b
	ret[dataLength++] = (OWN_ADDRESS & 0b00001000) >> 3;
     3bc:	1c 86       	std	Y+12, r1	; 0x0c
	ret[dataLength++] = (OWN_ADDRESS & 0b00010000) >> 4;
     3be:	1d 86       	std	Y+13, r1	; 0x0d
	ret[dataLength++] = (OWN_ADDRESS & 0b00100000) >> 5;
     3c0:	1e 86       	std	Y+14, r1	; 0x0e
	ret[dataLength++] = (OWN_ADDRESS & 0b01000000) >> 6;
     3c2:	1f 86       	std	Y+15, r1	; 0x0f
	ret[dataLength++] = (OWN_ADDRESS & 0b10000000) >> 7;
     3c4:	18 8a       	std	Y+16, r1	; 0x10

	// Add receiving address
	ret[dataLength++] = (receivce_address & 0b00000001);
     3c6:	86 2f       	mov	r24, r22
     3c8:	81 70       	andi	r24, 0x01	; 1
     3ca:	89 8b       	std	Y+17, r24	; 0x11
	ret[dataLength++] = (receivce_address & 0b00000010) >> 1;
     3cc:	61 fb       	bst	r22, 1
     3ce:	88 27       	eor	r24, r24
     3d0:	80 f9       	bld	r24, 0
     3d2:	8a 8b       	std	Y+18, r24	; 0x12
	ret[dataLength++] = (receivce_address & 0b00000100) >> 2;
     3d4:	62 fb       	bst	r22, 2
     3d6:	88 27       	eor	r24, r24
     3d8:	80 f9       	bld	r24, 0
     3da:	8b 8b       	std	Y+19, r24	; 0x13
	ret[dataLength++] = (receivce_address & 0b00001000) >> 3;
     3dc:	63 fb       	bst	r22, 3
     3de:	88 27       	eor	r24, r24
     3e0:	80 f9       	bld	r24, 0
     3e2:	8c 8b       	std	Y+20, r24	; 0x14
	ret[dataLength++] = (receivce_address & 0b00010000) >> 4;
     3e4:	64 fb       	bst	r22, 4
     3e6:	88 27       	eor	r24, r24
     3e8:	80 f9       	bld	r24, 0
     3ea:	8d 8b       	std	Y+21, r24	; 0x15
	ret[dataLength++] = (receivce_address & 0b00100000) >> 5;
     3ec:	65 fb       	bst	r22, 5
     3ee:	88 27       	eor	r24, r24
     3f0:	80 f9       	bld	r24, 0
     3f2:	8e 8b       	std	Y+22, r24	; 0x16
	ret[dataLength++] = (receivce_address & 0b01000000) >> 6;
     3f4:	66 fb       	bst	r22, 6
     3f6:	88 27       	eor	r24, r24
     3f8:	80 f9       	bld	r24, 0
     3fa:	8f 8b       	std	Y+23, r24	; 0x17
	ret[dataLength++] = (receivce_address & 0b10000000) >> 7;
     3fc:	88 e1       	ldi	r24, 0x18	; 24
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	90 93 af 02 	sts	0x02AF, r25
     404:	80 93 ae 02 	sts	0x02AE, r24
     408:	66 1f       	adc	r22, r22
     40a:	66 27       	eor	r22, r22
     40c:	66 1f       	adc	r22, r22
     40e:	68 8f       	std	Y+24, r22	; 0x18
     410:	68 01       	movw	r12, r16
     412:	9e 01       	movw	r18, r28
     414:	2f 5d       	subi	r18, 0xDF	; 223
     416:	3c 4f       	sbci	r19, 0xFC	; 252

    // Convert the chars to int's
    for (i = 0; i < strlen(data); i++)
     418:	d8 01       	movw	r26, r16
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	05 c0       	rjmp	.+10     	; 0x42a <fillDataArray+0xbc>
    {
        data_num[i] = (uint8_t)data[i];
     420:	4d 91       	ld	r20, X+
     422:	f9 01       	movw	r30, r18
     424:	41 93       	st	Z+, r20
     426:	9f 01       	movw	r18, r30
	ret[dataLength++] = (receivce_address & 0b00100000) >> 5;
	ret[dataLength++] = (receivce_address & 0b01000000) >> 6;
	ret[dataLength++] = (receivce_address & 0b10000000) >> 7;

    // Convert the chars to int's
    for (i = 0; i < strlen(data); i++)
     428:	01 96       	adiw	r24, 0x01	; 1
     42a:	f8 01       	movw	r30, r16
     42c:	01 90       	ld	r0, Z+
     42e:	00 20       	and	r0, r0
     430:	e9 f7       	brne	.-6      	; 0x42c <fillDataArray+0xbe>
     432:	31 97       	sbiw	r30, 0x01	; 1
     434:	bf 01       	movw	r22, r30
     436:	60 1b       	sub	r22, r16
     438:	71 0b       	sbc	r23, r17
     43a:	86 17       	cp	r24, r22
     43c:	97 07       	cpc	r25, r23
     43e:	80 f3       	brcs	.-32     	; 0x420 <fillDataArray+0xb2>
    {
        data_num[i] = (uint8_t)data[i];
    }

    int checksum = CRC(data_num, strlen(data), POLY, false); // Get a checksum for the data
     440:	20 e0       	ldi	r18, 0x00	; 0
     442:	47 e6       	ldi	r20, 0x67	; 103
     444:	51 e0       	ldi	r21, 0x01	; 1
     446:	ce 01       	movw	r24, r28
     448:	8f 5d       	subi	r24, 0xDF	; 223
     44a:	9c 4f       	sbci	r25, 0xFC	; 252
     44c:	0e 94 94 00 	call	0x128	; 0x128 <CRC>
     450:	4c 01       	movw	r8, r24

    #ifdef DEBUG // Debugging
    printf("\nChecksum: %i\n", checksum);
     452:	9f 92       	push	r9
     454:	8f 93       	push	r24
     456:	82 e9       	ldi	r24, 0x92	; 146
     458:	91 e0       	ldi	r25, 0x01	; 1
     45a:	9f 93       	push	r25
     45c:	8f 93       	push	r24
     45e:	0e 94 9f 09 	call	0x133e	; 0x133e <printf>
    #endif // DEBUG

    // Loop through all the data
    for (i = 0; i < strlen(data); i++)
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	a1 2c       	mov	r10, r1
     46c:	b1 2c       	mov	r11, r1
    {
        uint8_t j;
        uint8_t ascii = (uint8_t)data[i]; // Take one of the data bytes
     46e:	68 94       	set
     470:	55 24       	eor	r5, r5
     472:	53 f8       	bld	r5, 3
            ret[dataLength] = tmp; // Store the leftmost bit in an array

            dataLength++; // Add one to the total data length

            #ifdef DEBUG // Debugging
            printf("%i", tmp);
     474:	0f 2e       	mov	r0, r31
     476:	f5 eb       	ldi	r31, 0xB5	; 181
     478:	ef 2e       	mov	r14, r31
     47a:	f1 e0       	ldi	r31, 0x01	; 1
     47c:	ff 2e       	mov	r15, r31
     47e:	f0 2d       	mov	r31, r0
    #ifdef DEBUG // Debugging
    printf("\nChecksum: %i\n", checksum);
    #endif // DEBUG

    // Loop through all the data
    for (i = 0; i < strlen(data); i++)
     480:	2e c0       	rjmp	.+92     	; 0x4de <fillDataArray+0x170>
    {
        uint8_t j;
        uint8_t ascii = (uint8_t)data[i]; // Take one of the data bytes
     482:	f6 01       	movw	r30, r12
     484:	61 90       	ld	r6, Z+
     486:	6f 01       	movw	r12, r30
     488:	75 2c       	mov	r7, r5
        for (j = 0; j < 8; j++)
        {
            uint8_t tmp = (ascii & 0b10000000) >> 7; // Select the leftmost bit
            ascii = ascii << 1; // Shift the data left by 1

            ret[dataLength] = tmp; // Store the leftmost bit in an array
     48a:	20 91 ae 02 	lds	r18, 0x02AE
     48e:	30 91 af 02 	lds	r19, 0x02AF
     492:	e1 e0       	ldi	r30, 0x01	; 1
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	ec 0f       	add	r30, r28
     498:	fd 1f       	adc	r31, r29
     49a:	e2 0f       	add	r30, r18
     49c:	f3 1f       	adc	r31, r19
     49e:	86 2d       	mov	r24, r6
     4a0:	88 1f       	adc	r24, r24
     4a2:	88 27       	eor	r24, r24
     4a4:	88 1f       	adc	r24, r24
     4a6:	80 83       	st	Z, r24
     4a8:	66 0c       	add	r6, r6

            dataLength++; // Add one to the total data length
     4aa:	2f 5f       	subi	r18, 0xFF	; 255
     4ac:	3f 4f       	sbci	r19, 0xFF	; 255
     4ae:	30 93 af 02 	sts	0x02AF, r19
     4b2:	20 93 ae 02 	sts	0x02AE, r18

            #ifdef DEBUG // Debugging
            printf("%i", tmp);
     4b6:	1f 92       	push	r1
     4b8:	8f 93       	push	r24
     4ba:	ff 92       	push	r15
     4bc:	ef 92       	push	r14
     4be:	0e 94 9f 09 	call	0x133e	; 0x133e <printf>
     4c2:	7a 94       	dec	r7
    {
        uint8_t j;
        uint8_t ascii = (uint8_t)data[i]; // Take one of the data bytes

        // Loop through the bits 1 at a time
        for (j = 0; j < 8; j++)
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	71 10       	cpse	r7, r1
     4ce:	dd cf       	rjmp	.-70     	; 0x48a <fillDataArray+0x11c>
            #ifdef DEBUG // Debugging
            printf("%i", tmp);
            #endif
        }
        #ifdef DEBUG // Debugging
        printf(" ");
     4d0:	80 e2       	ldi	r24, 0x20	; 32
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 b5 09 	call	0x136a	; 0x136a <putchar>
    #ifdef DEBUG // Debugging
    printf("\nChecksum: %i\n", checksum);
    #endif // DEBUG

    // Loop through all the data
    for (i = 0; i < strlen(data); i++)
     4d8:	ff ef       	ldi	r31, 0xFF	; 255
     4da:	af 1a       	sub	r10, r31
     4dc:	bf 0a       	sbc	r11, r31
     4de:	f8 01       	movw	r30, r16
     4e0:	01 90       	ld	r0, Z+
     4e2:	00 20       	and	r0, r0
     4e4:	e9 f7       	brne	.-6      	; 0x4e0 <fillDataArray+0x172>
     4e6:	31 97       	sbiw	r30, 0x01	; 1
     4e8:	e0 1b       	sub	r30, r16
     4ea:	f1 0b       	sbc	r31, r17
     4ec:	ae 16       	cp	r10, r30
     4ee:	bf 06       	cpc	r11, r31
     4f0:	40 f2       	brcs	.-112    	; 0x482 <fillDataArray+0x114>
     4f2:	40 91 ae 02 	lds	r20, 0x02AE
     4f6:	50 91 af 02 	lds	r21, 0x02AF
     4fa:	e1 e0       	ldi	r30, 0x01	; 1
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	ec 0f       	add	r30, r28
     500:	fd 1f       	adc	r31, r29
     502:	e4 0f       	add	r30, r20
     504:	f5 1f       	adc	r31, r21
     506:	9a 01       	movw	r18, r20
     508:	28 5f       	subi	r18, 0xF8	; 248
     50a:	3f 4f       	sbci	r19, 0xFF	; 255
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	8c 0f       	add	r24, r28
     512:	9d 1f       	adc	r25, r29
     514:	28 0f       	add	r18, r24
     516:	39 1f       	adc	r19, r25
    }

    // Loop 8 more times for the CRC byte
    for (i = 0; i < 8; i++)
    {
        int tmp = (checksum & 0b10000000) >> 7; // Select the leftmost bit
     518:	87 fa       	bst	r8, 7
     51a:	88 27       	eor	r24, r24
     51c:	80 f9       	bld	r24, 0
        checksum = checksum << 1; // Shift the checksum left by 1

        ret[dataLength] = tmp; // Store the 2 leftmost bits in an array
     51e:	81 93       	st	Z+, r24
     520:	88 0c       	add	r8, r8
     522:	99 1c       	adc	r9, r9
        printf(" ");
        #endif
    }

    // Loop 8 more times for the CRC byte
    for (i = 0; i < 8; i++)
     524:	e2 17       	cp	r30, r18
     526:	f3 07       	cpc	r31, r19
     528:	b9 f7       	brne	.-18     	; 0x518 <fillDataArray+0x1aa>
     52a:	ca 01       	movw	r24, r20
     52c:	08 96       	adiw	r24, 0x08	; 8
     52e:	e1 e0       	ldi	r30, 0x01	; 1
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	ec 0f       	add	r30, r28
     534:	fd 1f       	adc	r31, r29
     536:	e8 0f       	add	r30, r24
     538:	f9 1f       	adc	r31, r25
     53a:	08 96       	adiw	r24, 0x08	; 8
     53c:	21 e0       	ldi	r18, 0x01	; 1
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	2c 0f       	add	r18, r28
     542:	3d 1f       	adc	r19, r29
     544:	82 0f       	add	r24, r18
     546:	93 1f       	adc	r25, r19
        dataLength++; // Add one to the total data length
    }

	for (i = 0; i < 8; i++)
	{
		ret[dataLength] = 0;
     548:	11 92       	st	Z+, r1

        ret[dataLength] = tmp; // Store the 2 leftmost bits in an array
        dataLength++; // Add one to the total data length
    }

	for (i = 0; i < 8; i++)
     54a:	e8 17       	cp	r30, r24
     54c:	f9 07       	cpc	r31, r25
     54e:	e1 f7       	brne	.-8      	; 0x548 <fillDataArray+0x1da>
     550:	40 5f       	subi	r20, 0xF0	; 240
     552:	5f 4f       	sbci	r21, 0xFF	; 255
     554:	50 93 af 02 	sts	0x02AF, r21
     558:	40 93 ae 02 	sts	0x02AE, r20
		ret[dataLength] = 0;
		dataLength++;
	}

    #ifdef DEBUG // Debugging
    printf("\ndataLength: %i\n", dataLength);
     55c:	5f 93       	push	r21
     55e:	4f 93       	push	r20
     560:	81 ea       	ldi	r24, 0xA1	; 161
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	9f 93       	push	r25
     566:	8f 93       	push	r24
     568:	0e 94 9f 09 	call	0x133e	; 0x133e <printf>
    #endif // DEBUG

    return ret;
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
}
     574:	ce 01       	movw	r24, r28
     576:	01 96       	adiw	r24, 0x01	; 1
     578:	cc 57       	subi	r28, 0x7C	; 124
     57a:	dc 4f       	sbci	r29, 0xFC	; 252
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	f8 94       	cli
     580:	de bf       	out	0x3e, r29	; 62
     582:	0f be       	out	0x3f, r0	; 63
     584:	cd bf       	out	0x3d, r28	; 61
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	1f 91       	pop	r17
     58c:	0f 91       	pop	r16
     58e:	ff 90       	pop	r15
     590:	ef 90       	pop	r14
     592:	df 90       	pop	r13
     594:	cf 90       	pop	r12
     596:	bf 90       	pop	r11
     598:	af 90       	pop	r10
     59a:	9f 90       	pop	r9
     59c:	8f 90       	pop	r8
     59e:	7f 90       	pop	r7
     5a0:	6f 90       	pop	r6
     5a2:	5f 90       	pop	r5
     5a4:	08 95       	ret

000005a6 <sendPing>:
    }
}

void sendPing()
{
	PORTB ^= (1 << OUTPUT_PIN);
     5a6:	95 b1       	in	r25, 0x05	; 5
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	98 27       	eor	r25, r24
     5ac:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5ae:	ef e3       	ldi	r30, 0x3F	; 63
     5b0:	ff e1       	ldi	r31, 0x1F	; 31
     5b2:	31 97       	sbiw	r30, 0x01	; 1
     5b4:	f1 f7       	brne	.-4      	; 0x5b2 <sendPing+0xc>
     5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <sendPing+0x12>
     5b8:	00 00       	nop
	_delay_us(DELAY_US);
	PORTB ^= (1 << OUTPUT_PIN);
     5ba:	95 b1       	in	r25, 0x05	; 5
     5bc:	89 27       	eor	r24, r25
     5be:	85 b9       	out	0x05, r24	; 5
     5c0:	8f e3       	ldi	r24, 0x3F	; 63
     5c2:	9f e1       	ldi	r25, 0x1F	; 31
     5c4:	01 97       	sbiw	r24, 0x01	; 1
     5c6:	f1 f7       	brne	.-4      	; 0x5c4 <sendPing+0x1e>
     5c8:	00 c0       	rjmp	.+0      	; 0x5ca <sendPing+0x24>
     5ca:	00 00       	nop
     5cc:	08 95       	ret

000005ce <sendData>:
	_delay_us(DELAY_US);
}

void sendData(uint8_t dataToSend[800])
{
	for (int i = 0; i < dataLength; i++)
     5ce:	20 91 ae 02 	lds	r18, 0x02AE
     5d2:	30 91 af 02 	lds	r19, 0x02AF
     5d6:	12 16       	cp	r1, r18
     5d8:	13 06       	cpc	r1, r19
     5da:	c4 f4       	brge	.+48     	; 0x60c <sendData+0x3e>
     5dc:	e8 2f       	mov	r30, r24
     5de:	f9 2f       	mov	r31, r25
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
	{
		if ((dataToSend[i] && 0b01) == 0)
     5e4:	21 91       	ld	r18, Z+
     5e6:	21 11       	cpse	r18, r1
     5e8:	02 c0       	rjmp	.+4      	; 0x5ee <sendData+0x20>
			PORTB &= ~(1 << OUTPUT_PIN);
     5ea:	28 98       	cbi	0x05, 0	; 5
     5ec:	01 c0       	rjmp	.+2      	; 0x5f0 <sendData+0x22>
		else
			PORTB |= (1 << OUTPUT_PIN);
     5ee:	28 9a       	sbi	0x05, 0	; 5
     5f0:	af e3       	ldi	r26, 0x3F	; 63
     5f2:	bf e1       	ldi	r27, 0x1F	; 31
     5f4:	11 97       	sbiw	r26, 0x01	; 1
     5f6:	f1 f7       	brne	.-4      	; 0x5f4 <sendData+0x26>
     5f8:	00 c0       	rjmp	.+0      	; 0x5fa <sendData+0x2c>
     5fa:	00 00       	nop
	_delay_us(DELAY_US);
}

void sendData(uint8_t dataToSend[800])
{
	for (int i = 0; i < dataLength; i++)
     5fc:	01 96       	adiw	r24, 0x01	; 1
     5fe:	20 91 ae 02 	lds	r18, 0x02AE
     602:	30 91 af 02 	lds	r19, 0x02AF
     606:	82 17       	cp	r24, r18
     608:	93 07       	cpc	r25, r19
     60a:	64 f3       	brlt	.-40     	; 0x5e4 <sendData+0x16>
     60c:	08 95       	ret

0000060e <setFreq>:
		_delay_us(DELAY_US);
	}
}

void setFreq(uint32_t freq)
{
     60e:	4f 92       	push	r4
     610:	5f 92       	push	r5
     612:	6f 92       	push	r6
     614:	7f 92       	push	r7
     616:	8f 92       	push	r8
     618:	9f 92       	push	r9
     61a:	af 92       	push	r10
     61c:	bf 92       	push	r11
     61e:	cf 92       	push	r12
     620:	df 92       	push	r13
     622:	ef 92       	push	r14
     624:	ff 92       	push	r15
     626:	0f 93       	push	r16
     628:	1f 93       	push	r17
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	00 d0       	rcall	.+0      	; 0x630 <setFreq+0x22>
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
     634:	a6 2e       	mov	r10, r22
     636:	b7 2e       	mov	r11, r23
     638:	08 2f       	mov	r16, r24
     63a:	19 2f       	mov	r17, r25
	/*
	Calculate frequency
	See datasheet for more information: http://cds.linear.com/docs/en/datasheet/69034fe.pdf (page 8)
	*/
	#ifdef DEBUG
	printf("Frequency: %" PRIu32 "\n", freq);
     63c:	9f 93       	push	r25
     63e:	8f 93       	push	r24
     640:	7f 93       	push	r23
     642:	6f 93       	push	r22
     644:	86 e0       	ldi	r24, 0x06	; 6
     646:	92 e0       	ldi	r25, 0x02	; 2
     648:	9f 93       	push	r25
     64a:	8f 93       	push	r24
     64c:	0e 94 9f 09 	call	0x133e	; 0x133e <printf>
	#endif

	uint32_t OCT = (uint32_t)floor(3.322 * log10(freq / 1039));
     650:	6a 2d       	mov	r22, r10
     652:	7b 2d       	mov	r23, r11
     654:	80 2f       	mov	r24, r16
     656:	91 2f       	mov	r25, r17
     658:	2f e0       	ldi	r18, 0x0F	; 15
     65a:	34 e0       	ldi	r19, 0x04	; 4
     65c:	40 e0       	ldi	r20, 0x00	; 0
     65e:	50 e0       	ldi	r21, 0x00	; 0
     660:	0e 94 3d 09 	call	0x127a	; 0x127a <__udivmodsi4>
     664:	ca 01       	movw	r24, r20
     666:	b9 01       	movw	r22, r18
     668:	0e 94 47 06 	call	0xc8e	; 0xc8e <__floatunsisf>
     66c:	0e 94 2d 07 	call	0xe5a	; 0xe5a <log10>
     670:	26 ea       	ldi	r18, 0xA6	; 166
     672:	3b e9       	ldi	r19, 0x9B	; 155
     674:	44 e5       	ldi	r20, 0x54	; 84
     676:	50 e4       	ldi	r21, 0x40	; 64
     678:	0e 94 85 07 	call	0xf0a	; 0xf0a <__mulsf3>
     67c:	0e 94 84 06 	call	0xd08	; 0xd08 <floor>
     680:	0e 94 18 06 	call	0xc30	; 0xc30 <__fixunssfsi>
     684:	6b 01       	movw	r12, r22
     686:	7c 01       	movw	r14, r24
	uint32_t DAC = round(2048 - (2078 * pow(2, 10 + OCT) / freq));
     688:	66 5f       	subi	r22, 0xF6	; 246
     68a:	7f 4f       	sbci	r23, 0xFF	; 255
     68c:	8f 4f       	sbci	r24, 0xFF	; 255
     68e:	9f 4f       	sbci	r25, 0xFF	; 255
     690:	0e 94 47 06 	call	0xc8e	; 0xc8e <__floatunsisf>
     694:	9b 01       	movw	r18, r22
     696:	ac 01       	movw	r20, r24
     698:	60 e0       	ldi	r22, 0x00	; 0
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	90 e4       	ldi	r25, 0x40	; 64
     6a0:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <pow>
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	30 ee       	ldi	r19, 0xE0	; 224
     6a8:	41 e0       	ldi	r20, 0x01	; 1
     6aa:	55 e4       	ldi	r21, 0x45	; 69
     6ac:	0e 94 85 07 	call	0xf0a	; 0xf0a <__mulsf3>
     6b0:	2b 01       	movw	r4, r22
     6b2:	3c 01       	movw	r6, r24
     6b4:	6a 2d       	mov	r22, r10
     6b6:	7b 2d       	mov	r23, r11
     6b8:	80 2f       	mov	r24, r16
     6ba:	91 2f       	mov	r25, r17
     6bc:	0e 94 47 06 	call	0xc8e	; 0xc8e <__floatunsisf>
     6c0:	9b 01       	movw	r18, r22
     6c2:	ac 01       	movw	r20, r24
     6c4:	c3 01       	movw	r24, r6
     6c6:	b2 01       	movw	r22, r4
     6c8:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__divsf3>
     6cc:	9b 01       	movw	r18, r22
     6ce:	ac 01       	movw	r20, r24
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	95 e4       	ldi	r25, 0x45	; 69
     6d8:	0e 94 39 05 	call	0xa72	; 0xa72 <__subsf3>
     6dc:	0e 94 42 08 	call	0x1084	; 0x1084 <round>
     6e0:	0e 94 18 06 	call	0xc30	; 0xc30 <__fixunssfsi>
     6e4:	4b 01       	movw	r8, r22
     6e6:	5c 01       	movw	r10, r24

	#ifdef DEBUG
	printf("OCT %" PRIu32 "\nDAC: %" PRIu32 "\n", OCT, DAC);
     6e8:	bf 92       	push	r11
     6ea:	af 92       	push	r10
     6ec:	9f 92       	push	r9
     6ee:	6f 93       	push	r22
     6f0:	ff 92       	push	r15
     6f2:	ef 92       	push	r14
     6f4:	df 92       	push	r13
     6f6:	cf 92       	push	r12
     6f8:	86 e1       	ldi	r24, 0x16	; 22
     6fa:	92 e0       	ldi	r25, 0x02	; 2
     6fc:	9f 93       	push	r25
     6fe:	8f 93       	push	r24
     700:	0e 94 9f 09 	call	0x133e	; 0x133e <printf>
	#endif

	uint16_t setBits = OCT << 12 | DAC << 2 | 1 << 1; // Write all the bits in one variable
     704:	86 01       	movw	r16, r12
     706:	10 2f       	mov	r17, r16
     708:	00 27       	eor	r16, r16
     70a:	12 95       	swap	r17
     70c:	10 7f       	andi	r17, 0xF0	; 240
     70e:	c4 01       	movw	r24, r8
     710:	88 0f       	add	r24, r24
     712:	99 1f       	adc	r25, r25
     714:	88 0f       	add	r24, r24
     716:	99 1f       	adc	r25, r25
     718:	08 2b       	or	r16, r24
     71a:	19 2b       	or	r17, r25
     71c:	02 60       	ori	r16, 0x02	; 2
	// Split the bits in a high and a low part
	char meleon = (setBits >> 8) & 0xff; // High part
	char mander = setBits & 0xff; // Low part

	#ifdef DEBUG // Calculate the exact frequency of the DCO
	uint32_t power = (uint32_t)round(pow(2, OCT));
     71e:	c7 01       	movw	r24, r14
     720:	b6 01       	movw	r22, r12
     722:	0e 94 47 06 	call	0xc8e	; 0xc8e <__floatunsisf>
     726:	9b 01       	movw	r18, r22
     728:	ac 01       	movw	r20, r24
     72a:	60 e0       	ldi	r22, 0x00	; 0
     72c:	70 e0       	ldi	r23, 0x00	; 0
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	90 e4       	ldi	r25, 0x40	; 64
     732:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <pow>
     736:	0e 94 42 08 	call	0x1084	; 0x1084 <round>
     73a:	0e 94 18 06 	call	0xc30	; 0xc30 <__fixunssfsi>
	double div = (double)DAC / 1024.0;
	double second = 2078 / (2 - div);

	uint32_t exactFreq = power * second;
     73e:	0e 94 47 06 	call	0xc8e	; 0xc8e <__floatunsisf>
     742:	6b 01       	movw	r12, r22
     744:	7c 01       	movw	r14, r24
	char meleon = (setBits >> 8) & 0xff; // High part
	char mander = setBits & 0xff; // Low part

	#ifdef DEBUG // Calculate the exact frequency of the DCO
	uint32_t power = (uint32_t)round(pow(2, OCT));
	double div = (double)DAC / 1024.0;
     746:	c5 01       	movw	r24, r10
     748:	b4 01       	movw	r22, r8
     74a:	0e 94 47 06 	call	0xc8e	; 0xc8e <__floatunsisf>
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	40 e8       	ldi	r20, 0x80	; 128
     754:	5a e3       	ldi	r21, 0x3A	; 58
     756:	0e 94 85 07 	call	0xf0a	; 0xf0a <__mulsf3>
     75a:	9b 01       	movw	r18, r22
     75c:	ac 01       	movw	r20, r24
	double second = 2078 / (2 - div);
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	90 e4       	ldi	r25, 0x40	; 64
     766:	0e 94 39 05 	call	0xa72	; 0xa72 <__subsf3>
     76a:	9b 01       	movw	r18, r22
     76c:	ac 01       	movw	r20, r24
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	70 ee       	ldi	r23, 0xE0	; 224
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	95 e4       	ldi	r25, 0x45	; 69
     776:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__divsf3>
     77a:	9b 01       	movw	r18, r22
     77c:	ac 01       	movw	r20, r24

	uint32_t exactFreq = power * second;
     77e:	c7 01       	movw	r24, r14
     780:	b6 01       	movw	r22, r12
     782:	0e 94 85 07 	call	0xf0a	; 0xf0a <__mulsf3>
     786:	0e 94 18 06 	call	0xc30	; 0xc30 <__fixunssfsi>

	printf("Exact frequency: %" PRIu32 "\n", exactFreq);
     78a:	9f 93       	push	r25
     78c:	8f 93       	push	r24
     78e:	7f 93       	push	r23
     790:	6f 93       	push	r22
     792:	88 e2       	ldi	r24, 0x28	; 40
     794:	92 e0       	ldi	r25, 0x02	; 2
     796:	9f 93       	push	r25
     798:	8f 93       	push	r24
     79a:	0e 94 9f 09 	call	0x133e	; 0x133e <printf>
	#endif

	uint16_t setBits = OCT << 12 | DAC << 2 | 1 << 1; // Write all the bits in one variable

	// Split the bits in a high and a low part
	char meleon = (setBits >> 8) & 0xff; // High part
     79e:	19 83       	std	Y+1, r17	; 0x01
	char mander = setBits & 0xff; // Low part
     7a0:	0a 83       	std	Y+2, r16	; 0x02
	printf("Exact frequency: %" PRIu32 "\n", exactFreq);
	#endif

	uint8_t bits[2] = {meleon, mander}; // Set the high and low part in an array

	i2c_transmit(i2cAddress << 1, bits, 2);
     7a2:	80 91 b0 02 	lds	r24, 0x02B0
     7a6:	42 e0       	ldi	r20, 0x02	; 2
     7a8:	50 e0       	ldi	r21, 0x00	; 0
     7aa:	be 01       	movw	r22, r28
     7ac:	6f 5f       	subi	r22, 0xFF	; 255
     7ae:	7f 4f       	sbci	r23, 0xFF	; 255
     7b0:	88 0f       	add	r24, r24
     7b2:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <i2c_transmit>
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	f8 94       	cli
     7ba:	de bf       	out	0x3e, r29	; 62
     7bc:	0f be       	out	0x3f, r0	; 63
     7be:	cd bf       	out	0x3d, r28	; 61
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	1f 91       	pop	r17
     7ca:	0f 91       	pop	r16
     7cc:	ff 90       	pop	r15
     7ce:	ef 90       	pop	r14
     7d0:	df 90       	pop	r13
     7d2:	cf 90       	pop	r12
     7d4:	bf 90       	pop	r11
     7d6:	af 90       	pop	r10
     7d8:	9f 90       	pop	r9
     7da:	8f 90       	pop	r8
     7dc:	7f 90       	pop	r7
     7de:	6f 90       	pop	r6
     7e0:	5f 90       	pop	r5
     7e2:	4f 90       	pop	r4
     7e4:	08 95       	ret

000007e6 <main>:
void setFreq(uint32_t freq);
void sendData(uint8_t dataToSend[800]);
void sendPing();

int main(void)
{
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	cd b7       	in	r28, 0x3d	; 61
     7ec:	de b7       	in	r29, 0x3e	; 62
     7ee:	c4 56       	subi	r28, 0x64	; 100
     7f0:	d1 09       	sbc	r29, r1
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	f8 94       	cli
     7f6:	de bf       	out	0x3e, r29	; 62
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	cd bf       	out	0x3d, r28	; 61
	// Initialize IO
	DDRB |= (1 << OUTPUT_PIN); // Set the output pin
     7fc:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= (1 << DCO_PROG_1) | (1 << DCO_PROG_2) | (1 << STATUS_LED);
     7fe:	84 b1       	in	r24, 0x04	; 4
     800:	83 62       	ori	r24, 0x23	; 35
     802:	84 b9       	out	0x04, r24	; 4

	PORTB |= (1 << STATUS_LED); // Turn on status LED
     804:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     806:	2f ef       	ldi	r18, 0xFF	; 255
     808:	89 e6       	ldi	r24, 0x69	; 105
     80a:	98 e1       	ldi	r25, 0x18	; 24
     80c:	21 50       	subi	r18, 0x01	; 1
     80e:	80 40       	sbci	r24, 0x00	; 0
     810:	90 40       	sbci	r25, 0x00	; 0
     812:	e1 f7       	brne	.-8      	; 0x80c <main+0x26>
     814:	00 c0       	rjmp	.+0      	; 0x816 <main+0x30>
     816:	00 00       	nop
	_delay_ms(500); // Wait for 500ms
	PORTB &= ~(1 << STATUS_LED); // Turn off status LED
     818:	2d 98       	cbi	0x05, 5	; 5

	USART0Init(); // Initialize USART communication
     81a:	0e 94 18 05 	call	0xa30	; 0xa30 <USART0Init>
	stdout =& usart0_str;
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	91 e0       	ldi	r25, 0x01	; 1
     822:	90 93 b4 02 	sts	0x02B4, r25
     826:	80 93 b3 02 	sts	0x02B3, r24

	i2c_init();
     82a:	0e 94 af 04 	call	0x95e	; 0x95e <i2c_init>
	
	PORTB |= (1 << DCO_PROG_1);
     82e:	28 9a       	sbi	0x05, 0	; 5
	PORTB &= ~(1 << DCO_PROG_2);
     830:	29 98       	cbi	0x05, 1	; 5
	i2cAddress = 0x17;
     832:	17 e1       	ldi	r17, 0x17	; 23
     834:	10 93 b0 02 	sts	0x02B0, r17
	setFreq(FREQ_1);
     838:	68 ec       	ldi	r22, 0xC8	; 200
     83a:	7f ea       	ldi	r23, 0xAF	; 175
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	0e 94 07 03 	call	0x60e	; 0x60e <setFreq>
	
	PORTB |= (1 << DCO_PROG_2);
     844:	29 9a       	sbi	0x05, 1	; 5
	PORTB &= ~(1 << DCO_PROG_1);
     846:	28 98       	cbi	0x05, 0	; 5
	i2cAddress = 0x17;
     848:	10 93 b0 02 	sts	0x02B0, r17
	setFreq(FREQ_2);
     84c:	68 ed       	ldi	r22, 0xD8	; 216
     84e:	76 ed       	ldi	r23, 0xD6	; 214
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	0e 94 07 03 	call	0x60e	; 0x60e <setFreq>

	PORTB |= (1 << STATUS_LED); // Turn on status LED
     858:	2d 9a       	sbi	0x05, 5	; 5
     85a:	af ef       	ldi	r26, 0xFF	; 255
     85c:	b9 e6       	ldi	r27, 0x69	; 105
     85e:	28 e1       	ldi	r18, 0x18	; 24
     860:	a1 50       	subi	r26, 0x01	; 1
     862:	b0 40       	sbci	r27, 0x00	; 0
     864:	20 40       	sbci	r18, 0x00	; 0
     866:	e1 f7       	brne	.-8      	; 0x860 <main+0x7a>
     868:	00 c0       	rjmp	.+0      	; 0x86a <main+0x84>
     86a:	00 00       	nop
	_delay_ms(500); // Wait for 500ms
	PORTB &= ~(1 << STATUS_LED); // Turn off status LED
     86c:	2d 98       	cbi	0x05, 5	; 5
     86e:	8f ef       	ldi	r24, 0xFF	; 255
     870:	99 e6       	ldi	r25, 0x69	; 105
     872:	a8 e1       	ldi	r26, 0x18	; 24
     874:	81 50       	subi	r24, 0x01	; 1
     876:	90 40       	sbci	r25, 0x00	; 0
     878:	a0 40       	sbci	r26, 0x00	; 0
     87a:	e1 f7       	brne	.-8      	; 0x874 <main+0x8e>
     87c:	00 c0       	rjmp	.+0      	; 0x87e <main+0x98>
     87e:	00 00       	nop
	_delay_ms(500); // Wait for 500ms
	PORTB |= (1 << STATUS_LED); // Turn on status LED
     880:	2d 9a       	sbi	0x05, 5	; 5
     882:	bf ef       	ldi	r27, 0xFF	; 255
     884:	29 e6       	ldi	r18, 0x69	; 105
     886:	88 e1       	ldi	r24, 0x18	; 24
     888:	b1 50       	subi	r27, 0x01	; 1
     88a:	20 40       	sbci	r18, 0x00	; 0
     88c:	80 40       	sbci	r24, 0x00	; 0
     88e:	e1 f7       	brne	.-8      	; 0x888 <main+0xa2>
     890:	00 c0       	rjmp	.+0      	; 0x892 <main+0xac>
     892:	00 00       	nop
	_delay_ms(500); // Wait for 500ms
	PORTB &= ~(1 << STATUS_LED); // Turn off status LED
     894:	2d 98       	cbi	0x05, 5	; 5

	char input[100] = "Test";
     896:	85 e0       	ldi	r24, 0x05	; 5
     898:	ee e0       	ldi	r30, 0x0E	; 14
     89a:	f1 e0       	ldi	r31, 0x01	; 1
     89c:	8e 01       	movw	r16, r28
     89e:	0f 5f       	subi	r16, 0xFF	; 255
     8a0:	1f 4f       	sbci	r17, 0xFF	; 255
     8a2:	d8 01       	movw	r26, r16
     8a4:	01 90       	ld	r0, Z+
     8a6:	0d 92       	st	X+, r0
     8a8:	8a 95       	dec	r24
     8aa:	e1 f7       	brne	.-8      	; 0x8a4 <main+0xbe>
     8ac:	fe 01       	movw	r30, r28
     8ae:	36 96       	adiw	r30, 0x06	; 6
     8b0:	8f e5       	ldi	r24, 0x5F	; 95
     8b2:	df 01       	movw	r26, r30
     8b4:	1d 92       	st	X+, r1
     8b6:	8a 95       	dec	r24
     8b8:	e9 f7       	brne	.-6      	; 0x8b4 <main+0xce>
	printf("\n\n\n\nSTART CODE WITH THIS INPUT: %s\nBAUDRATE: %i\n\n", input, OUTPUT_BAUDRATE); // Print the input string and baudrate
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	8f 93       	push	r24
     8be:	84 ef       	ldi	r24, 0xF4	; 244
     8c0:	8f 93       	push	r24
     8c2:	1f 93       	push	r17
     8c4:	0f 93       	push	r16
     8c6:	8e e3       	ldi	r24, 0x3E	; 62
     8c8:	92 e0       	ldi	r25, 0x02	; 2
     8ca:	9f 93       	push	r25
     8cc:	8f 93       	push	r24
     8ce:	0e 94 9f 09 	call	0x133e	; 0x133e <printf>

	uint8_t* dataToSend = fillDataArray(input, 0x02); // Convert data to base2
     8d2:	62 e0       	ldi	r22, 0x02	; 2
     8d4:	c8 01       	movw	r24, r16
     8d6:	0e 94 b7 01 	call	0x36e	; 0x36e <fillDataArray>
     8da:	7c 01       	movw	r14, r24
	
	unsigned int time = (1000 / OUTPUT_BAUDRATE) * dataLength;
     8dc:	00 91 ae 02 	lds	r16, 0x02AE
     8e0:	10 91 af 02 	lds	r17, 0x02AF
     8e4:	00 0f       	add	r16, r16
     8e6:	11 1f       	adc	r17, r17

	printf("Baudtime: %i\n", 1000 / OUTPUT_BAUDRATE);
     8e8:	1f 92       	push	r1
     8ea:	82 e0       	ldi	r24, 0x02	; 2
     8ec:	8f 93       	push	r24
     8ee:	80 e7       	ldi	r24, 0x70	; 112
     8f0:	92 e0       	ldi	r25, 0x02	; 2
     8f2:	9f 93       	push	r25
     8f4:	8f 93       	push	r24
     8f6:	0e 94 9f 09 	call	0x133e	; 0x133e <printf>
	printf("Time needed to send data: %ims\n", time);
     8fa:	1f 93       	push	r17
     8fc:	0f 93       	push	r16
     8fe:	2e e7       	ldi	r18, 0x7E	; 126
     900:	32 e0       	ldi	r19, 0x02	; 2
     902:	3f 93       	push	r19
     904:	2f 93       	push	r18
     906:	0e 94 9f 09 	call	0x133e	; 0x133e <printf>

	printf("datalength: %i\n", dataLength);
     90a:	80 91 af 02 	lds	r24, 0x02AF
     90e:	8f 93       	push	r24
     910:	80 91 ae 02 	lds	r24, 0x02AE
     914:	8f 93       	push	r24
     916:	2e e9       	ldi	r18, 0x9E	; 158
     918:	32 e0       	ldi	r19, 0x02	; 2
     91a:	3f 93       	push	r19
     91c:	2f 93       	push	r18
     91e:	0e 94 9f 09 	call	0x133e	; 0x133e <printf>

	PORTB &= ~(1 << OUTPUT_PIN);
     922:	28 98       	cbi	0x05, 0	; 5
     924:	bf ef       	ldi	r27, 0xFF	; 255
     926:	23 ed       	ldi	r18, 0xD3	; 211
     928:	80 e3       	ldi	r24, 0x30	; 48
     92a:	b1 50       	subi	r27, 0x01	; 1
     92c:	20 40       	sbci	r18, 0x00	; 0
     92e:	80 40       	sbci	r24, 0x00	; 0
     930:	e1 f7       	brne	.-8      	; 0x92a <__stack+0x2b>
     932:	00 c0       	rjmp	.+0      	; 0x934 <__stack+0x35>
     934:	00 00       	nop

	_delay_ms(1000);
	sendData(dataToSend);
     936:	c7 01       	movw	r24, r14
     938:	0e 94 e7 02 	call	0x5ce	; 0x5ce <sendData>
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	f8 94       	cli
     940:	de bf       	out	0x3e, r29	; 62
     942:	0f be       	out	0x3f, r0	; 63
     944:	cd bf       	out	0x3d, r28	; 61

    while (1) 
    {
		sendPing();
     946:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sendPing>
     94a:	bf ef       	ldi	r27, 0xFF	; 255
     94c:	27 ea       	ldi	r18, 0xA7	; 167
     94e:	81 e6       	ldi	r24, 0x61	; 97
     950:	b1 50       	subi	r27, 0x01	; 1
     952:	20 40       	sbci	r18, 0x00	; 0
     954:	80 40       	sbci	r24, 0x00	; 0
     956:	e1 f7       	brne	.-8      	; 0x950 <__stack+0x51>
     958:	00 c0       	rjmp	.+0      	; 0x95a <__stack+0x5b>
     95a:	00 00       	nop
     95c:	f4 cf       	rjmp	.-24     	; 0x946 <__stack+0x47>

0000095e <i2c_init>:
#include <avr/io.h>
#include <util/twi.h>

void i2c_init()
{
	TWBR = (uint8_t)TWBR_VAL;
     95e:	88 e4       	ldi	r24, 0x48	; 72
     960:	80 93 b8 00 	sts	0x00B8, r24
     964:	08 95       	ret

00000966 <i2c_start>:
}

uint8_t i2c_start(uint8_t address)
{
	// Reset TWI control register
	TWCR = 0;
     966:	ec eb       	ldi	r30, 0xBC	; 188
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	10 82       	st	Z, r1
	// Transmit START condition
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     96c:	94 ea       	ldi	r25, 0xA4	; 164
     96e:	90 83       	st	Z, r25
	// Wait for end of transmission
	while (!(TWCR & (1 << TWINT)));
     970:	90 81       	ld	r25, Z
     972:	99 23       	and	r25, r25
     974:	ec f7       	brge	.-6      	; 0x970 <i2c_start+0xa>

	// Check if the start condition was successfully transmitted
	if ((TWSR & 0xF8) != TW_START) return 1;
     976:	90 91 b9 00 	lds	r25, 0x00B9
     97a:	98 7f       	andi	r25, 0xF8	; 248
     97c:	98 30       	cpi	r25, 0x08	; 8
     97e:	a1 f4       	brne	.+40     	; 0x9a8 <i2c_start+0x42>

	// Load slave address into data register
	TWDR = address;
     980:	80 93 bb 00 	sts	0x00BB, r24
	// Start transmission of address
	TWCR = (1 << TWINT) | (1 << TWEN);
     984:	84 e8       	ldi	r24, 0x84	; 132
     986:	80 93 bc 00 	sts	0x00BC, r24
	// Wait for end of transmission
	while (!(TWCR & (1 << TWINT)));
     98a:	ec eb       	ldi	r30, 0xBC	; 188
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	80 81       	ld	r24, Z
     990:	88 23       	and	r24, r24
     992:	ec f7       	brge	.-6      	; 0x98e <i2c_start+0x28>

	// Check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
     994:	90 91 b9 00 	lds	r25, 0x00B9
     998:	98 7f       	andi	r25, 0xF8	; 248
	if ((twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK)) return 1;
     99a:	98 31       	cpi	r25, 0x18	; 24
     99c:	39 f0       	breq	.+14     	; 0x9ac <i2c_start+0x46>
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	90 34       	cpi	r25, 0x40	; 64
     9a2:	29 f4       	brne	.+10     	; 0x9ae <i2c_start+0x48>
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	08 95       	ret
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
	// Wait for end of transmission
	while (!(TWCR & (1 << TWINT)));

	// Check if the start condition was successfully transmitted
	if ((TWSR & 0xF8) != TW_START) return 1;
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	08 95       	ret

	// Check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ((twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK)) return 1;

	return 0;
     9ac:	80 e0       	ldi	r24, 0x00	; 0
}
     9ae:	08 95       	ret

000009b0 <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// Load data into data register
	TWDR = data;
     9b0:	80 93 bb 00 	sts	0x00BB, r24
	// Start transmission of data
	TWCR = (1 << TWINT) | (1 << TWEN);
     9b4:	84 e8       	ldi	r24, 0x84	; 132
     9b6:	80 93 bc 00 	sts	0x00BC, r24
	// Wait for end of transmission
	while (!(TWCR & (1 << TWINT)));
     9ba:	ec eb       	ldi	r30, 0xBC	; 188
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	80 81       	ld	r24, Z
     9c0:	88 23       	and	r24, r24
     9c2:	ec f7       	brge	.-6      	; 0x9be <i2c_write+0xe>

	if ((TWSR & 0xF8) != TW_MT_DATA_ACK) return 1;
     9c4:	90 91 b9 00 	lds	r25, 0x00B9
     9c8:	98 7f       	andi	r25, 0xF8	; 248
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	98 32       	cpi	r25, 0x28	; 40
     9ce:	09 f4       	brne	.+2      	; 0x9d2 <i2c_write+0x22>
     9d0:	80 e0       	ldi	r24, 0x00	; 0

	return 0;
}
     9d2:	08 95       	ret

000009d4 <i2c_transmit>:
	// Return received data from TWDR
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
     9d4:	cf 92       	push	r12
     9d6:	df 92       	push	r13
     9d8:	ff 92       	push	r15
     9da:	0f 93       	push	r16
     9dc:	1f 93       	push	r17
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	6b 01       	movw	r12, r22
     9e4:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
     9e6:	0e 94 b3 04 	call	0x966	; 0x966 <i2c_start>
     9ea:	f8 2e       	mov	r15, r24
     9ec:	81 11       	cpse	r24, r1
     9ee:	12 c0       	rjmp	.+36     	; 0xa14 <i2c_transmit+0x40>

	for (uint16_t i = 0; i < length; i++)
     9f0:	01 15       	cp	r16, r1
     9f2:	11 05       	cpc	r17, r1
     9f4:	59 f0       	breq	.+22     	; 0xa0c <i2c_transmit+0x38>
     9f6:	e6 01       	movw	r28, r12
     9f8:	0c 0d       	add	r16, r12
     9fa:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
     9fc:	89 91       	ld	r24, Y+
     9fe:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <i2c_write>
     a02:	81 11       	cpse	r24, r1
     a04:	0a c0       	rjmp	.+20     	; 0xa1a <i2c_transmit+0x46>

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;

	for (uint16_t i = 0; i < length; i++)
     a06:	c0 17       	cp	r28, r16
     a08:	d1 07       	cpc	r29, r17
     a0a:	c1 f7       	brne	.-16     	; 0x9fc <i2c_transmit+0x28>
}

void i2c_stop()
{
	// Transmit STOP condition
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     a0c:	84 e9       	ldi	r24, 0x94	; 148
     a0e:	80 93 bc 00 	sts	0x00BC, r24
     a12:	05 c0       	rjmp	.+10     	; 0xa1e <i2c_transmit+0x4a>
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
     a14:	ff 24       	eor	r15, r15
     a16:	f3 94       	inc	r15
     a18:	02 c0       	rjmp	.+4      	; 0xa1e <i2c_transmit+0x4a>

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     a1a:	ff 24       	eor	r15, r15
     a1c:	f3 94       	inc	r15
	}

	i2c_stop();
	
	return 0;
}
     a1e:	8f 2d       	mov	r24, r15
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	1f 91       	pop	r17
     a26:	0f 91       	pop	r16
     a28:	ff 90       	pop	r15
     a2a:	df 90       	pop	r13
     a2c:	cf 90       	pop	r12
     a2e:	08 95       	ret

00000a30 <USART0Init>:
 #include "USART.h"

 void USART0Init()
 {
	// Set baud rate
	UBRR0H = (uint8_t)(UBBR_BAUDRATE >> 8);
     a30:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)UBBR_BAUDRATE;
     a34:	10 92 c4 00 	sts	0x00C4, r1

	// Enable transmission
	UCSR0B |= (1 << TXEN0);
     a38:	e1 ec       	ldi	r30, 0xC1	; 193
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	80 81       	ld	r24, Z
     a3e:	88 60       	ori	r24, 0x08	; 8
     a40:	80 83       	st	Z, r24

	// Set frame format to 8 data bits, no parity, 1 stop bit
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
     a42:	e2 ec       	ldi	r30, 0xC2	; 194
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	80 81       	ld	r24, Z
     a48:	86 60       	ori	r24, 0x06	; 6
     a4a:	80 83       	st	Z, r24
     a4c:	08 95       	ret

00000a4e <USART0SendByte>:
 }

 int USART0SendByte(char u8Data, FILE *stream)
 {
     a4e:	cf 93       	push	r28
     a50:	c8 2f       	mov	r28, r24
	if (u8Data == '\n') USART0SendByte('\r', stream);
     a52:	8a 30       	cpi	r24, 0x0A	; 10
     a54:	19 f4       	brne	.+6      	; 0xa5c <USART0SendByte+0xe>
     a56:	8d e0       	ldi	r24, 0x0D	; 13
     a58:	0e 94 27 05 	call	0xa4e	; 0xa4e <USART0SendByte>

	// Wait while previous byte is completed
	while (!(UCSR0A & (1 << UDRE0)));
     a5c:	e0 ec       	ldi	r30, 0xC0	; 192
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	90 81       	ld	r25, Z
     a62:	95 ff       	sbrs	r25, 5
     a64:	fd cf       	rjmp	.-6      	; 0xa60 <USART0SendByte+0x12>

	// Transmit data
	UDR0 = u8Data;
     a66:	c0 93 c6 00 	sts	0x00C6, r28
	return 0;
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	cf 91       	pop	r28
     a70:	08 95       	ret

00000a72 <__subsf3>:
     a72:	50 58       	subi	r21, 0x80	; 128

00000a74 <__addsf3>:
     a74:	bb 27       	eor	r27, r27
     a76:	aa 27       	eor	r26, r26
     a78:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__addsf3x>
     a7c:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__fp_round>
     a80:	0e 94 cd 06 	call	0xd9a	; 0xd9a <__fp_pscA>
     a84:	38 f0       	brcs	.+14     	; 0xa94 <__addsf3+0x20>
     a86:	0e 94 d4 06 	call	0xda8	; 0xda8 <__fp_pscB>
     a8a:	20 f0       	brcs	.+8      	; 0xa94 <__addsf3+0x20>
     a8c:	39 f4       	brne	.+14     	; 0xa9c <__addsf3+0x28>
     a8e:	9f 3f       	cpi	r25, 0xFF	; 255
     a90:	19 f4       	brne	.+6      	; 0xa98 <__addsf3+0x24>
     a92:	26 f4       	brtc	.+8      	; 0xa9c <__addsf3+0x28>
     a94:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__fp_nan>
     a98:	0e f4       	brtc	.+2      	; 0xa9c <__addsf3+0x28>
     a9a:	e0 95       	com	r30
     a9c:	e7 fb       	bst	r30, 7
     a9e:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_inf>

00000aa2 <__addsf3x>:
     aa2:	e9 2f       	mov	r30, r25
     aa4:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__fp_split3>
     aa8:	58 f3       	brcs	.-42     	; 0xa80 <__addsf3+0xc>
     aaa:	ba 17       	cp	r27, r26
     aac:	62 07       	cpc	r22, r18
     aae:	73 07       	cpc	r23, r19
     ab0:	84 07       	cpc	r24, r20
     ab2:	95 07       	cpc	r25, r21
     ab4:	20 f0       	brcs	.+8      	; 0xabe <__addsf3x+0x1c>
     ab6:	79 f4       	brne	.+30     	; 0xad6 <__addsf3x+0x34>
     ab8:	a6 f5       	brtc	.+104    	; 0xb22 <__addsf3x+0x80>
     aba:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__fp_zero>
     abe:	0e f4       	brtc	.+2      	; 0xac2 <__addsf3x+0x20>
     ac0:	e0 95       	com	r30
     ac2:	0b 2e       	mov	r0, r27
     ac4:	ba 2f       	mov	r27, r26
     ac6:	a0 2d       	mov	r26, r0
     ac8:	0b 01       	movw	r0, r22
     aca:	b9 01       	movw	r22, r18
     acc:	90 01       	movw	r18, r0
     ace:	0c 01       	movw	r0, r24
     ad0:	ca 01       	movw	r24, r20
     ad2:	a0 01       	movw	r20, r0
     ad4:	11 24       	eor	r1, r1
     ad6:	ff 27       	eor	r31, r31
     ad8:	59 1b       	sub	r21, r25
     ada:	99 f0       	breq	.+38     	; 0xb02 <__addsf3x+0x60>
     adc:	59 3f       	cpi	r21, 0xF9	; 249
     ade:	50 f4       	brcc	.+20     	; 0xaf4 <__addsf3x+0x52>
     ae0:	50 3e       	cpi	r21, 0xE0	; 224
     ae2:	68 f1       	brcs	.+90     	; 0xb3e <__addsf3x+0x9c>
     ae4:	1a 16       	cp	r1, r26
     ae6:	f0 40       	sbci	r31, 0x00	; 0
     ae8:	a2 2f       	mov	r26, r18
     aea:	23 2f       	mov	r18, r19
     aec:	34 2f       	mov	r19, r20
     aee:	44 27       	eor	r20, r20
     af0:	58 5f       	subi	r21, 0xF8	; 248
     af2:	f3 cf       	rjmp	.-26     	; 0xada <__addsf3x+0x38>
     af4:	46 95       	lsr	r20
     af6:	37 95       	ror	r19
     af8:	27 95       	ror	r18
     afa:	a7 95       	ror	r26
     afc:	f0 40       	sbci	r31, 0x00	; 0
     afe:	53 95       	inc	r21
     b00:	c9 f7       	brne	.-14     	; 0xaf4 <__addsf3x+0x52>
     b02:	7e f4       	brtc	.+30     	; 0xb22 <__addsf3x+0x80>
     b04:	1f 16       	cp	r1, r31
     b06:	ba 0b       	sbc	r27, r26
     b08:	62 0b       	sbc	r22, r18
     b0a:	73 0b       	sbc	r23, r19
     b0c:	84 0b       	sbc	r24, r20
     b0e:	ba f0       	brmi	.+46     	; 0xb3e <__addsf3x+0x9c>
     b10:	91 50       	subi	r25, 0x01	; 1
     b12:	a1 f0       	breq	.+40     	; 0xb3c <__addsf3x+0x9a>
     b14:	ff 0f       	add	r31, r31
     b16:	bb 1f       	adc	r27, r27
     b18:	66 1f       	adc	r22, r22
     b1a:	77 1f       	adc	r23, r23
     b1c:	88 1f       	adc	r24, r24
     b1e:	c2 f7       	brpl	.-16     	; 0xb10 <__addsf3x+0x6e>
     b20:	0e c0       	rjmp	.+28     	; 0xb3e <__addsf3x+0x9c>
     b22:	ba 0f       	add	r27, r26
     b24:	62 1f       	adc	r22, r18
     b26:	73 1f       	adc	r23, r19
     b28:	84 1f       	adc	r24, r20
     b2a:	48 f4       	brcc	.+18     	; 0xb3e <__addsf3x+0x9c>
     b2c:	87 95       	ror	r24
     b2e:	77 95       	ror	r23
     b30:	67 95       	ror	r22
     b32:	b7 95       	ror	r27
     b34:	f7 95       	ror	r31
     b36:	9e 3f       	cpi	r25, 0xFE	; 254
     b38:	08 f0       	brcs	.+2      	; 0xb3c <__addsf3x+0x9a>
     b3a:	b0 cf       	rjmp	.-160    	; 0xa9c <__addsf3+0x28>
     b3c:	93 95       	inc	r25
     b3e:	88 0f       	add	r24, r24
     b40:	08 f0       	brcs	.+2      	; 0xb44 <__addsf3x+0xa2>
     b42:	99 27       	eor	r25, r25
     b44:	ee 0f       	add	r30, r30
     b46:	97 95       	ror	r25
     b48:	87 95       	ror	r24
     b4a:	08 95       	ret

00000b4c <__divsf3>:
     b4c:	0e 94 ba 05 	call	0xb74	; 0xb74 <__divsf3x>
     b50:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__fp_round>
     b54:	0e 94 d4 06 	call	0xda8	; 0xda8 <__fp_pscB>
     b58:	58 f0       	brcs	.+22     	; 0xb70 <__divsf3+0x24>
     b5a:	0e 94 cd 06 	call	0xd9a	; 0xd9a <__fp_pscA>
     b5e:	40 f0       	brcs	.+16     	; 0xb70 <__divsf3+0x24>
     b60:	29 f4       	brne	.+10     	; 0xb6c <__divsf3+0x20>
     b62:	5f 3f       	cpi	r21, 0xFF	; 255
     b64:	29 f0       	breq	.+10     	; 0xb70 <__divsf3+0x24>
     b66:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_inf>
     b6a:	51 11       	cpse	r21, r1
     b6c:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__fp_szero>
     b70:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__fp_nan>

00000b74 <__divsf3x>:
     b74:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__fp_split3>
     b78:	68 f3       	brcs	.-38     	; 0xb54 <__divsf3+0x8>

00000b7a <__divsf3_pse>:
     b7a:	99 23       	and	r25, r25
     b7c:	b1 f3       	breq	.-20     	; 0xb6a <__divsf3+0x1e>
     b7e:	55 23       	and	r21, r21
     b80:	91 f3       	breq	.-28     	; 0xb66 <__divsf3+0x1a>
     b82:	95 1b       	sub	r25, r21
     b84:	55 0b       	sbc	r21, r21
     b86:	bb 27       	eor	r27, r27
     b88:	aa 27       	eor	r26, r26
     b8a:	62 17       	cp	r22, r18
     b8c:	73 07       	cpc	r23, r19
     b8e:	84 07       	cpc	r24, r20
     b90:	38 f0       	brcs	.+14     	; 0xba0 <__divsf3_pse+0x26>
     b92:	9f 5f       	subi	r25, 0xFF	; 255
     b94:	5f 4f       	sbci	r21, 0xFF	; 255
     b96:	22 0f       	add	r18, r18
     b98:	33 1f       	adc	r19, r19
     b9a:	44 1f       	adc	r20, r20
     b9c:	aa 1f       	adc	r26, r26
     b9e:	a9 f3       	breq	.-22     	; 0xb8a <__divsf3_pse+0x10>
     ba0:	35 d0       	rcall	.+106    	; 0xc0c <__divsf3_pse+0x92>
     ba2:	0e 2e       	mov	r0, r30
     ba4:	3a f0       	brmi	.+14     	; 0xbb4 <__divsf3_pse+0x3a>
     ba6:	e0 e8       	ldi	r30, 0x80	; 128
     ba8:	32 d0       	rcall	.+100    	; 0xc0e <__divsf3_pse+0x94>
     baa:	91 50       	subi	r25, 0x01	; 1
     bac:	50 40       	sbci	r21, 0x00	; 0
     bae:	e6 95       	lsr	r30
     bb0:	00 1c       	adc	r0, r0
     bb2:	ca f7       	brpl	.-14     	; 0xba6 <__divsf3_pse+0x2c>
     bb4:	2b d0       	rcall	.+86     	; 0xc0c <__divsf3_pse+0x92>
     bb6:	fe 2f       	mov	r31, r30
     bb8:	29 d0       	rcall	.+82     	; 0xc0c <__divsf3_pse+0x92>
     bba:	66 0f       	add	r22, r22
     bbc:	77 1f       	adc	r23, r23
     bbe:	88 1f       	adc	r24, r24
     bc0:	bb 1f       	adc	r27, r27
     bc2:	26 17       	cp	r18, r22
     bc4:	37 07       	cpc	r19, r23
     bc6:	48 07       	cpc	r20, r24
     bc8:	ab 07       	cpc	r26, r27
     bca:	b0 e8       	ldi	r27, 0x80	; 128
     bcc:	09 f0       	breq	.+2      	; 0xbd0 <__divsf3_pse+0x56>
     bce:	bb 0b       	sbc	r27, r27
     bd0:	80 2d       	mov	r24, r0
     bd2:	bf 01       	movw	r22, r30
     bd4:	ff 27       	eor	r31, r31
     bd6:	93 58       	subi	r25, 0x83	; 131
     bd8:	5f 4f       	sbci	r21, 0xFF	; 255
     bda:	3a f0       	brmi	.+14     	; 0xbea <__divsf3_pse+0x70>
     bdc:	9e 3f       	cpi	r25, 0xFE	; 254
     bde:	51 05       	cpc	r21, r1
     be0:	78 f0       	brcs	.+30     	; 0xc00 <__divsf3_pse+0x86>
     be2:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_inf>
     be6:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__fp_szero>
     bea:	5f 3f       	cpi	r21, 0xFF	; 255
     bec:	e4 f3       	brlt	.-8      	; 0xbe6 <__divsf3_pse+0x6c>
     bee:	98 3e       	cpi	r25, 0xE8	; 232
     bf0:	d4 f3       	brlt	.-12     	; 0xbe6 <__divsf3_pse+0x6c>
     bf2:	86 95       	lsr	r24
     bf4:	77 95       	ror	r23
     bf6:	67 95       	ror	r22
     bf8:	b7 95       	ror	r27
     bfa:	f7 95       	ror	r31
     bfc:	9f 5f       	subi	r25, 0xFF	; 255
     bfe:	c9 f7       	brne	.-14     	; 0xbf2 <__divsf3_pse+0x78>
     c00:	88 0f       	add	r24, r24
     c02:	91 1d       	adc	r25, r1
     c04:	96 95       	lsr	r25
     c06:	87 95       	ror	r24
     c08:	97 f9       	bld	r25, 7
     c0a:	08 95       	ret
     c0c:	e1 e0       	ldi	r30, 0x01	; 1
     c0e:	66 0f       	add	r22, r22
     c10:	77 1f       	adc	r23, r23
     c12:	88 1f       	adc	r24, r24
     c14:	bb 1f       	adc	r27, r27
     c16:	62 17       	cp	r22, r18
     c18:	73 07       	cpc	r23, r19
     c1a:	84 07       	cpc	r24, r20
     c1c:	ba 07       	cpc	r27, r26
     c1e:	20 f0       	brcs	.+8      	; 0xc28 <__divsf3_pse+0xae>
     c20:	62 1b       	sub	r22, r18
     c22:	73 0b       	sbc	r23, r19
     c24:	84 0b       	sbc	r24, r20
     c26:	ba 0b       	sbc	r27, r26
     c28:	ee 1f       	adc	r30, r30
     c2a:	88 f7       	brcc	.-30     	; 0xc0e <__divsf3_pse+0x94>
     c2c:	e0 95       	com	r30
     c2e:	08 95       	ret

00000c30 <__fixunssfsi>:
     c30:	0e 94 f4 06 	call	0xde8	; 0xde8 <__fp_splitA>
     c34:	88 f0       	brcs	.+34     	; 0xc58 <__fixunssfsi+0x28>
     c36:	9f 57       	subi	r25, 0x7F	; 127
     c38:	98 f0       	brcs	.+38     	; 0xc60 <__fixunssfsi+0x30>
     c3a:	b9 2f       	mov	r27, r25
     c3c:	99 27       	eor	r25, r25
     c3e:	b7 51       	subi	r27, 0x17	; 23
     c40:	b0 f0       	brcs	.+44     	; 0xc6e <__fixunssfsi+0x3e>
     c42:	e1 f0       	breq	.+56     	; 0xc7c <__fixunssfsi+0x4c>
     c44:	66 0f       	add	r22, r22
     c46:	77 1f       	adc	r23, r23
     c48:	88 1f       	adc	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	1a f0       	brmi	.+6      	; 0xc54 <__fixunssfsi+0x24>
     c4e:	ba 95       	dec	r27
     c50:	c9 f7       	brne	.-14     	; 0xc44 <__fixunssfsi+0x14>
     c52:	14 c0       	rjmp	.+40     	; 0xc7c <__fixunssfsi+0x4c>
     c54:	b1 30       	cpi	r27, 0x01	; 1
     c56:	91 f0       	breq	.+36     	; 0xc7c <__fixunssfsi+0x4c>
     c58:	0e 94 26 07 	call	0xe4c	; 0xe4c <__fp_zero>
     c5c:	b1 e0       	ldi	r27, 0x01	; 1
     c5e:	08 95       	ret
     c60:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__fp_zero>
     c64:	67 2f       	mov	r22, r23
     c66:	78 2f       	mov	r23, r24
     c68:	88 27       	eor	r24, r24
     c6a:	b8 5f       	subi	r27, 0xF8	; 248
     c6c:	39 f0       	breq	.+14     	; 0xc7c <__fixunssfsi+0x4c>
     c6e:	b9 3f       	cpi	r27, 0xF9	; 249
     c70:	cc f3       	brlt	.-14     	; 0xc64 <__fixunssfsi+0x34>
     c72:	86 95       	lsr	r24
     c74:	77 95       	ror	r23
     c76:	67 95       	ror	r22
     c78:	b3 95       	inc	r27
     c7a:	d9 f7       	brne	.-10     	; 0xc72 <__fixunssfsi+0x42>
     c7c:	3e f4       	brtc	.+14     	; 0xc8c <__fixunssfsi+0x5c>
     c7e:	90 95       	com	r25
     c80:	80 95       	com	r24
     c82:	70 95       	com	r23
     c84:	61 95       	neg	r22
     c86:	7f 4f       	sbci	r23, 0xFF	; 255
     c88:	8f 4f       	sbci	r24, 0xFF	; 255
     c8a:	9f 4f       	sbci	r25, 0xFF	; 255
     c8c:	08 95       	ret

00000c8e <__floatunsisf>:
     c8e:	e8 94       	clt
     c90:	09 c0       	rjmp	.+18     	; 0xca4 <__floatsisf+0x12>

00000c92 <__floatsisf>:
     c92:	97 fb       	bst	r25, 7
     c94:	3e f4       	brtc	.+14     	; 0xca4 <__floatsisf+0x12>
     c96:	90 95       	com	r25
     c98:	80 95       	com	r24
     c9a:	70 95       	com	r23
     c9c:	61 95       	neg	r22
     c9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ca0:	8f 4f       	sbci	r24, 0xFF	; 255
     ca2:	9f 4f       	sbci	r25, 0xFF	; 255
     ca4:	99 23       	and	r25, r25
     ca6:	a9 f0       	breq	.+42     	; 0xcd2 <__floatsisf+0x40>
     ca8:	f9 2f       	mov	r31, r25
     caa:	96 e9       	ldi	r25, 0x96	; 150
     cac:	bb 27       	eor	r27, r27
     cae:	93 95       	inc	r25
     cb0:	f6 95       	lsr	r31
     cb2:	87 95       	ror	r24
     cb4:	77 95       	ror	r23
     cb6:	67 95       	ror	r22
     cb8:	b7 95       	ror	r27
     cba:	f1 11       	cpse	r31, r1
     cbc:	f8 cf       	rjmp	.-16     	; 0xcae <__floatsisf+0x1c>
     cbe:	fa f4       	brpl	.+62     	; 0xcfe <__floatsisf+0x6c>
     cc0:	bb 0f       	add	r27, r27
     cc2:	11 f4       	brne	.+4      	; 0xcc8 <__floatsisf+0x36>
     cc4:	60 ff       	sbrs	r22, 0
     cc6:	1b c0       	rjmp	.+54     	; 0xcfe <__floatsisf+0x6c>
     cc8:	6f 5f       	subi	r22, 0xFF	; 255
     cca:	7f 4f       	sbci	r23, 0xFF	; 255
     ccc:	8f 4f       	sbci	r24, 0xFF	; 255
     cce:	9f 4f       	sbci	r25, 0xFF	; 255
     cd0:	16 c0       	rjmp	.+44     	; 0xcfe <__floatsisf+0x6c>
     cd2:	88 23       	and	r24, r24
     cd4:	11 f0       	breq	.+4      	; 0xcda <__floatsisf+0x48>
     cd6:	96 e9       	ldi	r25, 0x96	; 150
     cd8:	11 c0       	rjmp	.+34     	; 0xcfc <__floatsisf+0x6a>
     cda:	77 23       	and	r23, r23
     cdc:	21 f0       	breq	.+8      	; 0xce6 <__floatsisf+0x54>
     cde:	9e e8       	ldi	r25, 0x8E	; 142
     ce0:	87 2f       	mov	r24, r23
     ce2:	76 2f       	mov	r23, r22
     ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <__floatsisf+0x5e>
     ce6:	66 23       	and	r22, r22
     ce8:	71 f0       	breq	.+28     	; 0xd06 <__floatsisf+0x74>
     cea:	96 e8       	ldi	r25, 0x86	; 134
     cec:	86 2f       	mov	r24, r22
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	60 e0       	ldi	r22, 0x00	; 0
     cf2:	2a f0       	brmi	.+10     	; 0xcfe <__floatsisf+0x6c>
     cf4:	9a 95       	dec	r25
     cf6:	66 0f       	add	r22, r22
     cf8:	77 1f       	adc	r23, r23
     cfa:	88 1f       	adc	r24, r24
     cfc:	da f7       	brpl	.-10     	; 0xcf4 <__floatsisf+0x62>
     cfe:	88 0f       	add	r24, r24
     d00:	96 95       	lsr	r25
     d02:	87 95       	ror	r24
     d04:	97 f9       	bld	r25, 7
     d06:	08 95       	ret

00000d08 <floor>:
     d08:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__fp_trunc>
     d0c:	90 f0       	brcs	.+36     	; 0xd32 <floor+0x2a>
     d0e:	9f 37       	cpi	r25, 0x7F	; 127
     d10:	48 f4       	brcc	.+18     	; 0xd24 <floor+0x1c>
     d12:	91 11       	cpse	r25, r1
     d14:	16 f0       	brts	.+4      	; 0xd1a <floor+0x12>
     d16:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__fp_szero>
     d1a:	60 e0       	ldi	r22, 0x00	; 0
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	80 e8       	ldi	r24, 0x80	; 128
     d20:	9f eb       	ldi	r25, 0xBF	; 191
     d22:	08 95       	ret
     d24:	26 f4       	brtc	.+8      	; 0xd2e <floor+0x26>
     d26:	1b 16       	cp	r1, r27
     d28:	61 1d       	adc	r22, r1
     d2a:	71 1d       	adc	r23, r1
     d2c:	81 1d       	adc	r24, r1
     d2e:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__fp_mintl>
     d32:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__fp_mpack>

00000d36 <__fp_inf>:
     d36:	97 f9       	bld	r25, 7
     d38:	9f 67       	ori	r25, 0x7F	; 127
     d3a:	80 e8       	ldi	r24, 0x80	; 128
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	08 95       	ret

00000d42 <__fp_mintl>:
     d42:	88 23       	and	r24, r24
     d44:	71 f4       	brne	.+28     	; 0xd62 <__fp_mintl+0x20>
     d46:	77 23       	and	r23, r23
     d48:	21 f0       	breq	.+8      	; 0xd52 <__fp_mintl+0x10>
     d4a:	98 50       	subi	r25, 0x08	; 8
     d4c:	87 2b       	or	r24, r23
     d4e:	76 2f       	mov	r23, r22
     d50:	07 c0       	rjmp	.+14     	; 0xd60 <__fp_mintl+0x1e>
     d52:	66 23       	and	r22, r22
     d54:	11 f4       	brne	.+4      	; 0xd5a <__fp_mintl+0x18>
     d56:	99 27       	eor	r25, r25
     d58:	0d c0       	rjmp	.+26     	; 0xd74 <__fp_mintl+0x32>
     d5a:	90 51       	subi	r25, 0x10	; 16
     d5c:	86 2b       	or	r24, r22
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	2a f0       	brmi	.+10     	; 0xd6e <__fp_mintl+0x2c>
     d64:	9a 95       	dec	r25
     d66:	66 0f       	add	r22, r22
     d68:	77 1f       	adc	r23, r23
     d6a:	88 1f       	adc	r24, r24
     d6c:	da f7       	brpl	.-10     	; 0xd64 <__fp_mintl+0x22>
     d6e:	88 0f       	add	r24, r24
     d70:	96 95       	lsr	r25
     d72:	87 95       	ror	r24
     d74:	97 f9       	bld	r25, 7
     d76:	08 95       	ret

00000d78 <__fp_mpack>:
     d78:	9f 3f       	cpi	r25, 0xFF	; 255
     d7a:	31 f0       	breq	.+12     	; 0xd88 <__fp_mpack_finite+0xc>

00000d7c <__fp_mpack_finite>:
     d7c:	91 50       	subi	r25, 0x01	; 1
     d7e:	20 f4       	brcc	.+8      	; 0xd88 <__fp_mpack_finite+0xc>
     d80:	87 95       	ror	r24
     d82:	77 95       	ror	r23
     d84:	67 95       	ror	r22
     d86:	b7 95       	ror	r27
     d88:	88 0f       	add	r24, r24
     d8a:	91 1d       	adc	r25, r1
     d8c:	96 95       	lsr	r25
     d8e:	87 95       	ror	r24
     d90:	97 f9       	bld	r25, 7
     d92:	08 95       	ret

00000d94 <__fp_nan>:
     d94:	9f ef       	ldi	r25, 0xFF	; 255
     d96:	80 ec       	ldi	r24, 0xC0	; 192
     d98:	08 95       	ret

00000d9a <__fp_pscA>:
     d9a:	00 24       	eor	r0, r0
     d9c:	0a 94       	dec	r0
     d9e:	16 16       	cp	r1, r22
     da0:	17 06       	cpc	r1, r23
     da2:	18 06       	cpc	r1, r24
     da4:	09 06       	cpc	r0, r25
     da6:	08 95       	ret

00000da8 <__fp_pscB>:
     da8:	00 24       	eor	r0, r0
     daa:	0a 94       	dec	r0
     dac:	12 16       	cp	r1, r18
     dae:	13 06       	cpc	r1, r19
     db0:	14 06       	cpc	r1, r20
     db2:	05 06       	cpc	r0, r21
     db4:	08 95       	ret

00000db6 <__fp_round>:
     db6:	09 2e       	mov	r0, r25
     db8:	03 94       	inc	r0
     dba:	00 0c       	add	r0, r0
     dbc:	11 f4       	brne	.+4      	; 0xdc2 <__fp_round+0xc>
     dbe:	88 23       	and	r24, r24
     dc0:	52 f0       	brmi	.+20     	; 0xdd6 <__fp_round+0x20>
     dc2:	bb 0f       	add	r27, r27
     dc4:	40 f4       	brcc	.+16     	; 0xdd6 <__fp_round+0x20>
     dc6:	bf 2b       	or	r27, r31
     dc8:	11 f4       	brne	.+4      	; 0xdce <__fp_round+0x18>
     dca:	60 ff       	sbrs	r22, 0
     dcc:	04 c0       	rjmp	.+8      	; 0xdd6 <__fp_round+0x20>
     dce:	6f 5f       	subi	r22, 0xFF	; 255
     dd0:	7f 4f       	sbci	r23, 0xFF	; 255
     dd2:	8f 4f       	sbci	r24, 0xFF	; 255
     dd4:	9f 4f       	sbci	r25, 0xFF	; 255
     dd6:	08 95       	ret

00000dd8 <__fp_split3>:
     dd8:	57 fd       	sbrc	r21, 7
     dda:	90 58       	subi	r25, 0x80	; 128
     ddc:	44 0f       	add	r20, r20
     dde:	55 1f       	adc	r21, r21
     de0:	59 f0       	breq	.+22     	; 0xdf8 <__fp_splitA+0x10>
     de2:	5f 3f       	cpi	r21, 0xFF	; 255
     de4:	71 f0       	breq	.+28     	; 0xe02 <__fp_splitA+0x1a>
     de6:	47 95       	ror	r20

00000de8 <__fp_splitA>:
     de8:	88 0f       	add	r24, r24
     dea:	97 fb       	bst	r25, 7
     dec:	99 1f       	adc	r25, r25
     dee:	61 f0       	breq	.+24     	; 0xe08 <__fp_splitA+0x20>
     df0:	9f 3f       	cpi	r25, 0xFF	; 255
     df2:	79 f0       	breq	.+30     	; 0xe12 <__fp_splitA+0x2a>
     df4:	87 95       	ror	r24
     df6:	08 95       	ret
     df8:	12 16       	cp	r1, r18
     dfa:	13 06       	cpc	r1, r19
     dfc:	14 06       	cpc	r1, r20
     dfe:	55 1f       	adc	r21, r21
     e00:	f2 cf       	rjmp	.-28     	; 0xde6 <__fp_split3+0xe>
     e02:	46 95       	lsr	r20
     e04:	f1 df       	rcall	.-30     	; 0xde8 <__fp_splitA>
     e06:	08 c0       	rjmp	.+16     	; 0xe18 <__fp_splitA+0x30>
     e08:	16 16       	cp	r1, r22
     e0a:	17 06       	cpc	r1, r23
     e0c:	18 06       	cpc	r1, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	f1 cf       	rjmp	.-30     	; 0xdf4 <__fp_splitA+0xc>
     e12:	86 95       	lsr	r24
     e14:	71 05       	cpc	r23, r1
     e16:	61 05       	cpc	r22, r1
     e18:	08 94       	sec
     e1a:	08 95       	ret

00000e1c <__fp_trunc>:
     e1c:	0e 94 f4 06 	call	0xde8	; 0xde8 <__fp_splitA>
     e20:	a0 f0       	brcs	.+40     	; 0xe4a <__fp_trunc+0x2e>
     e22:	be e7       	ldi	r27, 0x7E	; 126
     e24:	b9 17       	cp	r27, r25
     e26:	88 f4       	brcc	.+34     	; 0xe4a <__fp_trunc+0x2e>
     e28:	bb 27       	eor	r27, r27
     e2a:	9f 38       	cpi	r25, 0x8F	; 143
     e2c:	60 f4       	brcc	.+24     	; 0xe46 <__fp_trunc+0x2a>
     e2e:	16 16       	cp	r1, r22
     e30:	b1 1d       	adc	r27, r1
     e32:	67 2f       	mov	r22, r23
     e34:	78 2f       	mov	r23, r24
     e36:	88 27       	eor	r24, r24
     e38:	98 5f       	subi	r25, 0xF8	; 248
     e3a:	f7 cf       	rjmp	.-18     	; 0xe2a <__fp_trunc+0xe>
     e3c:	86 95       	lsr	r24
     e3e:	77 95       	ror	r23
     e40:	67 95       	ror	r22
     e42:	b1 1d       	adc	r27, r1
     e44:	93 95       	inc	r25
     e46:	96 39       	cpi	r25, 0x96	; 150
     e48:	c8 f3       	brcs	.-14     	; 0xe3c <__fp_trunc+0x20>
     e4a:	08 95       	ret

00000e4c <__fp_zero>:
     e4c:	e8 94       	clt

00000e4e <__fp_szero>:
     e4e:	bb 27       	eor	r27, r27
     e50:	66 27       	eor	r22, r22
     e52:	77 27       	eor	r23, r23
     e54:	cb 01       	movw	r24, r22
     e56:	97 f9       	bld	r25, 7
     e58:	08 95       	ret

00000e5a <log10>:
     e5a:	0e 94 3d 07 	call	0xe7a	; 0xe7a <log>
     e5e:	29 ed       	ldi	r18, 0xD9	; 217
     e60:	3b e5       	ldi	r19, 0x5B	; 91
     e62:	4e ed       	ldi	r20, 0xDE	; 222
     e64:	5e e3       	ldi	r21, 0x3E	; 62
     e66:	0c 94 85 07 	jmp	0xf0a	; 0xf0a <__mulsf3>
     e6a:	16 f0       	brts	.+4      	; 0xe70 <log10+0x16>
     e6c:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__fp_mpack>
     e70:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__fp_nan>
     e74:	68 94       	set
     e76:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_inf>

00000e7a <log>:
     e7a:	0e 94 f4 06 	call	0xde8	; 0xde8 <__fp_splitA>
     e7e:	a8 f3       	brcs	.-22     	; 0xe6a <log10+0x10>
     e80:	99 23       	and	r25, r25
     e82:	c1 f3       	breq	.-16     	; 0xe74 <log10+0x1a>
     e84:	ae f3       	brts	.-22     	; 0xe70 <log10+0x16>
     e86:	df 93       	push	r29
     e88:	cf 93       	push	r28
     e8a:	1f 93       	push	r17
     e8c:	0f 93       	push	r16
     e8e:	ff 92       	push	r15
     e90:	c9 2f       	mov	r28, r25
     e92:	dd 27       	eor	r29, r29
     e94:	88 23       	and	r24, r24
     e96:	2a f0       	brmi	.+10     	; 0xea2 <log+0x28>
     e98:	21 97       	sbiw	r28, 0x01	; 1
     e9a:	66 0f       	add	r22, r22
     e9c:	77 1f       	adc	r23, r23
     e9e:	88 1f       	adc	r24, r24
     ea0:	da f7       	brpl	.-10     	; 0xe98 <log+0x1e>
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	40 e8       	ldi	r20, 0x80	; 128
     ea8:	5f eb       	ldi	r21, 0xBF	; 191
     eaa:	9f e3       	ldi	r25, 0x3F	; 63
     eac:	88 39       	cpi	r24, 0x98	; 152
     eae:	20 f0       	brcs	.+8      	; 0xeb8 <log+0x3e>
     eb0:	80 3e       	cpi	r24, 0xE0	; 224
     eb2:	38 f0       	brcs	.+14     	; 0xec2 <log+0x48>
     eb4:	21 96       	adiw	r28, 0x01	; 1
     eb6:	8f 77       	andi	r24, 0x7F	; 127
     eb8:	0e 94 3a 05 	call	0xa74	; 0xa74 <__addsf3>
     ebc:	e8 e6       	ldi	r30, 0x68	; 104
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	04 c0       	rjmp	.+8      	; 0xeca <log+0x50>
     ec2:	0e 94 3a 05 	call	0xa74	; 0xa74 <__addsf3>
     ec6:	e5 e9       	ldi	r30, 0x95	; 149
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	0e 94 a0 08 	call	0x1140	; 0x1140 <__fp_powser>
     ece:	8b 01       	movw	r16, r22
     ed0:	be 01       	movw	r22, r28
     ed2:	ec 01       	movw	r28, r24
     ed4:	fb 2e       	mov	r15, r27
     ed6:	6f 57       	subi	r22, 0x7F	; 127
     ed8:	71 09       	sbc	r23, r1
     eda:	75 95       	asr	r23
     edc:	77 1f       	adc	r23, r23
     ede:	88 0b       	sbc	r24, r24
     ee0:	99 0b       	sbc	r25, r25
     ee2:	0e 94 49 06 	call	0xc92	; 0xc92 <__floatsisf>
     ee6:	28 e1       	ldi	r18, 0x18	; 24
     ee8:	32 e7       	ldi	r19, 0x72	; 114
     eea:	41 e3       	ldi	r20, 0x31	; 49
     eec:	5f e3       	ldi	r21, 0x3F	; 63
     eee:	0e 94 98 07 	call	0xf30	; 0xf30 <__mulsf3x>
     ef2:	af 2d       	mov	r26, r15
     ef4:	98 01       	movw	r18, r16
     ef6:	ae 01       	movw	r20, r28
     ef8:	ff 90       	pop	r15
     efa:	0f 91       	pop	r16
     efc:	1f 91       	pop	r17
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__addsf3x>
     f06:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__fp_round>

00000f0a <__mulsf3>:
     f0a:	0e 94 98 07 	call	0xf30	; 0xf30 <__mulsf3x>
     f0e:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__fp_round>
     f12:	0e 94 cd 06 	call	0xd9a	; 0xd9a <__fp_pscA>
     f16:	38 f0       	brcs	.+14     	; 0xf26 <__mulsf3+0x1c>
     f18:	0e 94 d4 06 	call	0xda8	; 0xda8 <__fp_pscB>
     f1c:	20 f0       	brcs	.+8      	; 0xf26 <__mulsf3+0x1c>
     f1e:	95 23       	and	r25, r21
     f20:	11 f0       	breq	.+4      	; 0xf26 <__mulsf3+0x1c>
     f22:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_inf>
     f26:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__fp_nan>
     f2a:	11 24       	eor	r1, r1
     f2c:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__fp_szero>

00000f30 <__mulsf3x>:
     f30:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__fp_split3>
     f34:	70 f3       	brcs	.-36     	; 0xf12 <__mulsf3+0x8>

00000f36 <__mulsf3_pse>:
     f36:	95 9f       	mul	r25, r21
     f38:	c1 f3       	breq	.-16     	; 0xf2a <__mulsf3+0x20>
     f3a:	95 0f       	add	r25, r21
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	55 1f       	adc	r21, r21
     f40:	62 9f       	mul	r22, r18
     f42:	f0 01       	movw	r30, r0
     f44:	72 9f       	mul	r23, r18
     f46:	bb 27       	eor	r27, r27
     f48:	f0 0d       	add	r31, r0
     f4a:	b1 1d       	adc	r27, r1
     f4c:	63 9f       	mul	r22, r19
     f4e:	aa 27       	eor	r26, r26
     f50:	f0 0d       	add	r31, r0
     f52:	b1 1d       	adc	r27, r1
     f54:	aa 1f       	adc	r26, r26
     f56:	64 9f       	mul	r22, r20
     f58:	66 27       	eor	r22, r22
     f5a:	b0 0d       	add	r27, r0
     f5c:	a1 1d       	adc	r26, r1
     f5e:	66 1f       	adc	r22, r22
     f60:	82 9f       	mul	r24, r18
     f62:	22 27       	eor	r18, r18
     f64:	b0 0d       	add	r27, r0
     f66:	a1 1d       	adc	r26, r1
     f68:	62 1f       	adc	r22, r18
     f6a:	73 9f       	mul	r23, r19
     f6c:	b0 0d       	add	r27, r0
     f6e:	a1 1d       	adc	r26, r1
     f70:	62 1f       	adc	r22, r18
     f72:	83 9f       	mul	r24, r19
     f74:	a0 0d       	add	r26, r0
     f76:	61 1d       	adc	r22, r1
     f78:	22 1f       	adc	r18, r18
     f7a:	74 9f       	mul	r23, r20
     f7c:	33 27       	eor	r19, r19
     f7e:	a0 0d       	add	r26, r0
     f80:	61 1d       	adc	r22, r1
     f82:	23 1f       	adc	r18, r19
     f84:	84 9f       	mul	r24, r20
     f86:	60 0d       	add	r22, r0
     f88:	21 1d       	adc	r18, r1
     f8a:	82 2f       	mov	r24, r18
     f8c:	76 2f       	mov	r23, r22
     f8e:	6a 2f       	mov	r22, r26
     f90:	11 24       	eor	r1, r1
     f92:	9f 57       	subi	r25, 0x7F	; 127
     f94:	50 40       	sbci	r21, 0x00	; 0
     f96:	9a f0       	brmi	.+38     	; 0xfbe <__mulsf3_pse+0x88>
     f98:	f1 f0       	breq	.+60     	; 0xfd6 <__mulsf3_pse+0xa0>
     f9a:	88 23       	and	r24, r24
     f9c:	4a f0       	brmi	.+18     	; 0xfb0 <__mulsf3_pse+0x7a>
     f9e:	ee 0f       	add	r30, r30
     fa0:	ff 1f       	adc	r31, r31
     fa2:	bb 1f       	adc	r27, r27
     fa4:	66 1f       	adc	r22, r22
     fa6:	77 1f       	adc	r23, r23
     fa8:	88 1f       	adc	r24, r24
     faa:	91 50       	subi	r25, 0x01	; 1
     fac:	50 40       	sbci	r21, 0x00	; 0
     fae:	a9 f7       	brne	.-22     	; 0xf9a <__mulsf3_pse+0x64>
     fb0:	9e 3f       	cpi	r25, 0xFE	; 254
     fb2:	51 05       	cpc	r21, r1
     fb4:	80 f0       	brcs	.+32     	; 0xfd6 <__mulsf3_pse+0xa0>
     fb6:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_inf>
     fba:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__fp_szero>
     fbe:	5f 3f       	cpi	r21, 0xFF	; 255
     fc0:	e4 f3       	brlt	.-8      	; 0xfba <__mulsf3_pse+0x84>
     fc2:	98 3e       	cpi	r25, 0xE8	; 232
     fc4:	d4 f3       	brlt	.-12     	; 0xfba <__mulsf3_pse+0x84>
     fc6:	86 95       	lsr	r24
     fc8:	77 95       	ror	r23
     fca:	67 95       	ror	r22
     fcc:	b7 95       	ror	r27
     fce:	f7 95       	ror	r31
     fd0:	e7 95       	ror	r30
     fd2:	9f 5f       	subi	r25, 0xFF	; 255
     fd4:	c1 f7       	brne	.-16     	; 0xfc6 <__mulsf3_pse+0x90>
     fd6:	fe 2b       	or	r31, r30
     fd8:	88 0f       	add	r24, r24
     fda:	91 1d       	adc	r25, r1
     fdc:	96 95       	lsr	r25
     fde:	87 95       	ror	r24
     fe0:	97 f9       	bld	r25, 7
     fe2:	08 95       	ret

00000fe4 <pow>:
     fe4:	fa 01       	movw	r30, r20
     fe6:	ee 0f       	add	r30, r30
     fe8:	ff 1f       	adc	r31, r31
     fea:	30 96       	adiw	r30, 0x00	; 0
     fec:	21 05       	cpc	r18, r1
     fee:	31 05       	cpc	r19, r1
     ff0:	a1 f1       	breq	.+104    	; 0x105a <pow+0x76>
     ff2:	61 15       	cp	r22, r1
     ff4:	71 05       	cpc	r23, r1
     ff6:	61 f4       	brne	.+24     	; 0x1010 <pow+0x2c>
     ff8:	80 38       	cpi	r24, 0x80	; 128
     ffa:	bf e3       	ldi	r27, 0x3F	; 63
     ffc:	9b 07       	cpc	r25, r27
     ffe:	49 f1       	breq	.+82     	; 0x1052 <pow+0x6e>
    1000:	68 94       	set
    1002:	90 38       	cpi	r25, 0x80	; 128
    1004:	81 05       	cpc	r24, r1
    1006:	61 f0       	breq	.+24     	; 0x1020 <pow+0x3c>
    1008:	80 38       	cpi	r24, 0x80	; 128
    100a:	bf ef       	ldi	r27, 0xFF	; 255
    100c:	9b 07       	cpc	r25, r27
    100e:	41 f0       	breq	.+16     	; 0x1020 <pow+0x3c>
    1010:	99 23       	and	r25, r25
    1012:	4a f5       	brpl	.+82     	; 0x1066 <pow+0x82>
    1014:	ff 3f       	cpi	r31, 0xFF	; 255
    1016:	e1 05       	cpc	r30, r1
    1018:	31 05       	cpc	r19, r1
    101a:	21 05       	cpc	r18, r1
    101c:	19 f1       	breq	.+70     	; 0x1064 <pow+0x80>
    101e:	e8 94       	clt
    1020:	08 94       	sec
    1022:	e7 95       	ror	r30
    1024:	d9 01       	movw	r26, r18
    1026:	aa 23       	and	r26, r26
    1028:	29 f4       	brne	.+10     	; 0x1034 <pow+0x50>
    102a:	ab 2f       	mov	r26, r27
    102c:	be 2f       	mov	r27, r30
    102e:	f8 5f       	subi	r31, 0xF8	; 248
    1030:	d0 f3       	brcs	.-12     	; 0x1026 <pow+0x42>
    1032:	10 c0       	rjmp	.+32     	; 0x1054 <pow+0x70>
    1034:	ff 5f       	subi	r31, 0xFF	; 255
    1036:	70 f4       	brcc	.+28     	; 0x1054 <pow+0x70>
    1038:	a6 95       	lsr	r26
    103a:	e0 f7       	brcc	.-8      	; 0x1034 <pow+0x50>
    103c:	f7 39       	cpi	r31, 0x97	; 151
    103e:	50 f0       	brcs	.+20     	; 0x1054 <pow+0x70>
    1040:	19 f0       	breq	.+6      	; 0x1048 <pow+0x64>
    1042:	ff 3a       	cpi	r31, 0xAF	; 175
    1044:	38 f4       	brcc	.+14     	; 0x1054 <pow+0x70>
    1046:	9f 77       	andi	r25, 0x7F	; 127
    1048:	9f 93       	push	r25
    104a:	0d d0       	rcall	.+26     	; 0x1066 <pow+0x82>
    104c:	0f 90       	pop	r0
    104e:	07 fc       	sbrc	r0, 7
    1050:	90 58       	subi	r25, 0x80	; 128
    1052:	08 95       	ret
    1054:	46 f0       	brts	.+16     	; 0x1066 <pow+0x82>
    1056:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__fp_nan>
    105a:	60 e0       	ldi	r22, 0x00	; 0
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	80 e8       	ldi	r24, 0x80	; 128
    1060:	9f e3       	ldi	r25, 0x3F	; 63
    1062:	08 95       	ret
    1064:	4f e7       	ldi	r20, 0x7F	; 127
    1066:	9f 77       	andi	r25, 0x7F	; 127
    1068:	5f 93       	push	r21
    106a:	4f 93       	push	r20
    106c:	3f 93       	push	r19
    106e:	2f 93       	push	r18
    1070:	0e 94 3d 07 	call	0xe7a	; 0xe7a <log>
    1074:	2f 91       	pop	r18
    1076:	3f 91       	pop	r19
    1078:	4f 91       	pop	r20
    107a:	5f 91       	pop	r21
    107c:	0e 94 85 07 	call	0xf0a	; 0xf0a <__mulsf3>
    1080:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <exp>

00001084 <round>:
    1084:	0e 94 f4 06 	call	0xde8	; 0xde8 <__fp_splitA>
    1088:	e8 f0       	brcs	.+58     	; 0x10c4 <round+0x40>
    108a:	9e 37       	cpi	r25, 0x7E	; 126
    108c:	e8 f0       	brcs	.+58     	; 0x10c8 <round+0x44>
    108e:	96 39       	cpi	r25, 0x96	; 150
    1090:	b8 f4       	brcc	.+46     	; 0x10c0 <round+0x3c>
    1092:	9e 38       	cpi	r25, 0x8E	; 142
    1094:	48 f4       	brcc	.+18     	; 0x10a8 <round+0x24>
    1096:	67 2f       	mov	r22, r23
    1098:	78 2f       	mov	r23, r24
    109a:	88 27       	eor	r24, r24
    109c:	98 5f       	subi	r25, 0xF8	; 248
    109e:	f9 cf       	rjmp	.-14     	; 0x1092 <round+0xe>
    10a0:	86 95       	lsr	r24
    10a2:	77 95       	ror	r23
    10a4:	67 95       	ror	r22
    10a6:	93 95       	inc	r25
    10a8:	95 39       	cpi	r25, 0x95	; 149
    10aa:	d0 f3       	brcs	.-12     	; 0x10a0 <round+0x1c>
    10ac:	b6 2f       	mov	r27, r22
    10ae:	b1 70       	andi	r27, 0x01	; 1
    10b0:	6b 0f       	add	r22, r27
    10b2:	71 1d       	adc	r23, r1
    10b4:	81 1d       	adc	r24, r1
    10b6:	20 f4       	brcc	.+8      	; 0x10c0 <round+0x3c>
    10b8:	87 95       	ror	r24
    10ba:	77 95       	ror	r23
    10bc:	67 95       	ror	r22
    10be:	93 95       	inc	r25
    10c0:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__fp_mintl>
    10c4:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__fp_mpack>
    10c8:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__fp_szero>
    10cc:	29 f4       	brne	.+10     	; 0x10d8 <round+0x54>
    10ce:	16 f0       	brts	.+4      	; 0x10d4 <round+0x50>
    10d0:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_inf>
    10d4:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__fp_zero>
    10d8:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__fp_nan>

000010dc <exp>:
    10dc:	0e 94 f4 06 	call	0xde8	; 0xde8 <__fp_splitA>
    10e0:	a8 f3       	brcs	.-22     	; 0x10cc <round+0x48>
    10e2:	96 38       	cpi	r25, 0x86	; 134
    10e4:	a0 f7       	brcc	.-24     	; 0x10ce <round+0x4a>
    10e6:	07 f8       	bld	r0, 7
    10e8:	0f 92       	push	r0
    10ea:	e8 94       	clt
    10ec:	2b e3       	ldi	r18, 0x3B	; 59
    10ee:	3a ea       	ldi	r19, 0xAA	; 170
    10f0:	48 eb       	ldi	r20, 0xB8	; 184
    10f2:	5f e7       	ldi	r21, 0x7F	; 127
    10f4:	0e 94 9b 07 	call	0xf36	; 0xf36 <__mulsf3_pse>
    10f8:	0f 92       	push	r0
    10fa:	0f 92       	push	r0
    10fc:	0f 92       	push	r0
    10fe:	4d b7       	in	r20, 0x3d	; 61
    1100:	5e b7       	in	r21, 0x3e	; 62
    1102:	0f 92       	push	r0
    1104:	0e 94 09 09 	call	0x1212	; 0x1212 <modf>
    1108:	e2 ec       	ldi	r30, 0xC2	; 194
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	0e 94 a0 08 	call	0x1140	; 0x1140 <__fp_powser>
    1110:	4f 91       	pop	r20
    1112:	5f 91       	pop	r21
    1114:	ef 91       	pop	r30
    1116:	ff 91       	pop	r31
    1118:	e5 95       	asr	r30
    111a:	ee 1f       	adc	r30, r30
    111c:	ff 1f       	adc	r31, r31
    111e:	49 f0       	breq	.+18     	; 0x1132 <exp+0x56>
    1120:	fe 57       	subi	r31, 0x7E	; 126
    1122:	e0 68       	ori	r30, 0x80	; 128
    1124:	44 27       	eor	r20, r20
    1126:	ee 0f       	add	r30, r30
    1128:	44 1f       	adc	r20, r20
    112a:	fa 95       	dec	r31
    112c:	e1 f7       	brne	.-8      	; 0x1126 <exp+0x4a>
    112e:	41 95       	neg	r20
    1130:	55 0b       	sbc	r21, r21
    1132:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <ldexp>
    1136:	0f 90       	pop	r0
    1138:	07 fe       	sbrs	r0, 7
    113a:	0c 94 c7 08 	jmp	0x118e	; 0x118e <inverse>
    113e:	08 95       	ret

00001140 <__fp_powser>:
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	1f 93       	push	r17
    1146:	0f 93       	push	r16
    1148:	ff 92       	push	r15
    114a:	ef 92       	push	r14
    114c:	df 92       	push	r13
    114e:	7b 01       	movw	r14, r22
    1150:	8c 01       	movw	r16, r24
    1152:	68 94       	set
    1154:	06 c0       	rjmp	.+12     	; 0x1162 <__fp_powser+0x22>
    1156:	da 2e       	mov	r13, r26
    1158:	ef 01       	movw	r28, r30
    115a:	0e 94 98 07 	call	0xf30	; 0xf30 <__mulsf3x>
    115e:	fe 01       	movw	r30, r28
    1160:	e8 94       	clt
    1162:	a5 91       	lpm	r26, Z+
    1164:	25 91       	lpm	r18, Z+
    1166:	35 91       	lpm	r19, Z+
    1168:	45 91       	lpm	r20, Z+
    116a:	55 91       	lpm	r21, Z+
    116c:	a6 f3       	brts	.-24     	; 0x1156 <__fp_powser+0x16>
    116e:	ef 01       	movw	r28, r30
    1170:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__addsf3x>
    1174:	fe 01       	movw	r30, r28
    1176:	97 01       	movw	r18, r14
    1178:	a8 01       	movw	r20, r16
    117a:	da 94       	dec	r13
    117c:	69 f7       	brne	.-38     	; 0x1158 <__fp_powser+0x18>
    117e:	df 90       	pop	r13
    1180:	ef 90       	pop	r14
    1182:	ff 90       	pop	r15
    1184:	0f 91       	pop	r16
    1186:	1f 91       	pop	r17
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	08 95       	ret

0000118e <inverse>:
    118e:	9b 01       	movw	r18, r22
    1190:	ac 01       	movw	r20, r24
    1192:	60 e0       	ldi	r22, 0x00	; 0
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	80 e8       	ldi	r24, 0x80	; 128
    1198:	9f e3       	ldi	r25, 0x3F	; 63
    119a:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__divsf3>
    119e:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_inf>
    11a2:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__fp_mpack>

000011a6 <ldexp>:
    11a6:	0e 94 f4 06 	call	0xde8	; 0xde8 <__fp_splitA>
    11aa:	d8 f3       	brcs	.-10     	; 0x11a2 <inverse+0x14>
    11ac:	99 23       	and	r25, r25
    11ae:	c9 f3       	breq	.-14     	; 0x11a2 <inverse+0x14>
    11b0:	94 0f       	add	r25, r20
    11b2:	51 1d       	adc	r21, r1
    11b4:	a3 f3       	brvs	.-24     	; 0x119e <inverse+0x10>
    11b6:	91 50       	subi	r25, 0x01	; 1
    11b8:	50 40       	sbci	r21, 0x00	; 0
    11ba:	94 f0       	brlt	.+36     	; 0x11e0 <ldexp+0x3a>
    11bc:	59 f0       	breq	.+22     	; 0x11d4 <ldexp+0x2e>
    11be:	88 23       	and	r24, r24
    11c0:	32 f0       	brmi	.+12     	; 0x11ce <ldexp+0x28>
    11c2:	66 0f       	add	r22, r22
    11c4:	77 1f       	adc	r23, r23
    11c6:	88 1f       	adc	r24, r24
    11c8:	91 50       	subi	r25, 0x01	; 1
    11ca:	50 40       	sbci	r21, 0x00	; 0
    11cc:	c1 f7       	brne	.-16     	; 0x11be <ldexp+0x18>
    11ce:	9e 3f       	cpi	r25, 0xFE	; 254
    11d0:	51 05       	cpc	r21, r1
    11d2:	2c f7       	brge	.-54     	; 0x119e <inverse+0x10>
    11d4:	88 0f       	add	r24, r24
    11d6:	91 1d       	adc	r25, r1
    11d8:	96 95       	lsr	r25
    11da:	87 95       	ror	r24
    11dc:	97 f9       	bld	r25, 7
    11de:	08 95       	ret
    11e0:	5f 3f       	cpi	r21, 0xFF	; 255
    11e2:	ac f0       	brlt	.+42     	; 0x120e <ldexp+0x68>
    11e4:	98 3e       	cpi	r25, 0xE8	; 232
    11e6:	9c f0       	brlt	.+38     	; 0x120e <ldexp+0x68>
    11e8:	bb 27       	eor	r27, r27
    11ea:	86 95       	lsr	r24
    11ec:	77 95       	ror	r23
    11ee:	67 95       	ror	r22
    11f0:	b7 95       	ror	r27
    11f2:	08 f4       	brcc	.+2      	; 0x11f6 <ldexp+0x50>
    11f4:	b1 60       	ori	r27, 0x01	; 1
    11f6:	93 95       	inc	r25
    11f8:	c1 f7       	brne	.-16     	; 0x11ea <ldexp+0x44>
    11fa:	bb 0f       	add	r27, r27
    11fc:	58 f7       	brcc	.-42     	; 0x11d4 <ldexp+0x2e>
    11fe:	11 f4       	brne	.+4      	; 0x1204 <ldexp+0x5e>
    1200:	60 ff       	sbrs	r22, 0
    1202:	e8 cf       	rjmp	.-48     	; 0x11d4 <ldexp+0x2e>
    1204:	6f 5f       	subi	r22, 0xFF	; 255
    1206:	7f 4f       	sbci	r23, 0xFF	; 255
    1208:	8f 4f       	sbci	r24, 0xFF	; 255
    120a:	9f 4f       	sbci	r25, 0xFF	; 255
    120c:	e3 cf       	rjmp	.-58     	; 0x11d4 <ldexp+0x2e>
    120e:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__fp_szero>

00001212 <modf>:
    1212:	fa 01       	movw	r30, r20
    1214:	dc 01       	movw	r26, r24
    1216:	aa 0f       	add	r26, r26
    1218:	bb 1f       	adc	r27, r27
    121a:	9b 01       	movw	r18, r22
    121c:	ac 01       	movw	r20, r24
    121e:	bf 57       	subi	r27, 0x7F	; 127
    1220:	28 f4       	brcc	.+10     	; 0x122c <modf+0x1a>
    1222:	22 27       	eor	r18, r18
    1224:	33 27       	eor	r19, r19
    1226:	44 27       	eor	r20, r20
    1228:	50 78       	andi	r21, 0x80	; 128
    122a:	20 c0       	rjmp	.+64     	; 0x126c <modf+0x5a>
    122c:	b7 51       	subi	r27, 0x17	; 23
    122e:	90 f4       	brcc	.+36     	; 0x1254 <modf+0x42>
    1230:	ab 2f       	mov	r26, r27
    1232:	00 24       	eor	r0, r0
    1234:	46 95       	lsr	r20
    1236:	37 95       	ror	r19
    1238:	27 95       	ror	r18
    123a:	01 1c       	adc	r0, r1
    123c:	a3 95       	inc	r26
    123e:	d2 f3       	brmi	.-12     	; 0x1234 <modf+0x22>
    1240:	00 20       	and	r0, r0
    1242:	71 f0       	breq	.+28     	; 0x1260 <modf+0x4e>
    1244:	22 0f       	add	r18, r18
    1246:	33 1f       	adc	r19, r19
    1248:	44 1f       	adc	r20, r20
    124a:	b3 95       	inc	r27
    124c:	da f3       	brmi	.-10     	; 0x1244 <modf+0x32>
    124e:	0e d0       	rcall	.+28     	; 0x126c <modf+0x5a>
    1250:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__subsf3>
    1254:	61 30       	cpi	r22, 0x01	; 1
    1256:	71 05       	cpc	r23, r1
    1258:	a0 e8       	ldi	r26, 0x80	; 128
    125a:	8a 07       	cpc	r24, r26
    125c:	b9 46       	sbci	r27, 0x69	; 105
    125e:	30 f4       	brcc	.+12     	; 0x126c <modf+0x5a>
    1260:	9b 01       	movw	r18, r22
    1262:	ac 01       	movw	r20, r24
    1264:	66 27       	eor	r22, r22
    1266:	77 27       	eor	r23, r23
    1268:	88 27       	eor	r24, r24
    126a:	90 78       	andi	r25, 0x80	; 128
    126c:	30 96       	adiw	r30, 0x00	; 0
    126e:	21 f0       	breq	.+8      	; 0x1278 <modf+0x66>
    1270:	20 83       	st	Z, r18
    1272:	31 83       	std	Z+1, r19	; 0x01
    1274:	42 83       	std	Z+2, r20	; 0x02
    1276:	53 83       	std	Z+3, r21	; 0x03
    1278:	08 95       	ret

0000127a <__udivmodsi4>:
    127a:	a1 e2       	ldi	r26, 0x21	; 33
    127c:	1a 2e       	mov	r1, r26
    127e:	aa 1b       	sub	r26, r26
    1280:	bb 1b       	sub	r27, r27
    1282:	fd 01       	movw	r30, r26
    1284:	0d c0       	rjmp	.+26     	; 0x12a0 <__udivmodsi4_ep>

00001286 <__udivmodsi4_loop>:
    1286:	aa 1f       	adc	r26, r26
    1288:	bb 1f       	adc	r27, r27
    128a:	ee 1f       	adc	r30, r30
    128c:	ff 1f       	adc	r31, r31
    128e:	a2 17       	cp	r26, r18
    1290:	b3 07       	cpc	r27, r19
    1292:	e4 07       	cpc	r30, r20
    1294:	f5 07       	cpc	r31, r21
    1296:	20 f0       	brcs	.+8      	; 0x12a0 <__udivmodsi4_ep>
    1298:	a2 1b       	sub	r26, r18
    129a:	b3 0b       	sbc	r27, r19
    129c:	e4 0b       	sbc	r30, r20
    129e:	f5 0b       	sbc	r31, r21

000012a0 <__udivmodsi4_ep>:
    12a0:	66 1f       	adc	r22, r22
    12a2:	77 1f       	adc	r23, r23
    12a4:	88 1f       	adc	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	1a 94       	dec	r1
    12aa:	69 f7       	brne	.-38     	; 0x1286 <__udivmodsi4_loop>
    12ac:	60 95       	com	r22
    12ae:	70 95       	com	r23
    12b0:	80 95       	com	r24
    12b2:	90 95       	com	r25
    12b4:	9b 01       	movw	r18, r22
    12b6:	ac 01       	movw	r20, r24
    12b8:	bd 01       	movw	r22, r26
    12ba:	cf 01       	movw	r24, r30
    12bc:	08 95       	ret

000012be <__ashldi3>:
    12be:	0f 93       	push	r16
    12c0:	08 30       	cpi	r16, 0x08	; 8
    12c2:	90 f0       	brcs	.+36     	; 0x12e8 <__ashldi3+0x2a>
    12c4:	98 2f       	mov	r25, r24
    12c6:	87 2f       	mov	r24, r23
    12c8:	76 2f       	mov	r23, r22
    12ca:	65 2f       	mov	r22, r21
    12cc:	54 2f       	mov	r21, r20
    12ce:	43 2f       	mov	r20, r19
    12d0:	32 2f       	mov	r19, r18
    12d2:	22 27       	eor	r18, r18
    12d4:	08 50       	subi	r16, 0x08	; 8
    12d6:	f4 cf       	rjmp	.-24     	; 0x12c0 <__ashldi3+0x2>
    12d8:	22 0f       	add	r18, r18
    12da:	33 1f       	adc	r19, r19
    12dc:	44 1f       	adc	r20, r20
    12de:	55 1f       	adc	r21, r21
    12e0:	66 1f       	adc	r22, r22
    12e2:	77 1f       	adc	r23, r23
    12e4:	88 1f       	adc	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	0a 95       	dec	r16
    12ea:	b2 f7       	brpl	.-20     	; 0x12d8 <__ashldi3+0x1a>
    12ec:	0f 91       	pop	r16
    12ee:	08 95       	ret

000012f0 <__ashrdi3>:
    12f0:	97 fb       	bst	r25, 7
    12f2:	10 f8       	bld	r1, 0

000012f4 <__lshrdi3>:
    12f4:	16 94       	lsr	r1
    12f6:	00 08       	sbc	r0, r0
    12f8:	0f 93       	push	r16
    12fa:	08 30       	cpi	r16, 0x08	; 8
    12fc:	98 f0       	brcs	.+38     	; 0x1324 <__lshrdi3+0x30>
    12fe:	08 50       	subi	r16, 0x08	; 8
    1300:	23 2f       	mov	r18, r19
    1302:	34 2f       	mov	r19, r20
    1304:	45 2f       	mov	r20, r21
    1306:	56 2f       	mov	r21, r22
    1308:	67 2f       	mov	r22, r23
    130a:	78 2f       	mov	r23, r24
    130c:	89 2f       	mov	r24, r25
    130e:	90 2d       	mov	r25, r0
    1310:	f4 cf       	rjmp	.-24     	; 0x12fa <__lshrdi3+0x6>
    1312:	05 94       	asr	r0
    1314:	97 95       	ror	r25
    1316:	87 95       	ror	r24
    1318:	77 95       	ror	r23
    131a:	67 95       	ror	r22
    131c:	57 95       	ror	r21
    131e:	47 95       	ror	r20
    1320:	37 95       	ror	r19
    1322:	27 95       	ror	r18
    1324:	0a 95       	dec	r16
    1326:	aa f7       	brpl	.-22     	; 0x1312 <__lshrdi3+0x1e>
    1328:	0f 91       	pop	r16
    132a:	08 95       	ret

0000132c <__cmpdi2>:
    132c:	2a 15       	cp	r18, r10
    132e:	3b 05       	cpc	r19, r11
    1330:	4c 05       	cpc	r20, r12
    1332:	5d 05       	cpc	r21, r13
    1334:	6e 05       	cpc	r22, r14
    1336:	7f 05       	cpc	r23, r15
    1338:	80 07       	cpc	r24, r16
    133a:	91 07       	cpc	r25, r17
    133c:	08 95       	ret

0000133e <printf>:
    133e:	a0 e0       	ldi	r26, 0x00	; 0
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e5 ea       	ldi	r30, 0xA5	; 165
    1344:	f9 e0       	ldi	r31, 0x09	; 9
    1346:	0c 94 4a 0c 	jmp	0x1894	; 0x1894 <__prologue_saves__+0x20>
    134a:	ae 01       	movw	r20, r28
    134c:	4b 5f       	subi	r20, 0xFB	; 251
    134e:	5f 4f       	sbci	r21, 0xFF	; 255
    1350:	fa 01       	movw	r30, r20
    1352:	61 91       	ld	r22, Z+
    1354:	71 91       	ld	r23, Z+
    1356:	af 01       	movw	r20, r30
    1358:	80 91 b3 02 	lds	r24, 0x02B3
    135c:	90 91 b4 02 	lds	r25, 0x02B4
    1360:	0e 94 bc 09 	call	0x1378	; 0x1378 <vfprintf>
    1364:	e2 e0       	ldi	r30, 0x02	; 2
    1366:	0c 94 66 0c 	jmp	0x18cc	; 0x18cc <__epilogue_restores__+0x20>

0000136a <putchar>:
    136a:	60 91 b3 02 	lds	r22, 0x02B3
    136e:	70 91 b4 02 	lds	r23, 0x02B4
    1372:	0e 94 a4 0b 	call	0x1748	; 0x1748 <fputc>
    1376:	08 95       	ret

00001378 <vfprintf>:
    1378:	ac e0       	ldi	r26, 0x0C	; 12
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e2 ec       	ldi	r30, 0xC2	; 194
    137e:	f9 e0       	ldi	r31, 0x09	; 9
    1380:	0c 94 3a 0c 	jmp	0x1874	; 0x1874 <__prologue_saves__>
    1384:	7c 01       	movw	r14, r24
    1386:	6b 01       	movw	r12, r22
    1388:	8a 01       	movw	r16, r20
    138a:	fc 01       	movw	r30, r24
    138c:	17 82       	std	Z+7, r1	; 0x07
    138e:	16 82       	std	Z+6, r1	; 0x06
    1390:	83 81       	ldd	r24, Z+3	; 0x03
    1392:	81 ff       	sbrs	r24, 1
    1394:	bd c1       	rjmp	.+890    	; 0x1710 <vfprintf+0x398>
    1396:	ce 01       	movw	r24, r28
    1398:	01 96       	adiw	r24, 0x01	; 1
    139a:	4c 01       	movw	r8, r24
    139c:	f7 01       	movw	r30, r14
    139e:	93 81       	ldd	r25, Z+3	; 0x03
    13a0:	f6 01       	movw	r30, r12
    13a2:	93 fd       	sbrc	r25, 3
    13a4:	85 91       	lpm	r24, Z+
    13a6:	93 ff       	sbrs	r25, 3
    13a8:	81 91       	ld	r24, Z+
    13aa:	6f 01       	movw	r12, r30
    13ac:	88 23       	and	r24, r24
    13ae:	09 f4       	brne	.+2      	; 0x13b2 <vfprintf+0x3a>
    13b0:	ab c1       	rjmp	.+854    	; 0x1708 <vfprintf+0x390>
    13b2:	85 32       	cpi	r24, 0x25	; 37
    13b4:	39 f4       	brne	.+14     	; 0x13c4 <vfprintf+0x4c>
    13b6:	93 fd       	sbrc	r25, 3
    13b8:	85 91       	lpm	r24, Z+
    13ba:	93 ff       	sbrs	r25, 3
    13bc:	81 91       	ld	r24, Z+
    13be:	6f 01       	movw	r12, r30
    13c0:	85 32       	cpi	r24, 0x25	; 37
    13c2:	29 f4       	brne	.+10     	; 0x13ce <vfprintf+0x56>
    13c4:	b7 01       	movw	r22, r14
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	0e 94 a4 0b 	call	0x1748	; 0x1748 <fputc>
    13cc:	e7 cf       	rjmp	.-50     	; 0x139c <vfprintf+0x24>
    13ce:	51 2c       	mov	r5, r1
    13d0:	31 2c       	mov	r3, r1
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	20 32       	cpi	r18, 0x20	; 32
    13d6:	a0 f4       	brcc	.+40     	; 0x1400 <vfprintf+0x88>
    13d8:	8b 32       	cpi	r24, 0x2B	; 43
    13da:	69 f0       	breq	.+26     	; 0x13f6 <vfprintf+0x7e>
    13dc:	30 f4       	brcc	.+12     	; 0x13ea <vfprintf+0x72>
    13de:	80 32       	cpi	r24, 0x20	; 32
    13e0:	59 f0       	breq	.+22     	; 0x13f8 <vfprintf+0x80>
    13e2:	83 32       	cpi	r24, 0x23	; 35
    13e4:	69 f4       	brne	.+26     	; 0x1400 <vfprintf+0x88>
    13e6:	20 61       	ori	r18, 0x10	; 16
    13e8:	2c c0       	rjmp	.+88     	; 0x1442 <vfprintf+0xca>
    13ea:	8d 32       	cpi	r24, 0x2D	; 45
    13ec:	39 f0       	breq	.+14     	; 0x13fc <vfprintf+0x84>
    13ee:	80 33       	cpi	r24, 0x30	; 48
    13f0:	39 f4       	brne	.+14     	; 0x1400 <vfprintf+0x88>
    13f2:	21 60       	ori	r18, 0x01	; 1
    13f4:	26 c0       	rjmp	.+76     	; 0x1442 <vfprintf+0xca>
    13f6:	22 60       	ori	r18, 0x02	; 2
    13f8:	24 60       	ori	r18, 0x04	; 4
    13fa:	23 c0       	rjmp	.+70     	; 0x1442 <vfprintf+0xca>
    13fc:	28 60       	ori	r18, 0x08	; 8
    13fe:	21 c0       	rjmp	.+66     	; 0x1442 <vfprintf+0xca>
    1400:	27 fd       	sbrc	r18, 7
    1402:	27 c0       	rjmp	.+78     	; 0x1452 <vfprintf+0xda>
    1404:	30 ed       	ldi	r19, 0xD0	; 208
    1406:	38 0f       	add	r19, r24
    1408:	3a 30       	cpi	r19, 0x0A	; 10
    140a:	78 f4       	brcc	.+30     	; 0x142a <vfprintf+0xb2>
    140c:	26 ff       	sbrs	r18, 6
    140e:	06 c0       	rjmp	.+12     	; 0x141c <vfprintf+0xa4>
    1410:	fa e0       	ldi	r31, 0x0A	; 10
    1412:	5f 9e       	mul	r5, r31
    1414:	30 0d       	add	r19, r0
    1416:	11 24       	eor	r1, r1
    1418:	53 2e       	mov	r5, r19
    141a:	13 c0       	rjmp	.+38     	; 0x1442 <vfprintf+0xca>
    141c:	8a e0       	ldi	r24, 0x0A	; 10
    141e:	38 9e       	mul	r3, r24
    1420:	30 0d       	add	r19, r0
    1422:	11 24       	eor	r1, r1
    1424:	33 2e       	mov	r3, r19
    1426:	20 62       	ori	r18, 0x20	; 32
    1428:	0c c0       	rjmp	.+24     	; 0x1442 <vfprintf+0xca>
    142a:	8e 32       	cpi	r24, 0x2E	; 46
    142c:	21 f4       	brne	.+8      	; 0x1436 <vfprintf+0xbe>
    142e:	26 fd       	sbrc	r18, 6
    1430:	6b c1       	rjmp	.+726    	; 0x1708 <vfprintf+0x390>
    1432:	20 64       	ori	r18, 0x40	; 64
    1434:	06 c0       	rjmp	.+12     	; 0x1442 <vfprintf+0xca>
    1436:	8c 36       	cpi	r24, 0x6C	; 108
    1438:	11 f4       	brne	.+4      	; 0x143e <vfprintf+0xc6>
    143a:	20 68       	ori	r18, 0x80	; 128
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <vfprintf+0xca>
    143e:	88 36       	cpi	r24, 0x68	; 104
    1440:	41 f4       	brne	.+16     	; 0x1452 <vfprintf+0xda>
    1442:	f6 01       	movw	r30, r12
    1444:	93 fd       	sbrc	r25, 3
    1446:	85 91       	lpm	r24, Z+
    1448:	93 ff       	sbrs	r25, 3
    144a:	81 91       	ld	r24, Z+
    144c:	6f 01       	movw	r12, r30
    144e:	81 11       	cpse	r24, r1
    1450:	c1 cf       	rjmp	.-126    	; 0x13d4 <vfprintf+0x5c>
    1452:	98 2f       	mov	r25, r24
    1454:	9f 7d       	andi	r25, 0xDF	; 223
    1456:	95 54       	subi	r25, 0x45	; 69
    1458:	93 30       	cpi	r25, 0x03	; 3
    145a:	28 f4       	brcc	.+10     	; 0x1466 <vfprintf+0xee>
    145c:	0c 5f       	subi	r16, 0xFC	; 252
    145e:	1f 4f       	sbci	r17, 0xFF	; 255
    1460:	ff e3       	ldi	r31, 0x3F	; 63
    1462:	f9 83       	std	Y+1, r31	; 0x01
    1464:	0d c0       	rjmp	.+26     	; 0x1480 <vfprintf+0x108>
    1466:	83 36       	cpi	r24, 0x63	; 99
    1468:	31 f0       	breq	.+12     	; 0x1476 <vfprintf+0xfe>
    146a:	83 37       	cpi	r24, 0x73	; 115
    146c:	71 f0       	breq	.+28     	; 0x148a <vfprintf+0x112>
    146e:	83 35       	cpi	r24, 0x53	; 83
    1470:	09 f0       	breq	.+2      	; 0x1474 <vfprintf+0xfc>
    1472:	5b c0       	rjmp	.+182    	; 0x152a <vfprintf+0x1b2>
    1474:	22 c0       	rjmp	.+68     	; 0x14ba <vfprintf+0x142>
    1476:	f8 01       	movw	r30, r16
    1478:	80 81       	ld	r24, Z
    147a:	89 83       	std	Y+1, r24	; 0x01
    147c:	0e 5f       	subi	r16, 0xFE	; 254
    147e:	1f 4f       	sbci	r17, 0xFF	; 255
    1480:	44 24       	eor	r4, r4
    1482:	43 94       	inc	r4
    1484:	51 2c       	mov	r5, r1
    1486:	54 01       	movw	r10, r8
    1488:	15 c0       	rjmp	.+42     	; 0x14b4 <vfprintf+0x13c>
    148a:	38 01       	movw	r6, r16
    148c:	f2 e0       	ldi	r31, 0x02	; 2
    148e:	6f 0e       	add	r6, r31
    1490:	71 1c       	adc	r7, r1
    1492:	f8 01       	movw	r30, r16
    1494:	a0 80       	ld	r10, Z
    1496:	b1 80       	ldd	r11, Z+1	; 0x01
    1498:	26 ff       	sbrs	r18, 6
    149a:	03 c0       	rjmp	.+6      	; 0x14a2 <vfprintf+0x12a>
    149c:	65 2d       	mov	r22, r5
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <vfprintf+0x12e>
    14a2:	6f ef       	ldi	r22, 0xFF	; 255
    14a4:	7f ef       	ldi	r23, 0xFF	; 255
    14a6:	c5 01       	movw	r24, r10
    14a8:	2c 87       	std	Y+12, r18	; 0x0c
    14aa:	0e 94 99 0b 	call	0x1732	; 0x1732 <strnlen>
    14ae:	2c 01       	movw	r4, r24
    14b0:	83 01       	movw	r16, r6
    14b2:	2c 85       	ldd	r18, Y+12	; 0x0c
    14b4:	2f 77       	andi	r18, 0x7F	; 127
    14b6:	22 2e       	mov	r2, r18
    14b8:	17 c0       	rjmp	.+46     	; 0x14e8 <vfprintf+0x170>
    14ba:	38 01       	movw	r6, r16
    14bc:	f2 e0       	ldi	r31, 0x02	; 2
    14be:	6f 0e       	add	r6, r31
    14c0:	71 1c       	adc	r7, r1
    14c2:	f8 01       	movw	r30, r16
    14c4:	a0 80       	ld	r10, Z
    14c6:	b1 80       	ldd	r11, Z+1	; 0x01
    14c8:	26 ff       	sbrs	r18, 6
    14ca:	03 c0       	rjmp	.+6      	; 0x14d2 <vfprintf+0x15a>
    14cc:	65 2d       	mov	r22, r5
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <vfprintf+0x15e>
    14d2:	6f ef       	ldi	r22, 0xFF	; 255
    14d4:	7f ef       	ldi	r23, 0xFF	; 255
    14d6:	c5 01       	movw	r24, r10
    14d8:	2c 87       	std	Y+12, r18	; 0x0c
    14da:	0e 94 8e 0b 	call	0x171c	; 0x171c <strnlen_P>
    14de:	2c 01       	movw	r4, r24
    14e0:	2c 85       	ldd	r18, Y+12	; 0x0c
    14e2:	20 68       	ori	r18, 0x80	; 128
    14e4:	22 2e       	mov	r2, r18
    14e6:	83 01       	movw	r16, r6
    14e8:	23 fc       	sbrc	r2, 3
    14ea:	1b c0       	rjmp	.+54     	; 0x1522 <vfprintf+0x1aa>
    14ec:	83 2d       	mov	r24, r3
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	48 16       	cp	r4, r24
    14f2:	59 06       	cpc	r5, r25
    14f4:	b0 f4       	brcc	.+44     	; 0x1522 <vfprintf+0x1aa>
    14f6:	b7 01       	movw	r22, r14
    14f8:	80 e2       	ldi	r24, 0x20	; 32
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	0e 94 a4 0b 	call	0x1748	; 0x1748 <fputc>
    1500:	3a 94       	dec	r3
    1502:	f4 cf       	rjmp	.-24     	; 0x14ec <vfprintf+0x174>
    1504:	f5 01       	movw	r30, r10
    1506:	27 fc       	sbrc	r2, 7
    1508:	85 91       	lpm	r24, Z+
    150a:	27 fe       	sbrs	r2, 7
    150c:	81 91       	ld	r24, Z+
    150e:	5f 01       	movw	r10, r30
    1510:	b7 01       	movw	r22, r14
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	0e 94 a4 0b 	call	0x1748	; 0x1748 <fputc>
    1518:	31 10       	cpse	r3, r1
    151a:	3a 94       	dec	r3
    151c:	f1 e0       	ldi	r31, 0x01	; 1
    151e:	4f 1a       	sub	r4, r31
    1520:	51 08       	sbc	r5, r1
    1522:	41 14       	cp	r4, r1
    1524:	51 04       	cpc	r5, r1
    1526:	71 f7       	brne	.-36     	; 0x1504 <vfprintf+0x18c>
    1528:	e5 c0       	rjmp	.+458    	; 0x16f4 <vfprintf+0x37c>
    152a:	84 36       	cpi	r24, 0x64	; 100
    152c:	11 f0       	breq	.+4      	; 0x1532 <vfprintf+0x1ba>
    152e:	89 36       	cpi	r24, 0x69	; 105
    1530:	39 f5       	brne	.+78     	; 0x1580 <vfprintf+0x208>
    1532:	f8 01       	movw	r30, r16
    1534:	27 ff       	sbrs	r18, 7
    1536:	07 c0       	rjmp	.+14     	; 0x1546 <vfprintf+0x1ce>
    1538:	60 81       	ld	r22, Z
    153a:	71 81       	ldd	r23, Z+1	; 0x01
    153c:	82 81       	ldd	r24, Z+2	; 0x02
    153e:	93 81       	ldd	r25, Z+3	; 0x03
    1540:	0c 5f       	subi	r16, 0xFC	; 252
    1542:	1f 4f       	sbci	r17, 0xFF	; 255
    1544:	08 c0       	rjmp	.+16     	; 0x1556 <vfprintf+0x1de>
    1546:	60 81       	ld	r22, Z
    1548:	71 81       	ldd	r23, Z+1	; 0x01
    154a:	07 2e       	mov	r0, r23
    154c:	00 0c       	add	r0, r0
    154e:	88 0b       	sbc	r24, r24
    1550:	99 0b       	sbc	r25, r25
    1552:	0e 5f       	subi	r16, 0xFE	; 254
    1554:	1f 4f       	sbci	r17, 0xFF	; 255
    1556:	2f 76       	andi	r18, 0x6F	; 111
    1558:	72 2e       	mov	r7, r18
    155a:	97 ff       	sbrs	r25, 7
    155c:	09 c0       	rjmp	.+18     	; 0x1570 <vfprintf+0x1f8>
    155e:	90 95       	com	r25
    1560:	80 95       	com	r24
    1562:	70 95       	com	r23
    1564:	61 95       	neg	r22
    1566:	7f 4f       	sbci	r23, 0xFF	; 255
    1568:	8f 4f       	sbci	r24, 0xFF	; 255
    156a:	9f 4f       	sbci	r25, 0xFF	; 255
    156c:	20 68       	ori	r18, 0x80	; 128
    156e:	72 2e       	mov	r7, r18
    1570:	2a e0       	ldi	r18, 0x0A	; 10
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	a4 01       	movw	r20, r8
    1576:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <__ultoa_invert>
    157a:	a8 2e       	mov	r10, r24
    157c:	a8 18       	sub	r10, r8
    157e:	44 c0       	rjmp	.+136    	; 0x1608 <vfprintf+0x290>
    1580:	85 37       	cpi	r24, 0x75	; 117
    1582:	29 f4       	brne	.+10     	; 0x158e <vfprintf+0x216>
    1584:	2f 7e       	andi	r18, 0xEF	; 239
    1586:	b2 2e       	mov	r11, r18
    1588:	2a e0       	ldi	r18, 0x0A	; 10
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	25 c0       	rjmp	.+74     	; 0x15d8 <vfprintf+0x260>
    158e:	f2 2f       	mov	r31, r18
    1590:	f9 7f       	andi	r31, 0xF9	; 249
    1592:	bf 2e       	mov	r11, r31
    1594:	8f 36       	cpi	r24, 0x6F	; 111
    1596:	c1 f0       	breq	.+48     	; 0x15c8 <vfprintf+0x250>
    1598:	18 f4       	brcc	.+6      	; 0x15a0 <vfprintf+0x228>
    159a:	88 35       	cpi	r24, 0x58	; 88
    159c:	79 f0       	breq	.+30     	; 0x15bc <vfprintf+0x244>
    159e:	b4 c0       	rjmp	.+360    	; 0x1708 <vfprintf+0x390>
    15a0:	80 37       	cpi	r24, 0x70	; 112
    15a2:	19 f0       	breq	.+6      	; 0x15aa <vfprintf+0x232>
    15a4:	88 37       	cpi	r24, 0x78	; 120
    15a6:	21 f0       	breq	.+8      	; 0x15b0 <vfprintf+0x238>
    15a8:	af c0       	rjmp	.+350    	; 0x1708 <vfprintf+0x390>
    15aa:	2f 2f       	mov	r18, r31
    15ac:	20 61       	ori	r18, 0x10	; 16
    15ae:	b2 2e       	mov	r11, r18
    15b0:	b4 fe       	sbrs	r11, 4
    15b2:	0d c0       	rjmp	.+26     	; 0x15ce <vfprintf+0x256>
    15b4:	8b 2d       	mov	r24, r11
    15b6:	84 60       	ori	r24, 0x04	; 4
    15b8:	b8 2e       	mov	r11, r24
    15ba:	09 c0       	rjmp	.+18     	; 0x15ce <vfprintf+0x256>
    15bc:	24 ff       	sbrs	r18, 4
    15be:	0a c0       	rjmp	.+20     	; 0x15d4 <vfprintf+0x25c>
    15c0:	9f 2f       	mov	r25, r31
    15c2:	96 60       	ori	r25, 0x06	; 6
    15c4:	b9 2e       	mov	r11, r25
    15c6:	06 c0       	rjmp	.+12     	; 0x15d4 <vfprintf+0x25c>
    15c8:	28 e0       	ldi	r18, 0x08	; 8
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	05 c0       	rjmp	.+10     	; 0x15d8 <vfprintf+0x260>
    15ce:	20 e1       	ldi	r18, 0x10	; 16
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <vfprintf+0x260>
    15d4:	20 e1       	ldi	r18, 0x10	; 16
    15d6:	32 e0       	ldi	r19, 0x02	; 2
    15d8:	f8 01       	movw	r30, r16
    15da:	b7 fe       	sbrs	r11, 7
    15dc:	07 c0       	rjmp	.+14     	; 0x15ec <vfprintf+0x274>
    15de:	60 81       	ld	r22, Z
    15e0:	71 81       	ldd	r23, Z+1	; 0x01
    15e2:	82 81       	ldd	r24, Z+2	; 0x02
    15e4:	93 81       	ldd	r25, Z+3	; 0x03
    15e6:	0c 5f       	subi	r16, 0xFC	; 252
    15e8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ea:	06 c0       	rjmp	.+12     	; 0x15f8 <vfprintf+0x280>
    15ec:	60 81       	ld	r22, Z
    15ee:	71 81       	ldd	r23, Z+1	; 0x01
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	0e 5f       	subi	r16, 0xFE	; 254
    15f6:	1f 4f       	sbci	r17, 0xFF	; 255
    15f8:	a4 01       	movw	r20, r8
    15fa:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <__ultoa_invert>
    15fe:	a8 2e       	mov	r10, r24
    1600:	a8 18       	sub	r10, r8
    1602:	fb 2d       	mov	r31, r11
    1604:	ff 77       	andi	r31, 0x7F	; 127
    1606:	7f 2e       	mov	r7, r31
    1608:	76 fe       	sbrs	r7, 6
    160a:	0b c0       	rjmp	.+22     	; 0x1622 <vfprintf+0x2aa>
    160c:	37 2d       	mov	r19, r7
    160e:	3e 7f       	andi	r19, 0xFE	; 254
    1610:	a5 14       	cp	r10, r5
    1612:	50 f4       	brcc	.+20     	; 0x1628 <vfprintf+0x2b0>
    1614:	74 fe       	sbrs	r7, 4
    1616:	0a c0       	rjmp	.+20     	; 0x162c <vfprintf+0x2b4>
    1618:	72 fc       	sbrc	r7, 2
    161a:	08 c0       	rjmp	.+16     	; 0x162c <vfprintf+0x2b4>
    161c:	37 2d       	mov	r19, r7
    161e:	3e 7e       	andi	r19, 0xEE	; 238
    1620:	05 c0       	rjmp	.+10     	; 0x162c <vfprintf+0x2b4>
    1622:	ba 2c       	mov	r11, r10
    1624:	37 2d       	mov	r19, r7
    1626:	03 c0       	rjmp	.+6      	; 0x162e <vfprintf+0x2b6>
    1628:	ba 2c       	mov	r11, r10
    162a:	01 c0       	rjmp	.+2      	; 0x162e <vfprintf+0x2b6>
    162c:	b5 2c       	mov	r11, r5
    162e:	34 ff       	sbrs	r19, 4
    1630:	0d c0       	rjmp	.+26     	; 0x164c <vfprintf+0x2d4>
    1632:	fe 01       	movw	r30, r28
    1634:	ea 0d       	add	r30, r10
    1636:	f1 1d       	adc	r31, r1
    1638:	80 81       	ld	r24, Z
    163a:	80 33       	cpi	r24, 0x30	; 48
    163c:	11 f4       	brne	.+4      	; 0x1642 <vfprintf+0x2ca>
    163e:	39 7e       	andi	r19, 0xE9	; 233
    1640:	09 c0       	rjmp	.+18     	; 0x1654 <vfprintf+0x2dc>
    1642:	32 ff       	sbrs	r19, 2
    1644:	06 c0       	rjmp	.+12     	; 0x1652 <vfprintf+0x2da>
    1646:	b3 94       	inc	r11
    1648:	b3 94       	inc	r11
    164a:	04 c0       	rjmp	.+8      	; 0x1654 <vfprintf+0x2dc>
    164c:	83 2f       	mov	r24, r19
    164e:	86 78       	andi	r24, 0x86	; 134
    1650:	09 f0       	breq	.+2      	; 0x1654 <vfprintf+0x2dc>
    1652:	b3 94       	inc	r11
    1654:	33 fd       	sbrc	r19, 3
    1656:	13 c0       	rjmp	.+38     	; 0x167e <vfprintf+0x306>
    1658:	30 ff       	sbrs	r19, 0
    165a:	06 c0       	rjmp	.+12     	; 0x1668 <vfprintf+0x2f0>
    165c:	5a 2c       	mov	r5, r10
    165e:	b3 14       	cp	r11, r3
    1660:	18 f4       	brcc	.+6      	; 0x1668 <vfprintf+0x2f0>
    1662:	53 0c       	add	r5, r3
    1664:	5b 18       	sub	r5, r11
    1666:	b3 2c       	mov	r11, r3
    1668:	b3 14       	cp	r11, r3
    166a:	68 f4       	brcc	.+26     	; 0x1686 <vfprintf+0x30e>
    166c:	b7 01       	movw	r22, r14
    166e:	80 e2       	ldi	r24, 0x20	; 32
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	3c 87       	std	Y+12, r19	; 0x0c
    1674:	0e 94 a4 0b 	call	0x1748	; 0x1748 <fputc>
    1678:	b3 94       	inc	r11
    167a:	3c 85       	ldd	r19, Y+12	; 0x0c
    167c:	f5 cf       	rjmp	.-22     	; 0x1668 <vfprintf+0x2f0>
    167e:	b3 14       	cp	r11, r3
    1680:	10 f4       	brcc	.+4      	; 0x1686 <vfprintf+0x30e>
    1682:	3b 18       	sub	r3, r11
    1684:	01 c0       	rjmp	.+2      	; 0x1688 <vfprintf+0x310>
    1686:	31 2c       	mov	r3, r1
    1688:	34 ff       	sbrs	r19, 4
    168a:	12 c0       	rjmp	.+36     	; 0x16b0 <vfprintf+0x338>
    168c:	b7 01       	movw	r22, r14
    168e:	80 e3       	ldi	r24, 0x30	; 48
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	3c 87       	std	Y+12, r19	; 0x0c
    1694:	0e 94 a4 0b 	call	0x1748	; 0x1748 <fputc>
    1698:	3c 85       	ldd	r19, Y+12	; 0x0c
    169a:	32 ff       	sbrs	r19, 2
    169c:	17 c0       	rjmp	.+46     	; 0x16cc <vfprintf+0x354>
    169e:	31 fd       	sbrc	r19, 1
    16a0:	03 c0       	rjmp	.+6      	; 0x16a8 <vfprintf+0x330>
    16a2:	88 e7       	ldi	r24, 0x78	; 120
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <vfprintf+0x334>
    16a8:	88 e5       	ldi	r24, 0x58	; 88
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	b7 01       	movw	r22, r14
    16ae:	0c c0       	rjmp	.+24     	; 0x16c8 <vfprintf+0x350>
    16b0:	83 2f       	mov	r24, r19
    16b2:	86 78       	andi	r24, 0x86	; 134
    16b4:	59 f0       	breq	.+22     	; 0x16cc <vfprintf+0x354>
    16b6:	31 ff       	sbrs	r19, 1
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <vfprintf+0x346>
    16ba:	8b e2       	ldi	r24, 0x2B	; 43
    16bc:	01 c0       	rjmp	.+2      	; 0x16c0 <vfprintf+0x348>
    16be:	80 e2       	ldi	r24, 0x20	; 32
    16c0:	37 fd       	sbrc	r19, 7
    16c2:	8d e2       	ldi	r24, 0x2D	; 45
    16c4:	b7 01       	movw	r22, r14
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	0e 94 a4 0b 	call	0x1748	; 0x1748 <fputc>
    16cc:	a5 14       	cp	r10, r5
    16ce:	38 f4       	brcc	.+14     	; 0x16de <vfprintf+0x366>
    16d0:	b7 01       	movw	r22, r14
    16d2:	80 e3       	ldi	r24, 0x30	; 48
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	0e 94 a4 0b 	call	0x1748	; 0x1748 <fputc>
    16da:	5a 94       	dec	r5
    16dc:	f7 cf       	rjmp	.-18     	; 0x16cc <vfprintf+0x354>
    16de:	aa 94       	dec	r10
    16e0:	f4 01       	movw	r30, r8
    16e2:	ea 0d       	add	r30, r10
    16e4:	f1 1d       	adc	r31, r1
    16e6:	80 81       	ld	r24, Z
    16e8:	b7 01       	movw	r22, r14
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	0e 94 a4 0b 	call	0x1748	; 0x1748 <fputc>
    16f0:	a1 10       	cpse	r10, r1
    16f2:	f5 cf       	rjmp	.-22     	; 0x16de <vfprintf+0x366>
    16f4:	33 20       	and	r3, r3
    16f6:	09 f4       	brne	.+2      	; 0x16fa <vfprintf+0x382>
    16f8:	51 ce       	rjmp	.-862    	; 0x139c <vfprintf+0x24>
    16fa:	b7 01       	movw	r22, r14
    16fc:	80 e2       	ldi	r24, 0x20	; 32
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	0e 94 a4 0b 	call	0x1748	; 0x1748 <fputc>
    1704:	3a 94       	dec	r3
    1706:	f6 cf       	rjmp	.-20     	; 0x16f4 <vfprintf+0x37c>
    1708:	f7 01       	movw	r30, r14
    170a:	86 81       	ldd	r24, Z+6	; 0x06
    170c:	97 81       	ldd	r25, Z+7	; 0x07
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <vfprintf+0x39c>
    1710:	8f ef       	ldi	r24, 0xFF	; 255
    1712:	9f ef       	ldi	r25, 0xFF	; 255
    1714:	2c 96       	adiw	r28, 0x0c	; 12
    1716:	e2 e1       	ldi	r30, 0x12	; 18
    1718:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__epilogue_restores__>

0000171c <strnlen_P>:
    171c:	fc 01       	movw	r30, r24
    171e:	05 90       	lpm	r0, Z+
    1720:	61 50       	subi	r22, 0x01	; 1
    1722:	70 40       	sbci	r23, 0x00	; 0
    1724:	01 10       	cpse	r0, r1
    1726:	d8 f7       	brcc	.-10     	; 0x171e <strnlen_P+0x2>
    1728:	80 95       	com	r24
    172a:	90 95       	com	r25
    172c:	8e 0f       	add	r24, r30
    172e:	9f 1f       	adc	r25, r31
    1730:	08 95       	ret

00001732 <strnlen>:
    1732:	fc 01       	movw	r30, r24
    1734:	61 50       	subi	r22, 0x01	; 1
    1736:	70 40       	sbci	r23, 0x00	; 0
    1738:	01 90       	ld	r0, Z+
    173a:	01 10       	cpse	r0, r1
    173c:	d8 f7       	brcc	.-10     	; 0x1734 <strnlen+0x2>
    173e:	80 95       	com	r24
    1740:	90 95       	com	r25
    1742:	8e 0f       	add	r24, r30
    1744:	9f 1f       	adc	r25, r31
    1746:	08 95       	ret

00001748 <fputc>:
    1748:	0f 93       	push	r16
    174a:	1f 93       	push	r17
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	fb 01       	movw	r30, r22
    1752:	23 81       	ldd	r18, Z+3	; 0x03
    1754:	21 fd       	sbrc	r18, 1
    1756:	03 c0       	rjmp	.+6      	; 0x175e <fputc+0x16>
    1758:	8f ef       	ldi	r24, 0xFF	; 255
    175a:	9f ef       	ldi	r25, 0xFF	; 255
    175c:	28 c0       	rjmp	.+80     	; 0x17ae <fputc+0x66>
    175e:	22 ff       	sbrs	r18, 2
    1760:	16 c0       	rjmp	.+44     	; 0x178e <fputc+0x46>
    1762:	46 81       	ldd	r20, Z+6	; 0x06
    1764:	57 81       	ldd	r21, Z+7	; 0x07
    1766:	24 81       	ldd	r18, Z+4	; 0x04
    1768:	35 81       	ldd	r19, Z+5	; 0x05
    176a:	42 17       	cp	r20, r18
    176c:	53 07       	cpc	r21, r19
    176e:	44 f4       	brge	.+16     	; 0x1780 <fputc+0x38>
    1770:	a0 81       	ld	r26, Z
    1772:	b1 81       	ldd	r27, Z+1	; 0x01
    1774:	9d 01       	movw	r18, r26
    1776:	2f 5f       	subi	r18, 0xFF	; 255
    1778:	3f 4f       	sbci	r19, 0xFF	; 255
    177a:	31 83       	std	Z+1, r19	; 0x01
    177c:	20 83       	st	Z, r18
    177e:	8c 93       	st	X, r24
    1780:	26 81       	ldd	r18, Z+6	; 0x06
    1782:	37 81       	ldd	r19, Z+7	; 0x07
    1784:	2f 5f       	subi	r18, 0xFF	; 255
    1786:	3f 4f       	sbci	r19, 0xFF	; 255
    1788:	37 83       	std	Z+7, r19	; 0x07
    178a:	26 83       	std	Z+6, r18	; 0x06
    178c:	10 c0       	rjmp	.+32     	; 0x17ae <fputc+0x66>
    178e:	eb 01       	movw	r28, r22
    1790:	09 2f       	mov	r16, r25
    1792:	18 2f       	mov	r17, r24
    1794:	00 84       	ldd	r0, Z+8	; 0x08
    1796:	f1 85       	ldd	r31, Z+9	; 0x09
    1798:	e0 2d       	mov	r30, r0
    179a:	09 95       	icall
    179c:	89 2b       	or	r24, r25
    179e:	e1 f6       	brne	.-72     	; 0x1758 <fputc+0x10>
    17a0:	8e 81       	ldd	r24, Y+6	; 0x06
    17a2:	9f 81       	ldd	r25, Y+7	; 0x07
    17a4:	01 96       	adiw	r24, 0x01	; 1
    17a6:	9f 83       	std	Y+7, r25	; 0x07
    17a8:	8e 83       	std	Y+6, r24	; 0x06
    17aa:	81 2f       	mov	r24, r17
    17ac:	90 2f       	mov	r25, r16
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	1f 91       	pop	r17
    17b4:	0f 91       	pop	r16
    17b6:	08 95       	ret

000017b8 <__ultoa_invert>:
    17b8:	fa 01       	movw	r30, r20
    17ba:	aa 27       	eor	r26, r26
    17bc:	28 30       	cpi	r18, 0x08	; 8
    17be:	51 f1       	breq	.+84     	; 0x1814 <__ultoa_invert+0x5c>
    17c0:	20 31       	cpi	r18, 0x10	; 16
    17c2:	81 f1       	breq	.+96     	; 0x1824 <__ultoa_invert+0x6c>
    17c4:	e8 94       	clt
    17c6:	6f 93       	push	r22
    17c8:	6e 7f       	andi	r22, 0xFE	; 254
    17ca:	6e 5f       	subi	r22, 0xFE	; 254
    17cc:	7f 4f       	sbci	r23, 0xFF	; 255
    17ce:	8f 4f       	sbci	r24, 0xFF	; 255
    17d0:	9f 4f       	sbci	r25, 0xFF	; 255
    17d2:	af 4f       	sbci	r26, 0xFF	; 255
    17d4:	b1 e0       	ldi	r27, 0x01	; 1
    17d6:	3e d0       	rcall	.+124    	; 0x1854 <__ultoa_invert+0x9c>
    17d8:	b4 e0       	ldi	r27, 0x04	; 4
    17da:	3c d0       	rcall	.+120    	; 0x1854 <__ultoa_invert+0x9c>
    17dc:	67 0f       	add	r22, r23
    17de:	78 1f       	adc	r23, r24
    17e0:	89 1f       	adc	r24, r25
    17e2:	9a 1f       	adc	r25, r26
    17e4:	a1 1d       	adc	r26, r1
    17e6:	68 0f       	add	r22, r24
    17e8:	79 1f       	adc	r23, r25
    17ea:	8a 1f       	adc	r24, r26
    17ec:	91 1d       	adc	r25, r1
    17ee:	a1 1d       	adc	r26, r1
    17f0:	6a 0f       	add	r22, r26
    17f2:	71 1d       	adc	r23, r1
    17f4:	81 1d       	adc	r24, r1
    17f6:	91 1d       	adc	r25, r1
    17f8:	a1 1d       	adc	r26, r1
    17fa:	20 d0       	rcall	.+64     	; 0x183c <__ultoa_invert+0x84>
    17fc:	09 f4       	brne	.+2      	; 0x1800 <__ultoa_invert+0x48>
    17fe:	68 94       	set
    1800:	3f 91       	pop	r19
    1802:	2a e0       	ldi	r18, 0x0A	; 10
    1804:	26 9f       	mul	r18, r22
    1806:	11 24       	eor	r1, r1
    1808:	30 19       	sub	r19, r0
    180a:	30 5d       	subi	r19, 0xD0	; 208
    180c:	31 93       	st	Z+, r19
    180e:	de f6       	brtc	.-74     	; 0x17c6 <__ultoa_invert+0xe>
    1810:	cf 01       	movw	r24, r30
    1812:	08 95       	ret
    1814:	46 2f       	mov	r20, r22
    1816:	47 70       	andi	r20, 0x07	; 7
    1818:	40 5d       	subi	r20, 0xD0	; 208
    181a:	41 93       	st	Z+, r20
    181c:	b3 e0       	ldi	r27, 0x03	; 3
    181e:	0f d0       	rcall	.+30     	; 0x183e <__ultoa_invert+0x86>
    1820:	c9 f7       	brne	.-14     	; 0x1814 <__ultoa_invert+0x5c>
    1822:	f6 cf       	rjmp	.-20     	; 0x1810 <__ultoa_invert+0x58>
    1824:	46 2f       	mov	r20, r22
    1826:	4f 70       	andi	r20, 0x0F	; 15
    1828:	40 5d       	subi	r20, 0xD0	; 208
    182a:	4a 33       	cpi	r20, 0x3A	; 58
    182c:	18 f0       	brcs	.+6      	; 0x1834 <__ultoa_invert+0x7c>
    182e:	49 5d       	subi	r20, 0xD9	; 217
    1830:	31 fd       	sbrc	r19, 1
    1832:	40 52       	subi	r20, 0x20	; 32
    1834:	41 93       	st	Z+, r20
    1836:	02 d0       	rcall	.+4      	; 0x183c <__ultoa_invert+0x84>
    1838:	a9 f7       	brne	.-22     	; 0x1824 <__ultoa_invert+0x6c>
    183a:	ea cf       	rjmp	.-44     	; 0x1810 <__ultoa_invert+0x58>
    183c:	b4 e0       	ldi	r27, 0x04	; 4
    183e:	a6 95       	lsr	r26
    1840:	97 95       	ror	r25
    1842:	87 95       	ror	r24
    1844:	77 95       	ror	r23
    1846:	67 95       	ror	r22
    1848:	ba 95       	dec	r27
    184a:	c9 f7       	brne	.-14     	; 0x183e <__ultoa_invert+0x86>
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	61 05       	cpc	r22, r1
    1850:	71 05       	cpc	r23, r1
    1852:	08 95       	ret
    1854:	9b 01       	movw	r18, r22
    1856:	ac 01       	movw	r20, r24
    1858:	0a 2e       	mov	r0, r26
    185a:	06 94       	lsr	r0
    185c:	57 95       	ror	r21
    185e:	47 95       	ror	r20
    1860:	37 95       	ror	r19
    1862:	27 95       	ror	r18
    1864:	ba 95       	dec	r27
    1866:	c9 f7       	brne	.-14     	; 0x185a <__ultoa_invert+0xa2>
    1868:	62 0f       	add	r22, r18
    186a:	73 1f       	adc	r23, r19
    186c:	84 1f       	adc	r24, r20
    186e:	95 1f       	adc	r25, r21
    1870:	a0 1d       	adc	r26, r0
    1872:	08 95       	ret

00001874 <__prologue_saves__>:
    1874:	2f 92       	push	r2
    1876:	3f 92       	push	r3
    1878:	4f 92       	push	r4
    187a:	5f 92       	push	r5
    187c:	6f 92       	push	r6
    187e:	7f 92       	push	r7
    1880:	8f 92       	push	r8
    1882:	9f 92       	push	r9
    1884:	af 92       	push	r10
    1886:	bf 92       	push	r11
    1888:	cf 92       	push	r12
    188a:	df 92       	push	r13
    188c:	ef 92       	push	r14
    188e:	ff 92       	push	r15
    1890:	0f 93       	push	r16
    1892:	1f 93       	push	r17
    1894:	cf 93       	push	r28
    1896:	df 93       	push	r29
    1898:	cd b7       	in	r28, 0x3d	; 61
    189a:	de b7       	in	r29, 0x3e	; 62
    189c:	ca 1b       	sub	r28, r26
    189e:	db 0b       	sbc	r29, r27
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	f8 94       	cli
    18a4:	de bf       	out	0x3e, r29	; 62
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	cd bf       	out	0x3d, r28	; 61
    18aa:	09 94       	ijmp

000018ac <__epilogue_restores__>:
    18ac:	2a 88       	ldd	r2, Y+18	; 0x12
    18ae:	39 88       	ldd	r3, Y+17	; 0x11
    18b0:	48 88       	ldd	r4, Y+16	; 0x10
    18b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    18b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    18b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    18b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    18ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    18bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    18be:	b9 84       	ldd	r11, Y+9	; 0x09
    18c0:	c8 84       	ldd	r12, Y+8	; 0x08
    18c2:	df 80       	ldd	r13, Y+7	; 0x07
    18c4:	ee 80       	ldd	r14, Y+6	; 0x06
    18c6:	fd 80       	ldd	r15, Y+5	; 0x05
    18c8:	0c 81       	ldd	r16, Y+4	; 0x04
    18ca:	1b 81       	ldd	r17, Y+3	; 0x03
    18cc:	aa 81       	ldd	r26, Y+2	; 0x02
    18ce:	b9 81       	ldd	r27, Y+1	; 0x01
    18d0:	ce 0f       	add	r28, r30
    18d2:	d1 1d       	adc	r29, r1
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	cd bf       	out	0x3d, r28	; 61
    18de:	ed 01       	movw	r28, r26
    18e0:	08 95       	ret

000018e2 <_exit>:
    18e2:	f8 94       	cli

000018e4 <__stop_program>:
    18e4:	ff cf       	rjmp	.-2      	; 0x18e4 <__stop_program>
